[{"documents":[{"i":1,"t":"","u":"/obsidian/blog/archive","b":["博客"]},{"i":2,"t":"","u":"/obsidian/blog/authors","b":["博客"]},{"i":3,"t":"","u":"/obsidian/blog/authors/all-sebastien-lorber-articles","b":["博客"]},{"i":10,"t":"MDX Blog Post","u":"/obsidian/blog/mdx-blog-post","b":["博客"]},{"i":12,"t":"First Blog Post","u":"/obsidian/blog/first-blog-post","b":["博客"]},{"i":14,"t":"Long Blog Post","u":"/obsidian/blog/long-blog-post","b":["博客"]},{"i":16,"t":"","u":"/obsidian/blog/authors/yangshun","b":["博客"]},{"i":23,"t":"Welcome","u":"/obsidian/blog/welcome","b":["博客"]},{"i":25,"t":"2025-06-30","u":"/obsidian/docs/daily/2025-06-30","b":["daily"]},{"i":27,"t":"异步资源导入架构设计说明","u":"/obsidian/docs/daily/2025-07-01","b":["daily"]},{"i":43,"t":"工作计划","u":"/obsidian/docs/Iflytek/工作计划","b":["Iflytek"]},{"i":49,"t":"【最佳实践】Feign 泛型反序列化：告别 LinkedTreeMap 的终极解决方案","u":"/obsidian/docs/Iflytek/技术方案/【最佳实践】Feign 泛型反序列化：告别 LinkedTreeMap 的终极解决方案","b":["Iflytek","技术方案"]},{"i":57,"t":"Java通过WebSocket 与AI进行通信","u":"/obsidian/docs/Iflytek/技术方案/Java通过WebSocket 与AI进行通信","b":["Iflytek","技术方案"]},{"i":59,"t":"Ai大模型调用时候Redission实现的令牌桶限流","u":"/obsidian/docs/Iflytek/技术方案/Ai大模型调用时候Redission实现的令牌桶限流","b":["Iflytek","技术方案"]},{"i":71,"t":"Result 包装响应体","u":"/obsidian/docs/Iflytek/技术方案/Result 包装响应体","b":["Iflytek","技术方案"]},{"i":73,"t":"Spring Boot 中多环境异构配置的优雅实现","u":"/obsidian/docs/Iflytek/技术方案/Spring Boot 中多环境异构配置的优雅实现","b":["Iflytek","技术方案"]},{"i":83,"t":"todo CAS 单点登录结合Spring-Boot-Starter","u":"/obsidian/docs/Iflytek/技术方案/todo CAS 单点登录结合Spring-Boot-Starter","b":["Iflytek","技术方案"]},{"i":87,"t":"Zset做的延迟队列","u":"/obsidian/docs/Iflytek/技术方案/Zset做的延迟队列","b":["Iflytek","技术方案"]},{"i":97,"t":"为什么await()会阻塞当前线程，在响应式环境中会导致线程匮乏？","u":"/obsidian/docs/Iflytek/技术方案/为什么await()会阻塞当前线程，在响应式环境中会导致线程匮乏？","b":["Iflytek","技术方案"]},{"i":99,"t":"从状态设计模式--->状态机控制打回资源的释放","u":"/obsidian/docs/Iflytek/技术方案/从状态设计模式--->状态机控制打回资源的释放","b":["Iflytek","技术方案"]},{"i":109,"t":"再有人问你如何实现订单到期关闭，就把这篇文章发给他！","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","b":["Iflytek","技术方案"]},{"i":137,"t":"多线程下 上下文信息丢失问题","u":"/obsidian/docs/Iflytek/技术方案/多线程下 上下文信息丢失问题","b":["Iflytek","技术方案"]},{"i":139,"t":"动态sql拼接null 导致的错误","u":"/obsidian/docs/Iflytek/技术方案/动态sql拼接null 导致的错误","b":["Iflytek","技术方案"]},{"i":141,"t":"移动云+dataz+服务CPU占用率高导致服务器压力大线上问题排查：","u":"/obsidian/docs/Iflytek/技术方案/如何排查CPU占用飙升的问题 ---> 排查到频繁的垃圾回收","b":["Iflytek","技术方案"]},{"i":143,"t":"异步资源导入架构设计说明","u":"/obsidian/docs/Iflytek/技术方案/异步资源导入架构设计说明","b":["Iflytek","技术方案"]},{"i":159,"t":"快速将+SpringBoot+应用接入+Prometheus+监控体系.doc：","u":"/obsidian/docs/Iflytek/技术方案/快速将+SpringBoot+应用接入+Prometheus+监控体系","b":["Iflytek","技术方案"]},{"i":161,"t":"数据库动态sql拼接问题！todo","u":"/obsidian/docs/Iflytek/技术方案/数据库动态sql拼接问题！todo","b":["Iflytek","技术方案"]},{"i":163,"t":"动态 YAML → ModelParams 映射全链路揭秘与最佳实践","u":"/obsidian/docs/Iflytek/技术方案/编写yml导致的参数增删如何影响实体类呢？","b":["Iflytek","技术方案"]},{"i":181,"t":"计算批次大小的证明","u":"/obsidian/docs/Iflytek/技术方案/计算批次大小的证明","b":["Iflytek","技术方案"]},{"i":183,"t":"雪花算法导致的前端精度丢失问题","u":"/obsidian/docs/Iflytek/技术方案/雪花算法导致的前端精度丢失问题","b":["Iflytek","技术方案"]},{"i":189,"t":"竞态条件与 TTL 过期","u":"/obsidian/docs/Iflytek/技术方案/竞态条件与 TTL 过期","b":["Iflytek","技术方案"]},{"i":193,"t":"本周代办","u":"/obsidian/docs/Iflytek/本周代办","b":["Iflytek"]},{"i":195,"t":"重写Ai模块代码到新标注工具系统","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","b":["Iflytek","技术方案"]},{"i":216,"t":"检查bug提示词：","u":"/obsidian/docs/Iflytek/检查bug提示词：","b":["Iflytek"]},{"i":218,"t":"我的知识库计划","u":"/obsidian/docs/intro","b":["文档"]},{"i":231,"t":"RAG知识库的上传","u":"/obsidian/docs/Java/AI/Rag","b":["Java","AI"]},{"i":235,"t":"Redis Stream 消息不会自动过期 消费失败怎么办？","u":"/obsidian/docs/Java/Redis/Redis Stream 消息不会自动过期 消费失败怎么办？","b":["Java","Redis"]},{"i":237,"t":"常用命令K8s","u":"/obsidian/docs/Java/K8s/常用命令K8s","b":["Java","K8s"]},{"i":241,"t":"Redis下的生产者消费者模式","u":"/obsidian/docs/Java/Redis/Redis下的生产者消费者模式","b":["Java","Redis"]},{"i":243,"t":"@ConfigurationProperties与@Value的区别","u":"/obsidian/docs/Java/Spring/@ConfigurationProperties与@Value的区别","b":["Java","Spring"]},{"i":245,"t":"JsonAnySetter","u":"/obsidian/docs/Java/Spring/@JsonAnySetter-json反序列化的兜底机制","b":["Java","Spring"]},{"i":249,"t":"log 配置文件","u":"/obsidian/docs/Java/Spring/log 配置文件","b":["Java","Spring"]},{"i":251,"t":"@PostConstruct","u":"/obsidian/docs/Java/Spring/@PostConstruct","b":["Java","Spring"]},{"i":253,"t":"Semaphore 信号量在Java中的作用","u":"/obsidian/docs/Java/并发编程/Semaphore 信号量在Java中的作用","b":["Java","并发编程"]},{"i":255,"t":"多线程下 上下文信息丢失问题","u":"/obsidian/docs/Java/并发编程/多线程下 上下文信息丢失问题","b":["Java","并发编程"]},{"i":257,"t":"feign - Stream 下重定向问题","u":"/obsidian/docs/Java/微服务（Feign、Sentinel、Nacos 等）/feign - Stream 下重定向问题","b":["Java","微服务（Feign、Sentinel、Nacos 等）"]},{"i":259,"t":"如何解决feigin在获取数据时候出现的范型擦除？","u":"/obsidian/docs/Java/微服务（Feign、Sentinel、Nacos 等）/如何解决feigin在获取数据时候出现的范型擦除？","b":["Java","微服务（Feign、Sentinel、Nacos 等）"]},{"i":264,"t":"限流的方法与实现","u":"/obsidian/docs/Java/微服务（Feign、Sentinel、Nacos 等）/限流的方法与实现","b":["Java","微服务（Feign、Sentinel、Nacos 等）"]},{"i":266,"t":"ShardingSphere 分库分表注意事项","u":"/obsidian/docs/Java/数据库/ShardingShpere分表注意事项","b":["Java","数据库"]},{"i":274,"t":"什么是自动化测试框架Mock","u":"/obsidian/docs/Java/测试/什么是自动化测试框架Mock","b":["Java","测试"]},{"i":288,"t":"ddd下如何解决循环依赖的问题","u":"/obsidian/docs/Java/设计模式/ddd下如何解决循环依赖的问题","b":["Java","设计模式"]},{"i":292,"t":"接雨水","u":"/obsidian/docs/Java/算法/接雨水","b":["Java","算法"]},{"i":294,"t":"监听者模式","u":"/obsidian/docs/Java/设计模式/监听者模式","b":["Java","设计模式"]},{"i":296,"t":"Redission 下的雪花算法","u":"/obsidian/docs/源码/Redission 下的雪花算法","b":["源码"]},{"i":298,"t":"hutool工具下雪花算法. todo","u":"/obsidian/docs/源码/hutool工具下雪花算法. todo","b":["源码"]},{"i":300,"t":"Spring Feign 的源码","u":"/obsidian/docs/源码/Spring Feign 的源码","b":["源码"]},{"i":302,"t":"Redisson的create（config）是在什么时候注入配置的？","u":"/obsidian/docs/源码/Redisson的create（config）是在什么时候注入配置的？","b":["源码"]}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/1",[]],["t/2",[]],["t/3",[]],["t/10",[0,2.738,1,2.103,2,2.103]],["t/12",[1,2.103,2,2.103,3,2.738]],["t/14",[1,2.103,2,2.103,4,2.738]],["t/16",[]],["t/23",[5,4.356]],["t/25",[6,2.738,7,2.738,8,2.738]],["t/27",[9,0.934]],["t/43",[9,0.934]],["t/49",[9,0.769,10,1.773,11,2.309]],["t/57",[12,3.362,13,2.892]],["t/59",[14,4.356]],["t/71",[9,0.721,15,3.362]],["t/73",[9,0.587,16,2.103,17,2.355]],["t/83",[16,1.533,17,1.717,18,1.717,19,1.996,20,1.996]],["t/87",[21,4.356]],["t/97",[22,4.356]],["t/99",[9,1.016]],["t/109",[9,0.934]],["t/137",[9,1.016]],["t/139",[9,0.721,23,3.362]],["t/141",[24,4.356]],["t/143",[9,0.934]],["t/159",[25,4.356]],["t/161",[26,4.356]],["t/163",[9,0.858,27,1.996,28,1.996]],["t/181",[9,0.934]],["t/183",[9,0.934]],["t/189",[9,0.875,29,2.738]],["t/193",[9,0.934]],["t/195",[13,3.748]],["t/216",[30,4.356]],["t/218",[9,0.934]],["t/231",[31,4.356]],["t/235",[9,0.769,32,1.986,33,1.986]],["t/237",[34,4.356]],["t/241",[32,3.748]],["t/243",[35,4.356]],["t/245",[36,4.356]],["t/249",[9,0.721,37,3.362]],["t/251",[38,4.356]],["t/253",[39,3.362,40,3.362]],["t/255",[9,1.016]],["t/257",[9,0.587,10,2.103,33,2.355]],["t/259",[41,4.356]],["t/264",[9,0.934]],["t/266",[9,0.721,42,3.362]],["t/274",[43,4.356]],["t/288",[44,4.356]],["t/292",[9,0.934]],["t/294",[9,0.934]],["t/296",[9,0.721,45,3.362]],["t/298",[18,2.892,46,3.362]],["t/300",[9,0.587,10,2.103,16,2.103]],["t/302",[47,4.356]]],"invertedIndex":[["",{"_index":9,"t":{"27":{"position":[[0,12]]},"43":{"position":[[0,4]]},"49":{"position":[[12,9],[36,7]]},"71":{"position":[[7,5]]},"73":{"position":[[12,13]]},"99":{"position":[[0,7],[10,13]]},"109":{"position":[[0,26]]},"137":{"position":[[0,4],[5,9]]},"139":{"position":[[12,5]]},"143":{"position":[[0,12]]},"163":{"position":[[0,2],[8,1],[22,12]]},"181":{"position":[[0,9]]},"183":{"position":[[0,15]]},"189":{"position":[[0,5],[10,2]]},"193":{"position":[[0,4]]},"218":{"position":[[0,7]]},"235":{"position":[[13,8],[22,8]]},"249":{"position":[[4,4]]},"255":{"position":[[0,4],[5,9]]},"257":{"position":[[15,6]]},"264":{"position":[[0,8]]},"266":{"position":[[15,8]]},"292":{"position":[[0,3]]},"294":{"position":[[0,5]]},"296":{"position":[[10,6]]},"300":{"position":[[13,3]]}}}],["06",{"_index":7,"t":{"25":{"position":[[5,2]]}}}],["2025",{"_index":6,"t":{"25":{"position":[[0,4]]}}}],["30",{"_index":8,"t":{"25":{"position":[[8,2]]}}}],["ai",{"_index":13,"t":{"57":{"position":[[16,7]]},"195":{"position":[[0,16]]}}}],["ai大模型调用时候rediss",{"_index":14,"t":{"59":{"position":[[0,26]]}}}],["await",{"_index":22,"t":{"97":{"position":[[0,33]]}}}],["blog",{"_index":1,"t":{"10":{"position":[[4,4]]},"12":{"position":[[6,4]]},"14":{"position":[[5,4]]}}}],["boot",{"_index":17,"t":{"73":{"position":[[7,4]]},"83":{"position":[[22,4]]}}}],["bug",{"_index":30,"t":{"216":{"position":[[0,9]]}}}],["ca",{"_index":19,"t":{"83":{"position":[[5,3]]}}}],["configurationproperties与@valu",{"_index":35,"t":{"243":{"position":[[0,34]]}}}],["dataz+服务cpu",{"_index":24,"t":{"141":{"position":[[0,34]]}}}],["ddd",{"_index":44,"t":{"288":{"position":[[0,15]]}}}],["feigin",{"_index":41,"t":{"259":{"position":[[0,25]]}}}],["feign",{"_index":10,"t":{"49":{"position":[[0,11]]},"257":{"position":[[0,5]]},"300":{"position":[[7,5]]}}}],["first",{"_index":3,"t":{"12":{"position":[[0,5]]}}}],["hutool",{"_index":46,"t":{"298":{"position":[[0,14]]}}}],["java",{"_index":40,"t":{"253":{"position":[[10,12]]}}}],["java通过websocket",{"_index":12,"t":{"57":{"position":[[0,15]]}}}],["jsonanysett",{"_index":36,"t":{"245":{"position":[[0,13]]}}}],["k8",{"_index":34,"t":{"237":{"position":[[0,7]]}}}],["linkedtreemap",{"_index":11,"t":{"49":{"position":[[22,13]]}}}],["log",{"_index":37,"t":{"249":{"position":[[0,3]]}}}],["long",{"_index":4,"t":{"14":{"position":[[0,4]]}}}],["mdx",{"_index":0,"t":{"10":{"position":[[0,3]]}}}],["mock",{"_index":43,"t":{"274":{"position":[[0,14]]}}}],["modelparam",{"_index":28,"t":{"163":{"position":[[10,11]]}}}],["post",{"_index":2,"t":{"10":{"position":[[9,4]]},"12":{"position":[[11,4]]},"14":{"position":[[10,4]]}}}],["postconstruct",{"_index":38,"t":{"251":{"position":[[0,14]]}}}],["rag",{"_index":31,"t":{"231":{"position":[[0,9]]}}}],["redi",{"_index":32,"t":{"235":{"position":[[0,5]]},"241":{"position":[[0,15]]}}}],["rediss",{"_index":45,"t":{"296":{"position":[[0,9]]}}}],["redisson的create（config",{"_index":47,"t":{"302":{"position":[[0,35]]}}}],["result",{"_index":15,"t":{"71":{"position":[[0,6]]}}}],["semaphor",{"_index":39,"t":{"253":{"position":[[0,9]]}}}],["shardingspher",{"_index":42,"t":{"266":{"position":[[0,14]]}}}],["spring",{"_index":16,"t":{"73":{"position":[[0,6]]},"83":{"position":[[9,12]]},"300":{"position":[[0,6]]}}}],["springboot+应用接入+prometheus+监控体系.doc",{"_index":25,"t":{"159":{"position":[[0,40]]}}}],["sql拼接null",{"_index":23,"t":{"139":{"position":[[0,11]]}}}],["sql拼接问题！todo",{"_index":26,"t":{"161":{"position":[[0,17]]}}}],["starter",{"_index":20,"t":{"83":{"position":[[27,7]]}}}],["stream",{"_index":33,"t":{"235":{"position":[[6,6]]},"257":{"position":[[8,6]]}}}],["todo",{"_index":18,"t":{"83":{"position":[[0,4]]},"298":{"position":[[15,4]]}}}],["ttl",{"_index":29,"t":{"189":{"position":[[6,3]]}}}],["welcom",{"_index":5,"t":{"23":{"position":[[0,7]]}}}],["yaml",{"_index":27,"t":{"163":{"position":[[3,4]]}}}],["zset",{"_index":21,"t":{"87":{"position":[[0,10]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":4,"t":"Welcome","u":"/obsidian/blog/authors/all-sebastien-lorber-articles","h":"","p":3},{"i":6,"t":"MDX Blog Post","u":"/obsidian/blog/authors/all-sebastien-lorber-articles","h":"","p":3},{"i":8,"t":"First Blog Post","u":"/obsidian/blog/authors/all-sebastien-lorber-articles","h":"","p":3},{"i":17,"t":"Welcome","u":"/obsidian/blog/authors/yangshun","h":"","p":16},{"i":19,"t":"Long Blog Post","u":"/obsidian/blog/authors/yangshun","h":"","p":16},{"i":21,"t":"First Blog Post","u":"/obsidian/blog/authors/yangshun","h":"","p":16},{"i":29,"t":"问题背景","u":"/obsidian/docs/daily/2025-07-01","h":"#问题背景","p":27},{"i":31,"t":"技术方案","u":"/obsidian/docs/daily/2025-07-01","h":"#技术方案","p":27},{"i":33,"t":"Disruptor 的作用","u":"/obsidian/docs/daily/2025-07-01","h":"#disruptor-的作用","p":27},{"i":35,"t":"Redis Stream 的作用","u":"/obsidian/docs/daily/2025-07-01","h":"#redis-stream-的作用","p":27},{"i":37,"t":"架构协作流程","u":"/obsidian/docs/daily/2025-07-01","h":"#架构协作流程","p":27},{"i":39,"t":"技术优势","u":"/obsidian/docs/daily/2025-07-01","h":"#技术优势","p":27},{"i":41,"t":"配置参数","u":"/obsidian/docs/daily/2025-07-01","h":"#配置参数","p":27},{"i":45,"t":"Next week plan","u":"/obsidian/docs/Iflytek/工作计划","h":"#next-week-plan","p":43},{"i":47,"t":"任务具体执行过程","u":"/obsidian/docs/Iflytek/工作计划","h":"","p":43},{"i":51,"t":"一、 问题背景：恼人的 ClassCastException","u":"/obsidian/docs/Iflytek/技术方案/【最佳实践】Feign 泛型反序列化：告别 LinkedTreeMap 的终极解决方案","h":"#一-问题背景恼人的-classcastexception","p":49},{"i":53,"t":"二、 核心思路：釜底抽薪，自定义 Decoder","u":"/obsidian/docs/Iflytek/技术方案/【最佳实践】Feign 泛型反序列化：告别 LinkedTreeMap 的终极解决方案","h":"#二-核心思路釜底抽薪自定义-decoder","p":49},{"i":55,"t":"三、解决方案架构","u":"/obsidian/docs/Iflytek/技术方案/【最佳实践】Feign 泛型反序列化：告别 LinkedTreeMap 的终极解决方案","h":"#三解决方案架构","p":49},{"i":61,"t":"1、策略工厂替换原来的名称匹配","u":"/obsidian/docs/Iflytek/技术方案/Ai大模型调用时候Redission实现的令牌桶限流","h":"#1策略工厂替换原来的名称匹配","p":59},{"i":63,"t":"2、Redission 实现令牌桶限流","u":"/obsidian/docs/Iflytek/技术方案/Ai大模型调用时候Redission实现的令牌桶限流","h":"#2redission-实现令牌桶限流","p":59},{"i":65,"t":"上面是Redisson 进行令牌桶的操作的部分，现在我要记录Flux的使用。","u":"/obsidian/docs/Iflytek/技术方案/Ai大模型调用时候Redission实现的令牌桶限流","h":"#上面是redisson-进行令牌桶的操作的部分现在我要记录flux的使用","p":59},{"i":67,"t":"为什么必须用 Flux.using？","u":"/obsidian/docs/Iflytek/技术方案/Ai大模型调用时候Redission实现的令牌桶限流","h":"#为什么必须用-fluxusing","p":59},{"i":69,"t":"补充知识：","u":"/obsidian/docs/Iflytek/技术方案/Ai大模型调用时候Redission实现的令牌桶限流","h":"#补充知识","p":59},{"i":75,"t":"1、问题背景","u":"/obsidian/docs/Iflytek/技术方案/Spring Boot 中多环境异构配置的优雅实现","h":"#1问题背景","p":73},{"i":77,"t":"2. 核心结论 (TL;DR)","u":"/obsidian/docs/Iflytek/技术方案/Spring Boot 中多环境异构配置的优雅实现","h":"#2-核心结论-tldr","p":73},{"i":79,"t":"而且：","u":"/obsidian/docs/Iflytek/技术方案/Spring Boot 中多环境异构配置的优雅实现","h":"#而且","p":73},{"i":81,"t":"3、推荐使用 @ConfigurationProperties","u":"/obsidian/docs/Iflytek/技术方案/Spring Boot 中多环境异构配置的优雅实现","h":"#3推荐使用-configurationproperties","p":73},{"i":85,"t":"首先我们要了解下什么是CAS系统？","u":"/obsidian/docs/Iflytek/技术方案/todo CAS 单点登录结合Spring-Boot-Starter","h":"#首先我们要了解下什么是cas系统","p":83},{"i":89,"t":"核心业务场景","u":"/obsidian/docs/Iflytek/技术方案/Zset做的延迟队列","h":"#核心业务场景","p":87},{"i":91,"t":"技术挑战：实现动态延时的自动释放","u":"/obsidian/docs/Iflytek/技术方案/Zset做的延迟队列","h":"#技术挑战实现动态延时的自动释放","p":87},{"i":93,"t":"技术选型分析","u":"/obsidian/docs/Iflytek/技术方案/Zset做的延迟队列","h":"#技术选型分析","p":87},{"i":95,"t":"最终选择：基于 Redis ZSet 的延时队列","u":"/obsidian/docs/Iflytek/技术方案/Zset做的延迟队列","h":"#最终选择基于-redis-zset-的延时队列","p":87},{"i":101,"t":"新概念： 什么是状态机？","u":"/obsidian/docs/Iflytek/技术方案/从状态设计模式--->状态机控制打回资源的释放","h":"#新概念-什么是状态机","p":99},{"i":103,"t":"下面给出状态机的四大概念：","u":"/obsidian/docs/Iflytek/技术方案/从状态设计模式--->状态机控制打回资源的释放","h":"#下面给出状态机的四大概念","p":99},{"i":105,"t":"如何设计状态机？","u":"/obsidian/docs/Iflytek/技术方案/从状态设计模式--->状态机控制打回资源的释放","h":"#如何设计状态机","p":99},{"i":107,"t":"Spring为我们提供了状态机 ---- spring statemachine","u":"/obsidian/docs/Iflytek/技术方案/从状态设计模式--->状态机控制打回资源的释放","h":"#spring为我们提供了状态机------spring-statemachine","p":99},{"i":111,"t":"前言","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#前言","p":109},{"i":113,"t":"一、被动关闭","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#一被动关闭","p":109},{"i":115,"t":"二、定时任务","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#二定时任务","p":109},{"i":117,"t":"三、JDK自带的延迟队列","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#三jdk自带的延迟队列","p":109},{"i":119,"t":"四、Netty的时间轮","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#四netty的时间轮","p":109},{"i":121,"t":"五、Kafka的时间轮","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#五kafka的时间轮","p":109},{"i":123,"t":"六、RocketMQ延迟消息","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#六rocketmq延迟消息","p":109},{"i":125,"t":"七、RabbitMQ死信队列","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#七rabbitmq死信队列","p":109},{"i":127,"t":"八、RabbitMQ插件","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#八rabbitmq插件","p":109},{"i":129,"t":"九、Redis过期监听","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#九redis过期监听","p":109},{"i":131,"t":"十、Redis的zset","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#十redis的zset","p":109},{"i":133,"t":"十一、Redisson","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#十一redisson","p":109},{"i":135,"t":"总结","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#总结","p":109},{"i":145,"t":"问题背景","u":"/obsidian/docs/Iflytek/技术方案/异步资源导入架构设计说明","h":"#问题背景","p":143},{"i":147,"t":"技术方案","u":"/obsidian/docs/Iflytek/技术方案/异步资源导入架构设计说明","h":"#技术方案","p":143},{"i":149,"t":"Disruptor 的作用","u":"/obsidian/docs/Iflytek/技术方案/异步资源导入架构设计说明","h":"#disruptor-的作用","p":143},{"i":151,"t":"Redis Stream 的作用","u":"/obsidian/docs/Iflytek/技术方案/异步资源导入架构设计说明","h":"#redis-stream-的作用","p":143},{"i":153,"t":"架构协作流程","u":"/obsidian/docs/Iflytek/技术方案/异步资源导入架构设计说明","h":"#架构协作流程","p":143},{"i":155,"t":"技术优势","u":"/obsidian/docs/Iflytek/技术方案/异步资源导入架构设计说明","h":"#技术优势","p":143},{"i":157,"t":"配置参数","u":"/obsidian/docs/Iflytek/技术方案/异步资源导入架构设计说明","h":"#配置参数","p":143},{"i":165,"t":"1 · 先看我们到底痛在哪","u":"/obsidian/docs/Iflytek/技术方案/编写yml导致的参数增删如何影响实体类呢？","h":"#1--先看我们到底痛在哪","p":163},{"i":167,"t":"2 · 字段“三分法”——先把需求说清楚","u":"/obsidian/docs/Iflytek/技术方案/编写yml导致的参数增删如何影响实体类呢？","h":"#2--字段三分法先把需求说清楚","p":163},{"i":169,"t":"3 · 为什么单靠 @JsonAnySetter 不行","u":"/obsidian/docs/Iflytek/技术方案/编写yml导致的参数增删如何影响实体类呢？","h":"#3--为什么单靠-jsonanysetter-不行","p":163},{"i":171,"t":"4 · 全链路拆解：五步到位","u":"/obsidian/docs/Iflytek/技术方案/编写yml导致的参数增删如何影响实体类呢？","h":"#4--全链路拆解五步到位","p":163},{"i":173,"t":"4.1 关键代码位置","u":"/obsidian/docs/Iflytek/技术方案/编写yml导致的参数增删如何影响实体类呢？","h":"#41-关键代码位置","p":163},{"i":175,"t":"5 · 代码落地","u":"/obsidian/docs/Iflytek/技术方案/编写yml导致的参数增删如何影响实体类呢？","h":"#5--代码落地","p":163},{"i":177,"t":"6 · 常见疑问（FAQ）","u":"/obsidian/docs/Iflytek/技术方案/编写yml导致的参数增删如何影响实体类呢？","h":"#6--常见疑问faq","p":163},{"i":179,"t":"· 写在最后","u":"/obsidian/docs/Iflytek/技术方案/编写yml导致的参数增删如何影响实体类呢？","h":"#-写在最后","p":163},{"i":185,"t":"问题根源","u":"/obsidian/docs/Iflytek/技术方案/雪花算法导致的前端精度丢失问题","h":"#问题根源","p":183},{"i":187,"t":"雪花算法ID范围","u":"/obsidian/docs/Iflytek/技术方案/雪花算法导致的前端精度丢失问题","h":"#雪花算法id范围","p":183},{"i":191,"t":"1. 竞态条件 (Race Condition)","u":"/obsidian/docs/Iflytek/技术方案/竞态条件与 TTL 过期","h":"#1-竞态条件-race-condition","p":189},{"i":197,"t":"1. 需求分析","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"#1-需求分析","p":195},{"i":198,"t":"1.1 业务需求","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"#11-业务需求","p":195},{"i":200,"t":"1.2 技术需求","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"#12-技术需求","p":195},{"i":202,"t":"2 整体架构图","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"","p":195},{"i":204,"t":"2. 1 数据库表设计","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"#2-1-数据库表设计","p":195},{"i":206,"t":"2. 2 ModelKey设计","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"#2-2-modelkey设计","p":195},{"i":208,"t":"前端传递参数","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"","p":195},{"i":210,"t":"SPI   VS  策略工厂","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"","p":195},{"i":212,"t":"限流","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"","p":195},{"i":214,"t":"**** Redis + Lua 实现令牌桶限流","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"#-redis--lua-实现令牌桶限流","p":195},{"i":220,"t":"我要做什么？","u":"/obsidian/docs/intro","h":"#我要做什么","p":218},{"i":222,"t":"计划内容","u":"/obsidian/docs/intro","h":"#计划内容","p":218},{"i":223,"t":"Java 技术栈学习","u":"/obsidian/docs/intro","h":"#java-技术栈学习","p":218},{"i":225,"t":"源码深度分析","u":"/obsidian/docs/intro","h":"#源码深度分析","p":218},{"i":227,"t":"日常学习记录","u":"/obsidian/docs/intro","h":"#日常学习记录","p":218},{"i":229,"t":"工作技术积累","u":"/obsidian/docs/intro","h":"#工作技术积累","p":218},{"i":233,"t":"2. 方案流程","u":"/obsidian/docs/Java/AI/Rag","h":"#2-方案流程","p":231},{"i":239,"t":"查看所有命名空间","u":"/obsidian/docs/Java/K8s/常用命令K8s","h":"#查看所有命名空间","p":237},{"i":247,"t":"简单流程","u":"/obsidian/docs/Java/Spring/@JsonAnySetter-json反序列化的兜底机制","h":"#简单流程","p":245},{"i":261,"t":"为什么会出现 LinkedTreeMap ？","u":"/obsidian/docs/Java/微服务（Feign、Sentinel、Nacos 等）/如何解决feigin在获取数据时候出现的范型擦除？","h":"#为什么会出现-linkedtreemap-","p":259},{"i":262,"t":"如何解决这个问题呢？","u":"/obsidian/docs/Java/微服务（Feign、Sentinel、Nacos 等）/如何解决feigin在获取数据时候出现的范型擦除？","h":"#如何解决这个问题呢","p":259},{"i":268,"t":"1. 分片键禁止被修改","u":"/obsidian/docs/Java/数据库/ShardingShpere分表注意事项","h":"#1-分片键禁止被修改","p":266},{"i":270,"t":"2. DML 操作必须包含分片键","u":"/obsidian/docs/Java/数据库/ShardingShpere分表注意事项","h":"#2-dml-操作必须包含分片键","p":266},{"i":272,"t":"3. 推荐用法","u":"/obsidian/docs/Java/数据库/ShardingShpere分表注意事项","h":"#3-推荐用法","p":266},{"i":276,"t":"Mock 测试 与 Postman 接口调试的区别与适用场景","u":"/obsidian/docs/Java/测试/什么是自动化测试框架Mock","h":"","p":274},{"i":278,"t":"一、对比维度说明","u":"/obsidian/docs/Java/测试/什么是自动化测试框架Mock","h":"#一对比维度说明","p":274},{"i":280,"t":"二、Mock 测试优势及使用示例","u":"/obsidian/docs/Java/测试/什么是自动化测试框架Mock","h":"#二mock-测试优势及使用示例","p":274},{"i":282,"t":"三、Postman 接口调试的典型用途","u":"/obsidian/docs/Java/测试/什么是自动化测试框架Mock","h":"#三postman-接口调试的典型用途","p":274},{"i":284,"t":"四、应用场景推荐","u":"/obsidian/docs/Java/测试/什么是自动化测试框架Mock","h":"#四应用场景推荐","p":274},{"i":286,"t":"五、总结","u":"/obsidian/docs/Java/测试/什么是自动化测试框架Mock","h":"#五总结","p":274},{"i":290,"t":"那么如何解决循环依赖问题呢？","u":"/obsidian/docs/Java/设计模式/ddd下如何解决循环依赖的问题","h":"#那么如何解决循环依赖问题呢","p":288},{"i":304,"t":"第一步：添加依赖 (The Trigger)","u":"/obsidian/docs/源码/Redisson的create（config）是在什么时候注入配置的？","h":"#第一步添加依赖-the-trigger","p":302},{"i":306,"t":"第二步：提供配置 (The Recipe)","u":"/obsidian/docs/源码/Redisson的create（config）是在什么时候注入配置的？","h":"#第二步提供配置-the-recipe","p":302},{"i":308,"t":"第三步：自动化配置类 (The Magic)","u":"/obsidian/docs/源码/Redisson的create（config）是在什么时候注入配置的？","h":"#第三步自动化配置类-the-magic","p":302},{"i":310,"t":"第四步：依赖注入 (Using the Instance)","u":"/obsidian/docs/源码/Redisson的create（config）是在什么时候注入配置的？","h":"#第四步依赖注入-using-the-instance","p":302},{"i":312,"t":"总结","u":"/obsidian/docs/源码/Redisson的create（config）是在什么时候注入配置的？","h":"#总结","p":302}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/4",[0,4.567]],["t/6",[1,3.346,2,2.479,3,2.479]],["t/8",[2,2.479,3,2.479,4,2.943]],["t/17",[0,4.567]],["t/19",[2,2.479,3,2.479,5,3.346]],["t/21",[2,2.479,3,2.479,4,2.943]],["t/29",[6,0.329]],["t/31",[6,0.329]],["t/33",[6,0.258,7,3.579]],["t/35",[6,0.212,8,2.32,9,2.943]],["t/37",[6,0.329]],["t/39",[6,0.329]],["t/41",[6,0.329]],["t/45",[10,3.346,11,3.346,12,3.346]],["t/47",[6,0.329]],["t/51",[6,0.312,13,3.346]],["t/53",[6,0.312,14,3.346]],["t/55",[6,0.329]],["t/61",[15,3.221]],["t/63",[6,0.258,16,4.07]],["t/65",[17,3.579,18,4.07]],["t/67",[6,0.258,19,4.07]],["t/69",[6,0.329]],["t/75",[15,3.221]],["t/77",[6,0.212,20,2.076,21,3.346]],["t/79",[6,0.329]],["t/81",[22,3.256,23,4.07]],["t/85",[24,5.193]],["t/89",[6,0.329]],["t/91",[6,0.329]],["t/93",[6,0.329]],["t/95",[6,0.276,8,1.97,25,2.841]],["t/101",[6,0.359]],["t/103",[6,0.329]],["t/105",[6,0.329]],["t/107",[26,4.925,27,3.346]],["t/111",[6,0.329]],["t/113",[6,0.329]],["t/115",[6,0.329]],["t/117",[28,5.193]],["t/119",[29,5.193]],["t/121",[30,5.193]],["t/123",[31,5.193]],["t/125",[32,4.567]],["t/127",[32,4.567]],["t/129",[8,3.601]],["t/131",[33,5.193]],["t/133",[17,4.567]],["t/135",[6,0.329]],["t/145",[6,0.329]],["t/147",[6,0.329]],["t/149",[6,0.258,7,3.579]],["t/151",[6,0.212,8,2.32,9,2.943]],["t/153",[6,0.329]],["t/155",[6,0.329]],["t/157",[6,0.329]],["t/165",[6,0.312,15,2.076]],["t/167",[6,0.312,20,2.076]],["t/169",[6,0.307,22,1.975,34,2.468]],["t/171",[6,0.312,35,3.346]],["t/173",[6,0.258,36,4.07]],["t/175",[6,0.312,37,3.346]],["t/177",[6,0.212,38,3.346,39,3.346]],["t/179",[6,0.359]],["t/185",[6,0.329]],["t/187",[40,5.193]],["t/191",[6,0.18,15,1.762,41,2.841,42,2.841]],["t/197",[6,0.258,15,2.525]],["t/198",[6,0.258,43,4.07]],["t/200",[6,0.258,44,4.07]],["t/202",[6,0.258,20,2.525]],["t/204",[6,0.212,15,2.076,20,2.076]],["t/206",[20,3.055,45,3.346]],["t/208",[6,0.329]],["t/210",[6,0.212,46,3.346,47,3.346]],["t/212",[6,0.329]],["t/214",[6,0.307,8,1.712,48,2.468]],["t/220",[6,0.329]],["t/222",[6,0.329]],["t/223",[6,0.258,49,4.07]],["t/225",[6,0.329]],["t/227",[6,0.329]],["t/229",[6,0.329]],["t/233",[6,0.258,20,2.525]],["t/239",[6,0.329]],["t/247",[6,0.329]],["t/261",[6,0.312,50,3.346]],["t/262",[6,0.329]],["t/268",[6,0.258,15,2.525]],["t/270",[6,0.212,20,2.076,51,3.346]],["t/272",[6,0.258,22,3.256]],["t/276",[6,0.307,52,2.171,53,2.171]],["t/278",[6,0.329]],["t/280",[6,0.258,52,3.579]],["t/282",[6,0.258,53,3.579]],["t/284",[6,0.329]],["t/286",[6,0.329]],["t/290",[6,0.329]],["t/304",[6,0.258,54,4.07]],["t/306",[6,0.258,55,4.07]],["t/308",[6,0.258,56,4.07]],["t/310",[6,0.212,57,3.346,58,3.346]],["t/312",[6,0.329]]],"invertedIndex":[["",{"_index":6,"t":{"29":{"position":[[0,4]]},"31":{"position":[[0,4]]},"33":{"position":[[10,3]]},"35":{"position":[[13,3]]},"37":{"position":[[0,6]]},"39":{"position":[[0,4]]},"41":{"position":[[0,4]]},"47":{"position":[[0,8]]},"51":{"position":[[0,2],[3,8]]},"53":{"position":[[0,2],[3,13]]},"55":{"position":[[0,8]]},"63":{"position":[[12,7]]},"67":{"position":[[0,6]]},"69":{"position":[[0,5]]},"77":{"position":[[3,4]]},"79":{"position":[[0,3]]},"89":{"position":[[0,6]]},"91":{"position":[[0,16]]},"93":{"position":[[0,6]]},"95":{"position":[[0,7],[19,5]]},"101":{"position":[[0,4],[5,7]]},"103":{"position":[[0,13]]},"105":{"position":[[0,8]]},"111":{"position":[[0,2]]},"113":{"position":[[0,6]]},"115":{"position":[[0,6]]},"135":{"position":[[0,2]]},"145":{"position":[[0,4]]},"147":{"position":[[0,4]]},"149":{"position":[[10,3]]},"151":{"position":[[13,3]]},"153":{"position":[[0,6]]},"155":{"position":[[0,4]]},"157":{"position":[[0,4]]},"165":{"position":[[2,1],[4,9]]},"167":{"position":[[2,1],[4,16]]},"169":{"position":[[2,1],[4,5],[25,2]]},"171":{"position":[[2,1],[4,10]]},"173":{"position":[[4,6]]},"175":{"position":[[2,1],[4,4]]},"177":{"position":[[2,1]]},"179":{"position":[[0,1],[2,4]]},"185":{"position":[[0,4]]},"191":{"position":[[3,4]]},"197":{"position":[[3,4]]},"198":{"position":[[4,4]]},"200":{"position":[[4,4]]},"202":{"position":[[2,5]]},"204":{"position":[[5,6]]},"208":{"position":[[0,6]]},"210":{"position":[[10,4]]},"212":{"position":[[0,2]]},"214":{"position":[[0,4],[11,1],[17,7]]},"220":{"position":[[0,6]]},"222":{"position":[[0,4]]},"223":{"position":[[5,5]]},"225":{"position":[[0,6]]},"227":{"position":[[0,6]]},"229":{"position":[[0,6]]},"233":{"position":[[3,4]]},"239":{"position":[[0,8]]},"247":{"position":[[0,4]]},"261":{"position":[[0,6],[21,1]]},"262":{"position":[[0,10]]},"268":{"position":[[3,8]]},"270":{"position":[[7,9]]},"272":{"position":[[3,4]]},"276":{"position":[[5,2],[8,1],[18,12]]},"278":{"position":[[0,8]]},"280":{"position":[[7,9]]},"282":{"position":[[10,9]]},"284":{"position":[[0,8]]},"286":{"position":[[0,4]]},"290":{"position":[[0,14]]},"304":{"position":[[0,8]]},"306":{"position":[[0,8]]},"308":{"position":[[0,10]]},"310":{"position":[[0,8]]},"312":{"position":[[0,2]]}}}],["1",{"_index":15,"t":{"61":{"position":[[0,15]]},"75":{"position":[[0,6]]},"165":{"position":[[0,1]]},"191":{"position":[[0,2]]},"197":{"position":[[0,2]]},"204":{"position":[[3,1]]},"268":{"position":[[0,2]]}}}],["1.1",{"_index":43,"t":{"198":{"position":[[0,3]]}}}],["1.2",{"_index":44,"t":{"200":{"position":[[0,3]]}}}],["2",{"_index":20,"t":{"77":{"position":[[0,2]]},"167":{"position":[[0,1]]},"202":{"position":[[0,1]]},"204":{"position":[[0,2]]},"206":{"position":[[0,2],[3,1]]},"233":{"position":[[0,2]]},"270":{"position":[[0,2]]}}}],["2、rediss",{"_index":16,"t":{"63":{"position":[[0,11]]}}}],["3",{"_index":22,"t":{"81":{"position":[[0,6]]},"169":{"position":[[0,1]]},"272":{"position":[[0,2]]}}}],["4",{"_index":35,"t":{"171":{"position":[[0,1]]}}}],["4.1",{"_index":36,"t":{"173":{"position":[[0,3]]}}}],["5",{"_index":37,"t":{"175":{"position":[[0,1]]}}}],["6",{"_index":38,"t":{"177":{"position":[[0,1]]}}}],["blog",{"_index":2,"t":{"6":{"position":[[4,4]]},"8":{"position":[[6,4]]},"19":{"position":[[5,4]]},"21":{"position":[[6,4]]}}}],["ca",{"_index":24,"t":{"85":{"position":[[0,17]]}}}],["classcastexcept",{"_index":13,"t":{"51":{"position":[[12,18]]}}}],["condit",{"_index":42,"t":{"191":{"position":[[14,10]]}}}],["configurationproperti",{"_index":23,"t":{"81":{"position":[[7,24]]}}}],["decod",{"_index":14,"t":{"53":{"position":[[17,7]]}}}],["disruptor",{"_index":7,"t":{"33":{"position":[[0,9]]},"149":{"position":[[0,9]]}}}],["dml",{"_index":51,"t":{"270":{"position":[[3,3]]}}}],["faq",{"_index":39,"t":{"177":{"position":[[4,9]]}}}],["first",{"_index":4,"t":{"8":{"position":[[0,5]]},"21":{"position":[[0,5]]}}}],["flux",{"_index":18,"t":{"65":{"position":[[12,26]]}}}],["flux.us",{"_index":19,"t":{"67":{"position":[[7,11]]}}}],["id",{"_index":40,"t":{"187":{"position":[[0,8]]}}}],["instanc",{"_index":58,"t":{"310":{"position":[[20,9]]}}}],["java",{"_index":49,"t":{"223":{"position":[[0,4]]}}}],["jdk",{"_index":28,"t":{"117":{"position":[[0,12]]}}}],["jsonanysett",{"_index":34,"t":{"169":{"position":[[10,14]]}}}],["kafka",{"_index":30,"t":{"121":{"position":[[0,11]]}}}],["linkedtreemap",{"_index":50,"t":{"261":{"position":[[7,13]]}}}],["long",{"_index":5,"t":{"19":{"position":[[0,4]]}}}],["lua",{"_index":48,"t":{"214":{"position":[[13,3]]}}}],["magic",{"_index":56,"t":{"308":{"position":[[16,6]]}}}],["mdx",{"_index":1,"t":{"6":{"position":[[0,3]]}}}],["mock",{"_index":52,"t":{"276":{"position":[[0,4]]},"280":{"position":[[0,6]]}}}],["modelkey",{"_index":45,"t":{"206":{"position":[[5,10]]}}}],["netti",{"_index":29,"t":{"119":{"position":[[0,11]]}}}],["next",{"_index":10,"t":{"45":{"position":[[0,4]]}}}],["plan",{"_index":12,"t":{"45":{"position":[[10,4]]}}}],["post",{"_index":3,"t":{"6":{"position":[[9,4]]},"8":{"position":[[11,4]]},"19":{"position":[[10,4]]},"21":{"position":[[11,4]]}}}],["postman",{"_index":53,"t":{"276":{"position":[[10,7]]},"282":{"position":[[0,9]]}}}],["rabbitmq",{"_index":32,"t":{"125":{"position":[[0,14]]},"127":{"position":[[0,12]]}}}],["race",{"_index":41,"t":{"191":{"position":[[8,5]]}}}],["recip",{"_index":55,"t":{"306":{"position":[[14,7]]}}}],["redi",{"_index":8,"t":{"35":{"position":[[0,5]]},"95":{"position":[[8,5]]},"129":{"position":[[0,11]]},"151":{"position":[[0,5]]},"214":{"position":[[5,5]]}}}],["redisson",{"_index":17,"t":{"65":{"position":[[0,11]]},"133":{"position":[[0,11]]}}}],["redis的zset",{"_index":33,"t":{"131":{"position":[[0,12]]}}}],["rocketmq",{"_index":31,"t":{"123":{"position":[[0,14]]}}}],["spi",{"_index":46,"t":{"210":{"position":[[0,3]]}}}],["spring",{"_index":26,"t":{"107":{"position":[[0,15],[21,6]]}}}],["statemachin",{"_index":27,"t":{"107":{"position":[[28,12]]}}}],["stream",{"_index":9,"t":{"35":{"position":[[6,6]]},"151":{"position":[[6,6]]}}}],["tl;dr",{"_index":21,"t":{"77":{"position":[[8,7]]}}}],["trigger",{"_index":54,"t":{"304":{"position":[[14,8]]}}}],["us",{"_index":57,"t":{"310":{"position":[[9,6]]}}}],["vs",{"_index":47,"t":{"210":{"position":[[6,2]]}}}],["week",{"_index":11,"t":{"45":{"position":[[5,4]]}}}],["welcom",{"_index":0,"t":{"4":{"position":[[0,7]]},"17":{"position":[[0,7]]}}}],["zset",{"_index":25,"t":{"95":{"position":[[14,4]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":5,"t":"2021年8月26日 · 阅读需 1 分钟 Sébastien Lorber Docusaurus maintainer Yangshun Tay Ex-Meta Staff Engineer, Co-founder GreatFrontEnd","s":"Welcome","u":"/obsidian/blog/authors/all-sebastien-lorber-articles","h":"","p":3},{"i":7,"t":"2021年8月1日 · 阅读需 1 分钟 Sébastien Lorber Docusaurus maintainer","s":"MDX Blog Post","u":"/obsidian/blog/authors/all-sebastien-lorber-articles","h":"","p":3},{"i":9,"t":"2019年5月28日 · 阅读需 1 分钟 Sébastien Lorber Docusaurus maintainer Yangshun Tay Ex-Meta Staff Engineer, Co-founder GreatFrontEnd","s":"First Blog Post","u":"/obsidian/blog/authors/all-sebastien-lorber-articles","h":"","p":3},{"i":11,"t":"Blog posts support Docusaurus Markdown features, such as MDX. 提示 Use the power of React to create interactive blog posts. For example, use JSX to create an interactive button: <button onClick={() => alert('button clicked!')}>Click me!</button> Click me!","s":"MDX Blog Post","u":"/obsidian/blog/mdx-blog-post","h":"","p":10},{"i":13,"t":"Lorem ipsum dolor sit amet... ...consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","s":"First Blog Post","u":"/obsidian/blog/first-blog-post","h":"","p":12},{"i":15,"t":"This is the summary of a very long blog post, Use a <!-- truncate --> comment to limit blog post size in the list view. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","s":"Long Blog Post","u":"/obsidian/blog/long-blog-post","h":"","p":14},{"i":18,"t":"2021年8月26日 · 阅读需 1 分钟 Sébastien Lorber Docusaurus maintainer Yangshun Tay Ex-Meta Staff Engineer, Co-founder GreatFrontEnd","s":"Welcome","u":"/obsidian/blog/authors/yangshun","h":"","p":16},{"i":20,"t":"2019年5月29日 · 阅读需 3 分钟 Yangshun Tay Ex-Meta Staff Engineer, Co-founder GreatFrontEnd","s":"Long Blog Post","u":"/obsidian/blog/authors/yangshun","h":"","p":16},{"i":22,"t":"2019年5月28日 · 阅读需 1 分钟 Sébastien Lorber Docusaurus maintainer Yangshun Tay Ex-Meta Staff Engineer, Co-founder GreatFrontEnd","s":"First Blog Post","u":"/obsidian/blog/authors/yangshun","h":"","p":16},{"i":24,"t":"Docusaurus blogging features are powered by the blog plugin. Here are a few tips you might find useful. Simply add Markdown files (or folders) to the blog directory. Regular blog authors can be added to authors.yml. The blog post date can be extracted from filenames, such as: 2019-05-30-welcome.md 2019-05-30-welcome/index.md A blog post folder can be convenient to co-locate blog post images: The blog supports tags as well! And if you don't want a blog: just delete this directory, and use blog: false in your Docusaurus config.","s":"Welcome","u":"/obsidian/blog/welcome","h":"","p":23},{"i":26,"t":"daily 2025-06-30","s":"2025-06-30","u":"/obsidian/docs/daily/2025-06-30","h":"","p":25},{"i":28,"t":"daily 2025-07-01","s":"异步资源导入架构设计说明","u":"/obsidian/docs/daily/2025-07-01","h":"","p":27},{"i":30,"t":"当我们创建标注任务之后，我们不可能让用户在一个线程下等待数据的加载。原因如下： 数据量巨大：单个标注任务可能涉及几万到几十万条资源数据 网络调用耗时：需要通过Feign调用外部数据集服务获取资源信息 用户体验极差：用户可能需要等待几分钟甚至更长时间 系统风险高：长时间占用HTTP连接，容易导致超时、连接池耗尽等问题","s":"问题背景","u":"/obsidian/docs/daily/2025-07-01","h":"#问题背景","p":27},{"i":32,"t":"所以我们引入了Disruptor在这里做异步信息的导入，Redis Stream 来做消息队列。","s":"技术方案","u":"/obsidian/docs/daily/2025-07-01","h":"#技术方案","p":27},{"i":34,"t":"Disruptor 作为高性能内存级事件处理框架，在我们的架构中承担以下职责： 任务拆分：将大批次资源导入任务（如10万条数据）快速拆分成多个小任务（如100个1000条的小批次） 内存队列：提供无锁、高吞吐的内存队列，避免传统队列的线程竞争 多线程消费：支持8个消费者线程并发处理，充分利用CPU资源 异步解耦：将HTTP请求线程与资源导入处理线程完全解耦","s":"Disruptor 的作用","u":"/obsidian/docs/daily/2025-07-01","h":"#disruptor-的作用","p":27},{"i":36,"t":"Redis Stream 作为持久化消息队列，在我们的架构中承担以下职责： 持久化队列：确保消息不丢失，即使系统重启也能继续处理 消费确认机制：支持ACK机制，确保每条消息都被正确处理 流控保护：控制对外部数据集服务的并发调用，避免过载 可观测性：可以通过Redis监控消息处理进度和堆积情况","s":"Redis Stream 的作用","u":"/obsidian/docs/daily/2025-07-01","h":"#redis-stream-的作用","p":27},{"i":38,"t":"用户创建任务 ↓立即返回任务ID (500ms内) ↓定时任务扫描 → Disruptor事件发布 ↓Disruptor消费者拆分任务 → Redis Stream消息 ↓Redis Stream消费者 → Feign调用外部服务 ↓数据写入本地数据库 ↓定时任务检查完成状态","s":"架构协作流程","u":"/obsidian/docs/daily/2025-07-01","h":"#架构协作流程","p":27},{"i":40,"t":"性能优异： Disruptor提供内存级处理速度 Redis Stream提供高并发消息处理能力 可靠性强： Disruptor确保内存事件不丢失 Redis Stream提供持久化保证 可扩展性好： 消费者数量可配置调节 支持水平扩展 监控友好： 可以监控Disruptor的RingBuffer状态 可以监控Redis Stream的消息堆积情况","s":"技术优势","u":"/obsidian/docs/daily/2025-07-01","h":"#技术优势","p":27},{"i":42,"t":"system: load-resource: batch-buffer-size: 1048576 # Disruptor缓冲区大小(2^20) batch-consumer-size: 8 # Disruptor消费者数量 batch-page-size: 1000 # 每批处理的资源数量 consumer-core-threads: 5 # Redis Stream消费者核心线程数 consumer-max-threads: 10 # Redis Stream消费者最大线程数 通过这种双层异步架构，我们实现了用户体验与系统性能的完美平衡，既保证了用户操作的即时响应，又确保了大批量数据处理的高效可靠。","s":"配置参数","u":"/obsidian/docs/daily/2025-07-01","h":"#配置参数","p":27},{"i":44,"t":"Iflytek 工作计划","s":"工作计划","u":"/obsidian/docs/Iflytek/工作计划","h":"","p":43},{"i":46,"t":"6.30 - 7. 1: 实现NewMarkToolController 和 剩余接口的测试 7.2: 完成数据库表的设计操作 7.3 - 7.4: 完成Ai模块的迁移","s":"Next week plan","u":"/obsidian/docs/Iflytek/工作计划","h":"#next-week-plan","p":43},{"i":48,"t":"@PostMapping(value = \"/events\", produces = MediaType.TEXT_EVENT_STREAM_VALUE)public Flux<String> events(@RequestBody AiModelReq aiModelReq) throws UnsupportedEncodingException, NoSuchAlgorithmException, URISyntaxException, InterruptedException {} AiModelReq 中的参数是前端在页面中填写的，但是现在AiModelReq 参数非常冗余这是不好的，所以我们要将其创建一个表，表中存在之前的前端信息。（这些信息在代码中被拼接成了prompt）与cueWord（选择对哪个数据来进行大模型处理） 然后我们使用jobId（暂定）来查询表，拿到表中的相关数据，如model 名字，信息之类的，然后让这个信息作为key（这个key是yml中用来映射模型相关信息的key）这样我们就可以拿到大模型的相关配置参数 然后使用工程模式 + 策略模式来动态的生成一个大模型的调用参数，来调用大模型","s":"任务具体执行过程","u":"/obsidian/docs/Iflytek/工作计划","h":"","p":43},{"i":50,"t":"Iflytek 技术方案 【最佳实践】Feign 泛型反序列化：告别 LinkedTreeMap 的终极解决方案","s":"【最佳实践】Feign 泛型反序列化：告别 LinkedTreeMap 的终极解决方案","u":"/obsidian/docs/Iflytek/技术方案/【最佳实践】Feign 泛型反序列化：告别 LinkedTreeMap 的终极解决方案","h":"","p":49},{"i":52,"t":"在使用 Spring Cloud OpenFeign 进行服务间调用时，我们经常会定义统一的响应体结构，例如： public class Result<T> { private int code; private String message; private T data; // ... getters and setters} 当我们期望 Feign 客户端返回一个复杂的泛型类型时，比如 Result<List<UserDTO>>，在运行时，框架默认的 JSON 解析器（如 Gson 或未正确配置的 Jackson）会因为类型擦除而丢失 T 的具体类型信息。 这导致 data 字段被错误地反序列化为一个 LinkedTreeMap，而不是我们期望的 List<UserDTO>。当你的业务代码尝试将其强制转换为目标类型时，就会抛出经典的 ClassCastException，导致程序崩溃。","s":"一、 问题背景：恼人的 ClassCastException","u":"/obsidian/docs/Iflytek/技术方案/【最佳实践】Feign 泛型反序列化：告别 LinkedTreeMap 的终极解决方案","h":"#一-问题背景恼人的-classcastexception","p":49},{"i":54,"t":"要从根本上解决此问题，我们不能在业务代码中进行手动的 Map 到 Object 的转换，那样会产生大量冗余且易错的代码(当然我们也不能把转换的类型写死)。最佳方案是替换 Feign 默认的 Decoder，利用 Jackson 的 TypeFactory 在反序列化阶段就将 JSON 精确地转换为我们需要的 Java 对象。","s":"二、 核心思路：釜底抽薪，自定义 Decoder","u":"/obsidian/docs/Iflytek/技术方案/【最佳实践】Feign 泛型反序列化：告别 LinkedTreeMap 的终极解决方案","h":"#二-核心思路釜底抽薪自定义-decoder","p":49},{"i":56,"t":"为了从根本上解决此问题，我们采用的策略是 在反序列化阶段注入精确的类型信息。这通过实现 Feign 提供的 feign.codec.Decoder 接口，创建一个自定义解码器来完成。该解码器将替代 Feign 的默认解码逻辑，利用 Jackson 强大的类型处理能力来确保反序列化的准确性。 四、实施详解​ 该方案主要通过以下三个步骤实现： 1. 创建自定义解码器 ResultDecoder 这是解决方案的核心。ResultDecoder 拦截了原始的 Feign Response 对象，并在反序列化前执行了关键的类型构建操作。 获取运行时类型 (Type): Feign 的 decode 方法会传入一个 java.lang.reflect.Type 参数，该参数代表了我们期望返回的最终类型（例如 List<UserDTO>）。 构建精确的 JavaType: 我们利用 Jackson 的 TypeFactory，将 Feign 提供的 Type 转换为 Jackson 内部使用的 JavaType。这是至关重要的一步，因为 JavaType 是一个能够完整描述泛型结构的对象。 构造参数化外层类型: 接着，我们再次使用 TypeFactory.constructParametricType() 方法，将上一步得到的内部泛型类型（genericType）与我们的外层响应类（Result.class）结合，构造出一个完整的、带有精确泛型信息的 JavaType，例如 Result<List<UserDTO>>。 执行精确反序列化: 最后，我们将这个构造好的 resultType 传递给 ObjectMapper.readValue() 方法。ObjectMapper 会依据此类型信息，将 JSON 响应精确地反序列化为对应的 Java 对象图，从而完全避免了 LinkedTreeMap 的产生。 2. 注册 ResultDecoder 到 Feign 配置中 我们通过一个标准的 Spring @Configuration 类（FeignConfiguration），将 ResultDecoder 的实例声明为一个 @Bean。这使得该解码器可以被 Spring 容器管理，并注入到 Feign 的客户端配置中。 3. 在 @FeignClient 上应用配置 在需要进行精确反序列化的 Feign 客户端接口上，通过 @FeignClient 注解的 configuration 属性，明确指定使用我们创建的 FeignConfiguration.class。 @FeignClient(name = \"user-service\", configuration = FeignConfiguration.class)public interface UserApiClient { // ...} 此操作指示 Feign 在为 UserApiClient 创建代理实例时，使用我们配置中定义的 Decoder，而不是默认的解码器。","s":"三、解决方案架构","u":"/obsidian/docs/Iflytek/技术方案/【最佳实践】Feign 泛型反序列化：告别 LinkedTreeMap 的终极解决方案","h":"#三解决方案架构","p":49},{"i":58,"t":"Iflytek 技术方案 Java通过WebSocket 与AI进行通信","s":"Java通过WebSocket 与AI进行通信","u":"/obsidian/docs/Iflytek/技术方案/Java通过WebSocket 与AI进行通信","h":"","p":57},{"i":60,"t":"Iflytek 技术方案 Ai大模型调用时候Redission实现的令牌桶限流","s":"Ai大模型调用时候Redission实现的令牌桶限流","u":"/obsidian/docs/Iflytek/技术方案/Ai大模型调用时候Redission实现的令牌桶限流","h":"","p":59},{"i":62,"t":"我们要接入多个模型，就要实现多个配置类，老项目中面对多种模型的选择时候使用的竟然是（\"中海油-海能大模型\".equals(aiModelReq.getProjectAiModelConfigRequest().getModelName()),“大哥，你就拿名字和if-else 来做匹配啊，这真是想到什么写什么啊”)，因为每个模型的名字不一样，所以面对多个模型很自然的想到策略-工厂模式,不同的AI模型实现被封装在各自的策略类（AiModelStragety）中，Service层代码不需要关心具体模型的调用细节。这使得系统扩展性极强，增加新模型对现有代码无影响。","s":"1、策略工厂替换原来的名称匹配","u":"/obsidian/docs/Iflytek/技术方案/Ai大模型调用时候Redission实现的令牌桶限流","h":"#1策略工厂替换原来的名称匹配","p":59},{"i":64,"t":"目前的服务肯定是在微服务的多机器上的，你肯定不能用基于JVM的令牌桶来做。目前项目中能满足的就是Redis了，所以我们用Redis 来做令牌桶。(这个问题其实就是有人会问你为什么不自己手写一个令牌桶算法，我在下面放个表格对比下就知道了。) 特性 Redisson RSemaphore / RRateLimiter (令牌桶) 自己手写一个限流器 (如 Java 的 Semaphore) 场景 分布式系统（多台服务器） 单机环境（只有一台服务器） 工作原理 所有实例共享 Redis 中的计数器，全局可见 每个实例各自维护内存中的计数器，彼此不知 一致性 强一致性，全局统一限流 无一致性，需要人为拆分额度，无法精准控制 可靠性 高：Redisson 使用 Lua 脚本保证原子性，稳定可靠 低：自己实现需要处理复杂分布式问题，容易出错 实现复杂度 极低：封装完善，一行代码搞定 极高：需设计数据结构、编写 Lua 脚本等 维护成本 低：由 Redisson 官方持续维护 高：自己写的逻辑需自己长期维护 起初我采用的是滑动窗口限流策略，设定例如“1 分钟内最多允许 10 个请求”这样的阈值。但在实际运行中，我发现它并不适合我们当前的业务需求，尤其是在大模型调用这种请求耗时和资源消耗高度不均的场景下，暴露出明显问题： 不能体现任务的资源消耗差异 大模型的调用耗时和资源占用与任务本身紧密相关。例如，让模型生成一篇 1 万字的小说和回答一个 “1 + 1 = ?” 所需的计算量完全不同。滑动窗口只是简单统计单位时间内的请求次数，无法感知请求的复杂度和对系统资源的实际占用。结果就是：轻量任务也会消耗掉限流额度，重任务可能被积压，从而导致系统资源利用率低甚至出现等待但资源空闲的情况。 存在“突刺流量”风险，影响系统稳定性 滑动窗口的另一个问题在于边界切换时的突刺效应。比如我们设置“1 分钟最多处理 5 个请求”： 第 59 秒之前没有任何请求； 第 60 秒瞬间来了 5 个请求，被全部放行； 第 61 秒窗口滑动，又来了 5 个请求，同样被放行； 结果是：在 2 秒内处理了 10 个请求，限流规则形同虚设，系统仍可能遭遇过载甚至被击穿。 综上所述，滑动窗口限流在大模型任务调度场景下显得不够灵活，既无法感知真实负载，也容易因为流量突刺造成风险。因此，我倾向于改用更适合此类场景的限流策略，比如令牌桶算法，它能更好地平滑请求速率，并允许一定程度的突发流量，同时也更易于与任务队列、动态信号量等资源感知型机制结合，实现更细粒度的调度控制。 我放弃了滑动窗口改使用信号量方案来实现令牌桶。 // 获取分布式信号量RSemaphore semaphore = redissonClient.getSemaphore(limiterKey); Redis数据结构：使用Redis的String类型存储信号量的许可数量 原子操作：基于Redis的DECR和INCR命令实现原子性的获取和释放 分布式一致性：通过Redis的原子操作保证多实例间的数据一致性 底层的实现可以分为初始化许可、获取许可、释放许可三步，三步是基于lua脚本操作的 想象一下，Redis 就是一个所有服务实例（你的应用部署在多个服务器上）都能访问的中央数据中心。Redisson 的所有操作，本质上都是在操作这个数据中心里的数据。 1. 初始化许可 (trySetPermits)​ 当你第一次为某个模型（比如 gpt-4）设置限流时，会调用 semaphore.trySetPermits(5)。 开发者意图：我想创建一个名为 ai:limiter:gpt-4 的信号量，并把它的总许可数（车位总数）设置为 5。这个操作只能成功一次。 Redisson 底层操作：它不会傻傻地直接 SET 一个值。为了防止多个服务实例同时初始化导致冲突（竞态条件），它会向 Redis 发送一个类似 SETNX (SET if Not eXists) 的命令。 SETNX \"ai:limiter:gpt-4\" 5 这个 Redis 命令是原子性的。它表示：“只有当 ai:limiter:gpt-4 这个键不存在的时候，才将它设置为5”。 第一个到达的实例执行 SETNX，成功设置了值，Redis 返回 1。 后面紧跟着到达的其他实例再执行 SETNX，发现键已经存在了，操作失败，Redis 返回 0 这样就完美保证了，无论多少个服务实例同时启动，这个信号量的总数只会被正确地初始化一次。 2、获取许可​ 这是最关键的一步，也是最能体现 Lua 脚本威力的地方。 开发者意图：我想从 ai:limiter:gpt-4 这个信号量里申请一个许可。如果当前许可数大于0，就给我一个，并把总数减一；如果等于0，就直接告诉我失败。整个过程必须是一步完成的，不能被打断。 为什么不能用多个 Redis 命令？ 如果你先用 GET 命令获取当前值，在你的应用代码里判断 if (value > 0)，然后再用 DECR 命令去减一。这个过程是非原子的。 在高并发下，可能发生这种情况： 服务A GET 到值为 1。 服务B 也在同时 GET 到值为 1。 服务A 判断 1 > 0 成立，执行 DECR，值变为 0。 服务B 也判断 1 > 0 成立，执行 DECR，值变为 -1。 结果，明明只有一个许可，却有两个服务同时获取成功，限流被“击穿”了。 Redisson 的 Lua 脚本解决方案： Redisson 会将“检查并减少”这个逻辑，编写成一个 Lua 脚本，然后通过 EVAL 命令一次性发给 Redis 去执行。Redis 会保证整个脚本的执行过程是原子的，不会被任何其他命令插入。 这个 Lua 脚本的逻辑可以简化成这样： -- 脚本的参数：KEYS[1] 是信号量的键名, ARGV[1] 是想获取的许可数(通常是1)local key = KEYS[1]local permitsToAcquire = tonumber(ARGV[1])-- 从 Redis 中获取当前许可数local availablePermits = tonumber(redis.call('get', key))-- 如果还有足够的许可if availablePermits and availablePermits >= permitsToAcquire then -- 减少许可数 redis.call('decrby', key, permitsToAcquire) -- 返回1代表成功 return 1else -- 许可数不够，返回0代表失败 return 0end 3、释放许可​ 释放许可相对简单。 开发者意图：我用完了一个许可，现在要把它还给 ai:limiter:gpt-4。 Redisson 底层操作：同样是通过 Lua 脚本（或者一个简单的 INCR 命令）来完成。 INCR \"ai:limiter:gpt-4\" INCR 命令也是原子的，它会安全地将键的值加一。所以，释放操作同样不会有并发问题。","s":"2、Redission 实现令牌桶限流","u":"/obsidian/docs/Iflytek/技术方案/Ai大模型调用时候Redission实现的令牌桶限流","h":"#2redission-实现令牌桶限流","p":59},{"i":66,"t":"代码的核心是 Flux.using()，你可以把它理解成是 Java 传统 try-with-resources 语句的响应式、异步版本。它的设计哲学是“借资源 -> 用资源 -> 还资源”，并确保“还资源”这一步无论如何都会被执行，从而防止资源泄漏。 1、借资源​ () -> { boolean acquired = checkRateLimit(modelKey, aiModelStragety); if (!acquired) { throw new BusinessException(REQUEST_TIMEOUT); } log.debug(\"限流令牌已获取...\"); return modelKey;} 作用：这是整个流程的入口。当有订阅者（subscriber）订阅这个 Flux 时，这个函数会被首先调用。 具体行为： 它调用 checkRateLimit() 去 Redisson 申请一个信号量许可（令牌）。 申请成功：如果 acquired 为 true，它会记录一条日志，并返回 modelKey 作为“已成功获取的资源”的凭证。这个凭证会被传递给后续的两个函数。 申请失败：如果 acquired 为 false（被限流了），它会立即抛出一个 BusinessException 异常。这个异常会使整个 Flux 流直接进入 error 状态，后续的“用资源”（callModel）和“还资源”逻辑都不会执行，流程提前终止。 2、用资源​ acquiredResource -> aiModelStragety.callModel(aiMessageDTO, fullPrompt) 作用：只有在“借资源”成功后，这个函数才会被调用。它负责创建真正的业务数据流。 具体行为： 它接收上一步返回的资源凭证（令牌） acquiredResource（在这里就是modelKey）。 然后调用 aiModelStragety.callModel()，这个方法会返回一个 Flux<String>，也就是从 AI 模型那里流式返回的数据。这部分是整个业务逻辑的核心。 还资源​ releasedResource -> { String limiterKey = String.format(AI_MODEL_LIMITER_KEY_SUFFIX, releasedResource); RSemaphore semaphore = redissonClient.getSemaphore(limiterKey); if (semaphore.isExists()) { semaphore.release(1); log.debug(\"限流器已释放: key={}\", limiterKey); } else { log.warn(\"限流器不存在，无法释放: key={}\", limiterKey); 作用：这是 Flux.using 最重要的保障机制。这个函数会在第二步创建的流终止时被调用。 触发时机：无论流是正常结束、发生错误还是被取消，它必定会执行。 正常完成 (onComplete)：AI 模型成功返回了所有数据。 发生错误 (onError)：在调用 callModel 的过程中发生了任何异常。 被取消 (onCancel)：下游的调用者取消了数据订阅。 具体行为：它接收到凭证，然后调用 semaphore.release(1)，将之前申请的那个许可归还给 Redisson 的信号量池。这就确保了限流的许可能够被可靠地回收，不会发生“只借不还”的资源泄漏问题。 .doOnError​ doOnError(throwable -> { // 只有当 callModel 内部发生错误时才会记录，限流错误在 using 内部处理 if (!(throwable instanceof BusinessException && ((BusinessException) throwable).getErrorCode().equals(REQUEST_TIMEOUT))) { log.error(\"AI模型调用失败: modelKey={}, error={}\", modelKey, throwable.getMessage()); } }); 这是一个“副作用”操作符，它允许你在不改变流的情况下，对流中的错误信号进行一些处理。 作用：它在这里的作用是记录日志。 精妙之处：它加了一个判断 if (!(throwable instanceof BusinessException && ...))，意思是只记录那些不是因为限流（REQUEST_TIMEOUT）而发生的未知错误。因为限流是一个预期的、正常的业务逻辑，已经在第一步中记录过了，没必要再当作一个意外错误来重复记录，这样可以保持日志的整洁和有效性。","s":"上面是Redisson 进行令牌桶的操作的部分，现在我要记录Flux的使用。","u":"/obsidian/docs/Iflytek/技术方案/Ai大模型调用时候Redission实现的令牌桶限流","h":"#上面是redisson-进行令牌桶的操作的部分现在我要记录flux的使用","p":59},{"i":68,"t":"AI模型调用是异步流式的，即 callModel(...) 方法返回的是 Flux<String>。这是一个关键点。 Flux 代表的是一个“未来的数据序列”，调用 callModel 方法会立即返回，而数据（AI的回答）会在之后的某个时间点，以数据流的形式陆续到达。 如果不用 Flux.using（比如尝试手动管理许可）： 你会遇到一个棘手的问题：应该在什么时候调用 semaphore.release() 来释放许可？ 错误做法1：在 callModel 调用后立即释放。 // 绝对错误！semaphore.acquire();Flux<String> resultStream = aiModelStragety.callModel(...);semaphore.release(); // 大BUG！此时AI调用刚开始，许可就被释放了！return resultStream; 这会导致许可被瞬间释放，下一个请求马上就能获得许可，并发控制形同虚设。 错误做法2：尝试使用回调。 semaphore.acquire();return aiModelStragety.callModel(...) .doOnTerminate(() -> { // 当流终止时（完成或错误） semaphore.release(); }) .doOnCancel(() -> { // 当流被取消时 semaphore.release(); }); 这种方式虽然可行，但非常笨拙。你需要手动处理所有可能的终止情况（onComplete, onError, onCancel），代码可读性差，容易遗漏，这就是所谓的“回调地狱”，不是一种健壮的设计。 Flux.using 的作用： 它就是为了解决这个**“异步资源生命周期管理”**问题而生的。 它将**“获取资源”（acquire）、“使用资源创建流”（callModel）、“释放资源”**（release）这三个步骤优雅地绑定在了一起。 它向你保证：无论中间的异步流是正常完成、发生错误、还是被中途取消，那个“释放资源”的逻辑都一定会被执行。 所以，Flux.using 回答了这个问题：对于一个异步数据流，我如何能100%确保我之前获取的资源，在流程结束后一定被释放？","s":"为什么必须用 Flux.using？","u":"/obsidian/docs/Iflytek/技术方案/Ai大模型调用时候Redission实现的令牌桶限流","h":"#为什么必须用-fluxusing","p":59},{"i":70,"t":"Flux 的底层是什么？​ Flux 是 Project Reactor 库中的核心类之一，而 Project Reactor 是实现响应式编程规范（Reactive Streams Specification） 的一个主流框架。 Flux 的底层核心思想可以概括为以下几点： 1、响应式编程是基于经典的发布者-订阅者设计模式的。​ Flux (或 Mono) 是发布者 (Publisher)：它代表一个包含 0 到 N 个元素的异步数据序列。你可以把它想象成一个“数据管道”，它只用来传输经过他的数据（这些数据可以来自数据库，定时任务的生产，取决于你怎么生产这些数据），本身不产生数据。 我们的代码中是发布者呢？ 发布者就是你通过 Flux.using(...)精心构建并从 invokeAiModel 方法返回的那个 Flux<String> 对象。 它不仅仅是一个简单的数据源，而是一个复合的、智能的数据管道。这个管道的蓝图（定义）包含了： 前置操作逻辑：在数据开始流动前，必须先从 Redisson 获取一个限流许可。 核心数据源：真正的数据来自于 aiModelStragety.callModel(...) 返回的另一个 Flux。 后置清理逻辑：无论数据流是正常结束、出错还是被取消，都必须归还 Redisson 的许可。 所以，这个由 Flux.using(...) 创造的 Flux<String> 就是一个功能完备的发布者。它已经准备好，一旦有人订阅，它就知道该如何一步步地执行上述所有操作。 **调用 .subscribe(...) 的是你写的逻辑，它代表你定义的订阅者（Subscriber）角色，负责对数据流进行消费。**在响应式编程模型中，subscribe() 是触发整个数据流的关键操作。只有在订阅发生时，Flux 或 Mono 才会开始执行你预先定义的数据生成、转换与传递逻辑（即“惰性求值”特性）。这个订阅者可以是你自己实现的回调函数，也可以是框架中预定义的消费者，例如用于响应式 Web 请求、数据库响应等场景。 “没有订阅，就没有事件”：这是响应式编程的黄金法则。你定义了一长串的 Flux 操作（如 map, filter, using），但只要没有最终的 .subscribe() 调用，整个数据流就不会启动。 谁是订阅者 (Subscriber)？ 可能会疑惑，在invokeAiModel 方法里，并没有看到任何 .subscribe() 的调用。这是因为在现代响应式框架（比如正在使用的 Spring WebFlux）中，最终的订阅操作通常是由框架本身来完成的。 我把调用的接口放在这里： @GetMapping(value = \"invoke\", produces = MediaType.TEXT_PLAIN_VALUE) public ResponseEntity<Flux<String>> invokeAiModel(@RequestParam Long jobId, @RequestParam String prompt) { Flux<String> result = aiModelService.invokeAiModel(jobId, prompt); return ResponseEntity.ok() .contentType(MediaType.TEXT_PLAIN) .body(result); } 订阅的“魔法”就发生在这里： 一个外部客户端（比如网页）向 /ai/stream-invoke 发起了一个 HTTP 请求。 Spring WebFlux 框架接收到请求，并调用你的 streamInvoke 控制器方法。 你的方法返回了一个 Flux<String> 对象（那个发布者）。 关键时刻：Spring WebFlux 框架接管了这个返回的 Flux。它看到返回值是一个响应式类型，于是框架自己扮演了订阅者的角色，并在内部对你的 Flux 调用了 .subscribe()。 这个由 Spring WebFlux 框架创建的订阅者，它的任务是专门处理 HTTP 响应。它的逻辑大致如下： 当接收到 onNext(String data) 信号时（即AI模型传来一小块数据）：它会将这块数据写入到 HTTP 的响应体中，实时地发送给客户端。这就是流式响应（Server-Sent Events）的实现方式。 当接收到 onError(Throwable error) 信号时（比如你的限流异常或者模型调用失败）：它会将这个异常转换成一个合适的 HTTP 错误状态码（比如 429 Too Many Requests 或 500 Internal Server Error）并返回给客户端。 当接收到 onComplete() 信号时（AI数据流正常结束）：它会正常地关闭 HTTP 响应连接。 2 基于“推”的异步模型 (Push-based Asynchronous Model)​ 传统模型（Pull 拉模式）：像 Iterator 或 List，是消费者主动去拉取数据 (iterator.next())，如果数据还没准备好，线程就会阻塞等待。 响应式模型（Push 推模式）：是生产者（Publisher）在数据准备好后，主动推送给消费者（Subscriber）。整个过程是异步非阻塞的，线程不需要空闲等待，可以去处理其他任务，大大提高了系统资源的利用率。 3. 事件信号 (Event Signals)​ Flux 数据流中传递的不仅仅是数据，而是一系列标准化的事件信号： onNext(T data): 推送一个正常的数据项。 onComplete(): 通知订阅者数据流已成功结束，不会再有 onNext 事件。 onError(Throwable error): 通知订阅者流中发生了错误，数据流异常终止。 Flux.using 的三个函数，本质上就是在响应这三种信号（onNext 由 callModel 的 Flux 产生，onComplete/onError 会触发资源清理）。 4. 背压 (Backpressure)​ 这是响应式流最关键、最复杂的概念之一。它解决了“快生产者 vs 慢消费者”的问题。 问题：如果数据生产者（如一个快速的数据库）推送数据的速度远远快于消费者处理的速度，会导致消费者内存溢出而崩溃。 解决方案：订阅者在订阅时，会通过一个 Subscription 对象告诉发布者：“我准备好了，请先给我 N 个元素”（subscription.request(N)）。发布者只会推送 N 个元素，然后等待订阅者下一次的 request 请求。这给予了消费者反向控制流量的能力，防止自己被冲垮。 Semaphore 信号量在Java中的作用:​ 在Java中，Semaphore（信号量）是 java.util.concurrent 并发包提供的一个非常重要的工具类。它的核心作用是控制对特定资源或代码块的同时访问的线程数量。 主要方法和特性总结​ 构造函数： Semaphore(int permits)：创建一个具有指定许可数量的信号量。 Semaphore(int permits, boolean fair)：可以指定是否为“公平模式”。公平模式下，等待的线程会按照 FIFO（先进先出）的顺序获得许可。非公平模式则允许“插队”，性能通常更高。 核心方法： void acquire(): 获取一个许可，如果没有可用许可，则阻塞等待。 void release(): 释放一个许可，使其返回信号量。 boolean tryAcquire(): 非阻塞地尝试获取一个许可。如果成功，返回 true；如果失败（没有可用许可），立即返回 false，线程不会等待。 int availablePermits(): 返回当前可用的许可数量。 关键特性： 作用范围：单个 JVM。Java 的 Semaphore 只能控制同一个Java进程内部的线程。它无法像 Redisson 的 RSemaphore 那样跨越多个服务器进行分布式协调。 **用途：它主要有两种工作模式： 作为互斥锁 (new Semaphore(1))：当许可数设置为1时，信号量的作用等同于一个锁，可以确保代码块在任何时刻最多只有一个线程执行，从而保护共享数据，保证线程安全。 作为流量控制器 (new Semaphore(N))：当许可数设置为N（N > 1）时，它允许多达N个线程并发访问。这通常不用于保护共享变量，而是用于管理有限的资源池，如数据库连接、或限制对某个API的并发调用次数。","s":"补充知识：","u":"/obsidian/docs/Iflytek/技术方案/Ai大模型调用时候Redission实现的令牌桶限流","h":"#补充知识","p":59},{"i":72,"t":"Iflytek 技术方案 Result 包装响应体","s":"Result 包装响应体","u":"/obsidian/docs/Iflytek/技术方案/Result 包装响应体","h":"","p":71},{"i":74,"t":"Iflytek 技术方案 Spring Boot 中多环境异构配置的优雅实现","s":"Spring Boot 中多环境异构配置的优雅实现","u":"/obsidian/docs/Iflytek/技术方案/Spring Boot 中多环境异构配置的优雅实现","h":"","p":73},{"i":76,"t":"在现代微服务架构中，通常需要部署多个环境（开发，测试，生产）。这些环境可能因为基础设施的问题，客户需求或者安全策略的问题，导致配置的方案是不同的。 对于iflytek的大模型部署：我们的应用集成了多种AI大模型，但在不同的私有化部署环境（例如“梧桐环境”和“移动云环境”）中，只支持或启用其中一种。 梧桐环境: 只支持并配置了星火（Spark）模型。 移动云环境: 只支持并配置了DeepSeek模型。 这就引出了一个核心的技术问题：如何在同一套代码中，优雅地管理这些异构配置，并确保应用在只提供部分配置的环境下能够正常启动，不会因配置缺失而失败？","s":"1、问题背景","u":"/obsidian/docs/Iflytek/技术方案/Spring Boot 中多环境异构配置的优雅实现","h":"#1问题背景","p":73},{"i":78,"t":"先说结论： 使用 @Value: 不推荐。应用在默认情况下会因找不到配置项而启动失败。虽然可以通过设置默认值来规避，但这增加了代码的复杂性和出错风险。 使用 @ConfigurationProperties: 强烈推荐。应用不会启动失败。这是处理结构化、可选配置块的最佳实践。 在重构前的项目中，开发人员大量使用了@Value注解来做属性值的注入。这对于写代码的来说，他可以想到什么就直接在当前开发的文档中进行注入。但是对于后人来看代码的话简直就是灾难，你完全不知道属性在哪个文件被注入了，有没有设置默认值。","s":"2. 核心结论 (TL;DR)","u":"/obsidian/docs/Iflytek/技术方案/Spring Boot 中多环境异构配置的优雅实现","h":"#2-核心结论-tldr","p":73},{"i":80,"t":"@Value 注解用于注入单个配置项，它的行为默认是严格的。当使用@Value(\"${property.key}\")时，如果Spring环境中无法解析property.key这个占位符（即找不到对应的配置），应用会立即抛出IllegalArgumentException，导致启动失败。 @Configurationpublic class LlmValueConfig { // 在移动云环境下，由于 llm.spark.api-key 不存在，此行会抛出异常 @Value(\"${llm.spark.api-key}\") private String sparkApiKey; @Value(\"${llm.deepseek.api-key}\") private String deepseekApiKey;} 为了避免错误，你必须为这些提供默认值： @Configurationpublic class LlmValueConfig { // 推荐使用 `#{null}` 作为默认值，可以清晰地表达“未配置”的状态 @Value(\"${llm.spark.api-key:#{null}}\") private String sparkApiKey; // 也可以使用空字符串作为默认值，但可能导致业务逻辑判断混乱 // @Value(\"${llm.spark.api-secret:}\") // private String sparkApiSecret; @Value(\"${llm.deepseek.api-key}\") private String deepseekApiKey;} 要了命了，管理维护起来太复杂了。","s":"而且：","u":"/obsidian/docs/Iflytek/技术方案/Spring Boot 中多环境异构配置的优雅实现","h":"#而且","p":73},{"i":82,"t":"应用不会启动失败。这是处理结构化、可选配置块的最佳实践。 @ConfigurationProperties 注解用于将配置文件中结构化的属性，整体绑定到一个POJO（Plain Old Java Object）对象上。它的核心优势在于绑定过程的容错性。 3.1.1. 工作机制​ 当Spring Boot尝试将prefix指定的配置块绑定到Java对象时，如果配置文件中缺少某个属性或一整个内嵌的配置块，它不会抛出异常。相应地，POJO对象中对应的字段会保持其Java默认值（对象类型为 null，基本类型为 0 或 false）。 3.1.2. 代码实现​ 1. 配置文件 (application.yml) 在移动云环境下，我们只提供deepseek的配置。 # application-mobilecloud.ymlllm: # 注意：此处完全没有 spark 相关的配置块 deepseek: api-key: \"sk-deepseek-yyyyyyyyyyyy\" model-name: \"deepseek-coder\" 2. 配置属性类 (LlmProperties.java) 创建一个类来承载所有可能的模型配置。 import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;import lombok.Data; // 使用 Lombok 简化代码@Data@Component@ConfigurationProperties(prefix = \"llm\")public class LlmProperties { /** * 星火模型配置。如果配置文件中不存在 llm.spark 块，此对象将为 null。 */ private SparkProperties spark; /** * DeepSeek 模型配置。如果配置文件中不存在 llm.deepseek 块，此对象将为 null。 */ private DeepSeekProperties deepseek; @Data public static class SparkProperties { private String apiKey; private String apiSecret; private String appId; } @Data public static class DeepSeekProperties { private String apiKey; private String modelName; }} 3. 业务逻辑层 (LlmService.java) 在业务代码中，通过检查配置对象是否为null，来动态地、安全地初始化相应的服务。 @Servicepublic class LlmService { private final LlmProperties llmProperties; // 可能还有 SparkClient 和 DeepSeekClient 的实例 @Autowired public LlmService(LlmProperties llmProperties) { this.llmProperties = llmProperties; initializeClients(); } private void initializeClients() { // 安全地检查Spark配置是否存在 if (llmProperties.getSpark() != null && llmProperties.getSpark().getApiKey() != null) { System.out.println(\"检测到星火配置，正在初始化Spark客户端...\"); // new SparkClient(llmProperties.getSpark()); } // 安全地检查DeepSeek配置是否存在 if (llmProperties.getDeepseek() != null && llmProperties.getDeepseek().getApiKey() != null) { System.out.println(\"检测到DeepSeek配置，正在初始化DeepSeek客户端...\"); // new DeepSeekClient(llmProperties.getDeepseek()); } }}","s":"3、推荐使用 @ConfigurationProperties","u":"/obsidian/docs/Iflytek/技术方案/Spring Boot 中多环境异构配置的优雅实现","h":"#3推荐使用-configurationproperties","p":73},{"i":84,"t":"Iflytek 技术方案 todo CAS 单点登录结合Spring-Boot-Starter","s":"todo CAS 单点登录结合Spring-Boot-Starter","u":"/obsidian/docs/Iflytek/技术方案/todo CAS 单点登录结合Spring-Boot-Starter","h":"","p":83},{"i":86,"t":"UAP系统，为其他项目提供了一个通用便利的启动器它的核心目标是提供两大功能： 集成CAS统一认证体系：它封装了与CAS（中央认证服务）服务器对接的复杂逻辑。任何其他项目只要引入这个starter，就能快速地接入公司的统一登录系统，而不需要自己手动配置大量的CAS客户端代码。 自动接入微服务API：它还集成了common-apis这个SDK，能自动配置好OpenFeign客户端。这样一来，主项目就可以像调用本地方法一样，轻松地调用公司内部其他微服务提供的API接口，大大简化了服务间的通信。","s":"首先我们要了解下什么是CAS系统？","u":"/obsidian/docs/Iflytek/技术方案/todo CAS 单点登录结合Spring-Boot-Starter","h":"#首先我们要了解下什么是cas系统","p":83},{"i":88,"t":"Iflytek 技术方案 Zset做的延迟队列","s":"Zset做的延迟队列","u":"/obsidian/docs/Iflytek/技术方案/Zset做的延迟队列","h":"","p":87},{"i":90,"t":"在我们的数据标注平台中，有一个核心的资源管理机制： 唯一持有：一名标注员在任意时刻，最多只能领取（持有）一条待标注的资源。 超时释放：如果标注员在规定的时间内没有完成标注，系统会自动将该资源收回，放回公共资源池，以便其他标注员可以领取。 可变时长：每个标注任务可以独立设置其“规定完成时长”，这意味着资源的锁定时间是动态可变的。","s":"核心业务场景","u":"/obsidian/docs/Iflytek/技术方案/Zset做的延迟队列","h":"#核心业务场景","p":87},{"i":92,"t":"这个“超时自动释放”的机制，本质上是一个典型的延时任务。我们需要一个系统，能在资源被领取后，开始一个倒计时，并在倒计时结束后自动执行“释放资源”的操作。 这个系统必须满足以下要求： 持久化：即时服务重启或宕机，延时任务也不能丢失。否则，大量资源将被永久锁定，无法被释放。 支持可变延时：由于每个任务的超时时间不同，系统必须能处理任意时长的延时，而不是固定的几种。 性能与成本可控：理论上，所有被领取的资源都会进入这个延时系统，数据量可能很大。方案不能过于复杂或消耗过多资源。 时效性要求不高：标注操作通常是分钟级别。因此，延时任务的执行精度允许有秒级甚至分钟级的误差，不需要像交易系统那样追求毫秒级的精确。","s":"技术挑战：实现动态延时的自动释放","u":"/obsidian/docs/Iflytek/技术方案/Zset做的延迟队列","h":"#技术挑战实现动态延时的自动释放","p":87},{"i":94,"t":"根据以上需求，我们来评估几种常见的延时队列实现方案： 内存队列 (In-Memory Queue) 优点：实现简单，性能极高。 缺点：致命缺陷。一旦服务重启，内存中的所有延时信息都会丢失，导致资源无法被自动释放。因此，直接排除。 传统消息队列 (RabbitMQ/Kafka) 实现方式：通常利用其“死信队列 (DLX)”或类似机制来模拟延时。 优点：专业、可靠、高吞吐。 缺点：不灵活。这类方案的延时时间通常是绑定在队列或消息的TTL（Time-To-Live）上的。如果要实现可变的延时时间，就需要为每一种时长创建一个独立的队列，这在我们的场景下（时长可任意配置）是完全不可行的。 数据库轮询 (如 Quartz) 实现方式：将任务的到期时间存储在数据库表中，通过一个定时调度任务（如Quartz）去不断扫描表中“即将到期”的任务来执行。 优点：持久化、可靠。 缺点：冗余且低效。为了一个延时功能，需要将资源信息在数据库中再存储一遍（或至少是关联信息），并且要频繁地对数据库进行轮询扫描。当数据量巨大时，这种扫描会对数据库造成显著压力，不够优雅。","s":"技术选型分析","u":"/obsidian/docs/Iflytek/技术方案/Zset做的延迟队列","h":"#技术选型分析","p":87},{"i":96,"t":"综合考虑，使用 Redis 的有序集合（Sorted Set，简称 ZSet）是当前业务场景下最理想的解决方案。 实现原理如下： 数据结构：我们利用 ZSet 的核心特性——每个成员（member）都有一个分数（score）。 Key: 可以为每个标注任务设置一个独立的 ZSet，例如 delay_queue:{task_id}，或者使用一个统一的 Key delay_queue:annotation_release。 Score: 用来存储资源的 “到期时间戳”（例如：当前时间 + 任务规定的超时时长）。ZSet 会自动根据 score 对所有成员进行升序排序。 Member: 存储需要被释放的资源的唯一标识，比如 crowd_resource_id。ZSet 的 member 天然具有唯一性，正好符合“一个资源只能被一个标注员持有”的设定。 工作流程： 添加任务：当标注员领取一条资源 (crowd_resource_id) 时，计算出其到期时间戳（release_timestamp），然后执行 Redis 命令： ZADD delay_queue:annotation_release <release_timestamp> <crowd_resource_id> 处理任务：启动一个独立的、轻量级的轮询程序（或后台线程）。该程序以一个固定的时间间隔（例如，每 5 秒）执行一次。 它查询 ZSet 中 score 小于等于当前时间戳的所有成员。这些就是已经到期的资源。 命令：ZRANGEBYSCORE delay_queue:annotation_release 0 <current_timestamp> 释放资源：获取到到期的 crowd_resource_id 列表后，程序会依次处理这些资源： 首先，尝试从 ZSet 中移除该成员，确保操作的原子性（可以使用 ZREM 或 ZPOPMIN）。 然后，执行业务逻辑，将被锁定的资源状态更新为“待分配”，放回公共资源池。 取消任务：如果标注员在规定时间内完成了标注，就需要从延时队列中移除对应的资源，取消“超时释放”任务。 命令：ZREM delay_queue:annotation_release <crowd_resource_id> 为什么 Redis ZSet 是最佳选择？ 完美匹配需求：它天然支持可变延时（通过 score），并且利用 score 排序的特性，使得查询“哪些任务到期了”的操作极其高效 (O(logN+M))，避免了数据库的全局扫描。 高性能：Redis 基于内存，读写性能远超传统数据库，完全能应对高并发的资源领取场景。 持久化：Redis 提供 RDB 和 AOF 两种持久化机制，保证了服务重启后延时任务不丢失。 轻量级：相比于引入重量级的消息队列或调度框架，使用 Redis ZSet 的方案更加轻巧、易于实现和维护。 精度可控：通过调整轮询程序的执行间隔，可以轻松平衡任务的实时性和系统的性能开销，完全满足我们分钟级的精度要求。","s":"最终选择：基于 Redis ZSet 的延时队列","u":"/obsidian/docs/Iflytek/技术方案/Zset做的延迟队列","h":"#最终选择基于-redis-zset-的延时队列","p":87},{"i":98,"t":"Iflytek 技术方案 为什么await()会阻塞当前线程，在响应式环境中会导致线程匮乏？","s":"为什么await()会阻塞当前线程，在响应式环境中会导致线程匮乏？","u":"/obsidian/docs/Iflytek/技术方案/为什么await()会阻塞当前线程，在响应式环境中会导致线程匮乏？","h":"","p":97},{"i":100,"t":"Iflytek 技术方案 从状态设计模式--->状态机控制打回资源的释放","s":"从状态设计模式--->状态机控制打回资源的释放","u":"/obsidian/docs/Iflytek/技术方案/从状态设计模式--->状态机控制打回资源的释放","h":"","p":99},{"i":102,"t":"状态机就是一个数学模型，他定义了一种状态到另一种状态转变时的条件、动作。在Java代码中就是通过这种A --条件--> B 模型映射到代码来代替if - else 举个例子： 在电商平台中，一个订单会有多种状态，临时单、已下单、待支付、已支付、待发货、待收货、已完成等等。每一种状态都和变化前的状态以及执行的操作有关。 比如，用户将商品加入购物车后，后台会生成一个所谓的“临时单”。因为用户还没有点击下单，所以这个订单实际上还没有生成。只有当用户下单后，这个“临时单”才会转化为一个“待支付的订单”。 以上过程中只有将一个处于“临时单”状态的订单执行下单操作，才能得到一个状态为“待支付”的订单。 即一个前置状态+一个恰当的操作，才能流转订单的状态。在这个过程中如果使用硬编码，我们就需要一系列的 if-else 语句来检查订单的当前状态、可执行操作以及这两个组合得到的下一个应该被流转的状态值。如果订单的状态流转很复杂，代码逻辑就会很复杂，可读性低，后期维护困难。 处理以上问题，我们可以使用状态设计模式来处理。对应到实践，就是状态机。","s":"新概念： 什么是状态机？","u":"/obsidian/docs/Iflytek/技术方案/从状态设计模式--->状态机控制打回资源的释放","h":"#新概念-什么是状态机","p":99},{"i":104,"t":"第一个是 State ，状态。一个状态机至少要包含两个状态。例如上面自动门的例子，有 open 和 closed 两个状态。 第二个是 Event ，事件。事件就是执行某个操作的触发条件或者口令。对于自动门，“按下开门按钮”就是一个事件。 第三个是 Action ，动作。事件发生以后要执行动作。例如事件是“按开门按钮”，动作是“开门”。编程的时候，一个 Action一般就对应一个函数。 第四个是 Transition ，变换。也就是从一个状态变化为另一个状态。例如“开门过程”就是一个变换","s":"下面给出状态机的四大概念：","u":"/obsidian/docs/Iflytek/技术方案/从状态设计模式--->状态机控制打回资源的释放","h":"#下面给出状态机的四大概念","p":99},{"i":106,"t":"当我们设计状态机的时候，我们要确定需求的六种元素：起始、终止、现态、次态（目标状态）、动作、条件 以订单为例：以从待支付状态转换为待发货状态为例: 起始状态：订单创建好后处于待支付 ①现态：是指当前所处的状态。待支付 ②条件：又称为“事件”，当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。支付事件 ③动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执行任何动作，直接迁移到新状态。状态转换为待发货 ④次态：条件满足后要迁往的新状态。“次态”是相对于“现态”而言的，“次态”一旦被激活，就转变成新的“现态”了。待发货 终止状态：订单完成、订单取消、超时关闭、退款成功等 注意事项 1、避免把某个“程序动作”当作是一种“状态”来处理。那么如何区分“动作”和“状态”？“动作”是不稳定的，即使没有条件的触发，“动作”一旦执行完毕就结束了；而“状态”是相对稳定的，如果没有外部条件的触发，一个状态会一直持续下去。 2、状态划分时漏掉一些状态，导致跳转逻辑不完整。所以在设计状态机时，我们需要反复的查看设计的状态图或者状态表，最终达到一种牢不可破的设计方案。","s":"如何设计状态机？","u":"/obsidian/docs/Iflytek/技术方案/从状态设计模式--->状态机控制打回资源的释放","h":"#如何设计状态机","p":99},{"i":108,"t":"Spring Statemachine旨在提供以下功能：(看不懂) 易于使用的扁平单级状态机，用于简单的使用案例。 分层状态机结构，以简化复杂的状态配置。 状态机区域提供更复杂的状态配置。 使用触发器，转换，警卫和操作。 键入安全配置适配器。 生成器模式，用于在Spring Application上下文之外使用的简单实例化通常用例的食谱 基于Zookeeper的分布式状态机 状态机事件监听器。 UML Eclipse Papyrus建模。 将计算机配置存储在永久存储中。 Spring IOC集成将bean与状态机关联起来。","s":"Spring为我们提供了状态机 ---- spring statemachine","u":"/obsidian/docs/Iflytek/技术方案/从状态设计模式--->状态机控制打回资源的释放","h":"#spring为我们提供了状态机------spring-statemachine","p":99},{"i":110,"t":"Iflytek 技术方案 再有人问你如何实现订单到期关闭，就把这篇文章发给他！","s":"再有人问你如何实现订单到期关闭，就把这篇文章发给他！","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"","p":109},{"i":112,"t":"在电商、支付等系统中，一般都是先创建订单（支付单），再给用户一定的时间进行支付，如果没有按时支付的话，就需要把之前的订单（支付单）取消掉。 这种类似的场景有很多，还有比如到期自动收货、超时自动退款、下单后自动发送 短信 等等都是类似的业务问题。 本文就从这样的业务问题出发，探讨一下都有哪些技术方案，这些方案的实现细节，以及相关的优缺点都有什么？ 因为本文要讲的内容比较多，涉及到11种具体方案，受篇幅限制，这篇文章主要是讲方案，不会涉及到具体的代码实现。 因为只要方案搞清楚了，代码实现不是难事儿。","s":"前言","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#前言","p":109},{"i":114,"t":"在解决这类问题的时候，有一种比较简单的方式，那就是通过业务上的被动方式来进行关单操作。 简单点说，就是订单创建好了之后。我们系统上不做主动关单，什么时候用户来访问这个订单了，再去判断时间是不是超过了过期时间，如果过了时间那就进行关单操作，然后再提示用户。 这种做法是最简单的，基本不需要开发定时关闭的功能，但是他的缺点也很明显，那就是如果用户一直不来查看这个订单，那么就会有很多脏数据冗余在 数据库 中一直无法被关单。 还有一个缺点，那就是需要在用户的查询过程中进行写的操作，一般写操作都会比读操作耗时更长，而且有失败的可能，一旦关单失败了，就会导致系统处理起来比较复杂。 所以， 这种方案只适合于自己学习的时候用，任何商业网站中都不建议使用这种方案来实现订单关闭的功能。","s":"一、被动关闭","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#一被动关闭","p":109},{"i":116,"t":"定时任务关闭订单，这是很容易想到的一种方案。 具体实现细节就是我们通过一些调度平台来实现定时执行任务，任务就是去扫描所有到期的订单，然后执行关单动作。 这个方案的优点也是比较简单，实现起来很容易，基于Timer、ScheduledThreadPoolExecutor、或者像xxl-job这类调度框架都能实现，但是有以下几个问题： 1、时间不精准。 一般定时任务基于固定的频率、按照时间定时执行的，那么就可能会发生很多订单已经到了超时时间，但是定时任务的调度时间还没到，那么就会导致这些订单的实际关闭时间要比应该关闭的时间晚一些。 2、无法处理大订单量。 定时任务的方式是会把本来比较分散的关闭时间集中到任务调度的那一段时间，如果订单量比较大的话，那么就可能导致任务执行时间很长，整个任务的时间越长，订单被扫描到时间可能就很晚，那么就会导致关闭时间更晚。 3、对数据库造成压力。 定时任务集中扫表，这会使得数据库IO在短时间内被大量占用和消耗，如果没有做好隔离，并且业务量比较大的话，就可能会影响到线上的正常业务。 4、分库分表问题。 订单系统，一旦订单量大就可能会考虑分库分表，在分库分表中进行全表扫描，这是一个极不推荐的方案。 所以， 定时任务的方案，适合于对时间精确度要求不高、并且业务量不是很大的场景中。如果对时间精度要求比较高，并且业务量很大的话，这种方案不适用。","s":"二、定时任务","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#二定时任务","p":109},{"i":118,"t":"有这样一种方案，他不需要借助任何外部的资源，直接基于应用自身就能实现，那就是基于JDK自带的DelayQueue来实现。 DelayQueue是一个无界的BlockingQueue，用于放置实现了Delayed接口的对象，其中的对象只能在其到期时才能从队列中取走。 基于延迟队列，是可以实现订单的延迟关闭的，首先，在用户创建订单的时候，把订单加入到DelayQueue中，然后，还需要一个常驻任务不断的从队列中取出那些到了超时时间的订单，然后在把他们进行关单，之后再从队列中删除掉。 这个方案需要有一个线程，不断的从队列中取出需要关单的订单。一般在这个线程中需要加一个while(true)循环，这样才能确保任务不断的执行并且能够及时的取出超时订单。 使用DelayQueue实现超时关单的方案，实现起来简单，不须要依赖第三方的框架和类库，JDK原生就支持了。 当然这个方案也不是没有缺点的，首先，基于DelayQueue的话，需要把订单放进去，那如果订单量太大的话，可能会导致OOM的问题；另外，DelayQueue是基于JVM内存的，一旦机器重启了，里面的数据就都没有了。虽然我们可以配合数据库的持久化一起使用。而且现在很多应用都是集群部署的，那么集群中多个实例上的多个DelayQueue如何配合是一个很大的问题。 所以， 基于JDK的DelayQueue方案只适合在单机场景、并且数据量不大的场景中使用，如果涉及到分布式场景，那还是不建议使用。","s":"三、JDK自带的延迟队列","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#三jdk自带的延迟队列","p":109},{"i":120,"t":"还有一种方式，和上面我们提到的JDK自带的DelayQueue类似的方式，那就是基于时间轮实现。 为什么要有时间轮呢？主要是因为DelayQueue插入和删除操作的平均时间复杂度——O(nlog(n))，虽然已经挺好的了，但是时间轮的方案可以将插入和删除操作的时间复杂度都降为O(1)。 时间轮可以理解为一种环形结构，像钟表一样被分为多个 slot。每个 slot 代表一个时间段，每个 slot 中可以存放多个任务，使用的是链表结构保存该时间段到期的所有任务。时间轮通过一个时针随着时间一个个 slot 转动，并执行 slot 中的所有到期任务。 基于Netty的HashedWheelTimer可以帮助我们快速的实现一个时间轮，这种方式和DelayQueue类似，缺点都是基于内存、集群扩展麻烦、内存有限制等等。 但是他相比DelayQueue的话，效率更高一些，任务触发的延迟更低。代码实现上面也更加精简。 所以， 基于Netty的时间轮方案比基于JDK的DelayQueue效率更高，实现起来更简单，但是同样的，只适合在单机场景、并且数据量不大的场景中使用，如果涉及到分布式场景，那还是不建议使用。","s":"四、Netty的时间轮","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#四netty的时间轮","p":109},{"i":122,"t":"既然基于Netty的时间轮存在一些问题，那么有没有其他的时间轮的实现呢？ 还真有的，那就是Kafka的时间轮，Kafka内部有很多延时性的操作，如延时生产，延时拉取，延时数据删除等，这些延时功能由内部的延时操作管理器来做专门的处理，其底层是采用时间轮实现的。 而且，为了解决有一些时间跨度大的延时任务，Kafka 还引入了层级时间轮，能更好控制时间粒度，可以应对更加复杂的定时任务处理场景； Kafka 中的时间轮的实现是 TimingWheel 类，位于 kafka.utils.timer 包中。基于Kafka的时间轮同样可以得到O(1)时间复杂度，性能上还是不错的。 基于Kafka的时间轮的实现方式，在实现方式上有点复杂，需要依赖kafka，但是他的稳定性和性能都要更高一些，而且适合用在分布式场景中。","s":"五、Kafka的时间轮","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#五kafka的时间轮","p":109},{"i":124,"t":"相比于Kafka来说，RocketMQ中有一个强大的功能，那就是支持延迟消息。 延迟消息，当消息写入到Broker后，不会立刻被消费者消费，需要等待指定的时长后才可被消费处理的消息，称为延时消息。 有了延迟消息，我们就可以在订单创建好之后，发送一个延迟消息，比如20分钟取消订单，那就发一个延迟20分钟的延迟消息，然后在20分钟之后，消息就会被消费者消费，消费者在接收到消息之后，去关单就行了。 但是，RocketMQ的延迟消息并不是支持任意时长的延迟的，它只支持：1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h这几个时长。（商业版支持任意时长） 可以看到，有了RocketMQ延迟消息之后，我们处理上就简单很多，只需要发消息，和接收消息就行了，系统之间完全解耦了。但是因为延迟消息的时长受到了限制，所以并不是很灵活。 如果我们的业务上，关单时长刚好和RocketMQ延迟消息支持的时长匹配的话，那么是可以基于RocketMQ延迟消息来实现的。否则，这种方式并不是最佳的。","s":"六、RocketMQ延迟消息","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#六rocketmq延迟消息","p":109},{"i":126,"t":"延迟消息不仅在RocketMQ中支持，其实在RabbitMQ中也是可以实现的，只不过其底层是基于死信队列实现的。 当RabbitMQ中的一条正常的消息，因为过了存活时间（TTL过期）、队列长度超限、被消费者拒绝等原因无法被消费时，就会变成Dead Message，即死信。 当一个消息变成死信之后，他就能被重新发送到死信队列中（其实是交换机-exchange）。 那么基于这样的机制，就可以实现延迟消息了。那就是我们给一个消息设定TTL，然但是并不消费这个消息，等他过期，过期后就会进入到死信队列，然后我们再监听死信队列的消息消费就行了。 而且，RabbitMQ中的这个TTL是可以设置任意时长的，这就解决了RocketMQ的不灵活的问题。 但是，死信队列的实现方式存在一个问题，那就是可能造成队头阻塞，因为队列是先进先出的，而且每次只会判断队头的消息是否过期，那么，如果队头的消息时间很长，一直都不过期，那么就会阻塞整个队列，这时候即使排在他后面的消息过期了，那么也会被一直阻塞。 基于RabbitMQ的死信队列，可以实现延迟消息，非常灵活的实现定时关单，并且借助RabbitMQ的集群扩展性，可以实现高可用，以及处理大并发量。他的缺点第一是可能存在消息阻塞的问题，还有就是方案比较复杂，不仅要依赖RabbitMQ，而且还需要声明很多队列(exchange)出来，增加系统的复杂度","s":"七、RabbitMQ死信队列","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#七rabbitmq死信队列","p":109},{"i":128,"t":"其实，基于RabbitMQ的话，可以不用死信队列也能实现延迟消息，那就是基于rabbitmq_delayed_message_exchange插件，这种方案能够解决通过死信队列实现延迟消息出现的消息阻塞问题。但是该插件从RabbitMQ的3.6.12开始支持的，所以对版本有要求。 这个插件是官方出的，可以放心使用，安装并启用这个插件之后，就可以创建x-delayed-message类型的队列了。 前面我们提到的基于私信队列的方式，是消息先会投递到一个正常队列，在TTL过期后进入死信队列。但是基于插件的这种方式，消息并不会立即进入队列，而是先把他们保存在一个基于Erlang开发的Mnesia数据库中，然后通过一个定时器去查询需要被投递的消息，再把他们投递到x-delayed-message队列中。 基于RabbitMQ插件的方式可以实现延迟消息，并且不存在消息阻塞的问题，但是因为是基于插件的，而这个插件支持的最大延长时间是(2^32)-1 毫秒，大约49天，超过这个时间就会被立即消费。但是他基于RabbitMQ实现，所以在可用性、性能方便都很不错","s":"八、RabbitMQ插件","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#八rabbitmq插件","p":109},{"i":130,"t":"很多用过Redis的人都知道，Redis有一个过期监听的功能， 在 redis.conf 中，加入一条配置notify-keyspace-events Ex开启过期监听，然后再代码中实现一个KeyExpirationEventMessageListener，就可以监听key的过期消息了。 这样就可以在接收到过期消息的时候，进行订单的关单操作。 这个方案不建议大家使用，是因为Redis官网上明确的说过，Redis并不保证Key在过期的时候就能被立即删除，更不保证这个消息能被立即发出。所以，消息延迟是必然存在的，随着数据量越大延迟越长，延迟个几分钟都是常事儿。 而且，在Redis 5.0之前，这个消息是通过PUB/SUB模式发出的，他不会做持久化，至于你有没有接到，有没有消费成功，他不管。也就是说，如果发消息的时候，你的客户端挂了，之后再恢复的话，这个消息你就彻底丢失了。（在Redis 5.0之后，因为引入了Stream，是可以用来做延迟 消息队列 的。）","s":"九、Redis过期监听","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#九redis过期监听","p":109},{"i":132,"t":"虽然基于Redis过期监听的方案并不完美，但是并不是Redis实现关单功能就不完美了，还有其他的方案。 我们可以借助Redis中的有序集合——zset来实现这个功能。 zset是一个有序集合，每一个元素(member)都关联了一个 score，可以通过 score 排序来取集合中的值。 我们将订单超时时间的时间戳（下单时间+超时时长）与订单号分别设置为 score 和 member。这样redis会对zset按照score延时时间进行排序。然后我们再开启redis扫描任务，获取”当前时间 > score”的延时任务，扫描到之后取出订单号，然后查询到订单进行关单操作即可。 使用redis zset来实现订单关闭的功能的优点是可以借助redis的持久化、高可用机制。避免 数据丢失 。但是这个方案也有缺点，那就是在高并发场景中，有可能有多个消费者同时获取到同一个订单号，一般采用加分布式锁解决，但是这样做也会降低吞吐型。 但是，在大多数业务场景下，如果幂等性做得好的，多个消费者取到同一个订单号也无妨。","s":"十、Redis的zset","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#十redis的zset","p":109},{"i":134,"t":"上面这种方案看上去还不错，但是需要我们自己基于zset这种数据结构编写代码，那么有没有什么更加友好的方式？ 有的，那就是基于Redisson。 Redisson是一个在Redis的基础上实现的框架，它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务。 Redission中定义了分布式延迟队列RDelayedQueue，这是一种基于我们前面介绍过的zset结构实现的延时队列，它允许以指定的延迟时长将元素放到目标队列中。 其实就是在zset的基础上增加了一个基于内存的延迟队列。当我们要添加一个数据到延迟队列的时候，redission会把数据+超时时间放到zset中，并且起一个延时任务，当任务到期的时候，再去zset中把数据取出来，返回给客户端使用。 大致思路就是这样的，感兴趣的大家可以看一看RDelayedQueue的具体实现。 基于Redisson的实现方式，是可以解决基于zset方案中的并发重复问题的，而且还能实现方式也比较简单，稳定性、性能都比较高。","s":"十一、Redisson","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#十一redisson","p":109},{"i":136,"t":"我们介绍了11种实现订单定时关闭的方案，其中不同的方案各自都有优缺点，也各自适用于不同的场景中。那我们尝试着总结一下： 实现的复杂度上（包含用到的框架的依赖及部署）： Redission > RabbitMQ插件 > RabbitMQ死信队列 > RocketMQ延迟消息 ≈ Redis的zset > Redis过期监听 ≈ kafka时间轮 > 定时任务 > Netty的时间轮 > JDK自带的DelayQueue > 被动关闭 方案的完整性： Redission ≈ RabbitMQ插件 > kafka时间轮 > Redis的zset ≈ RocketMQ延迟消息 ≈ RabbitMQ死信队列 > Redis过期监听 > 定时任务 > Netty的时间轮 > JDK自带的DelayQueue > 被动关闭 不同的场景中也适合不同的方案： 自己玩玩：被动关闭 单体应用，业务量不大：Netty的时间轮、JDK自带的DelayQueue、定时任务 分布式应用，业务量不大：Redis过期监听、RabbitMQ死信队列、Redis的zset、定时任务 分布式应用，业务量大、并发高：Redission、RabbitMQ插件、kafka时间轮、RocketMQ延迟消息 总体考虑的话，考虑到成本，方案完整性、以及方案的复杂度，还有用到的第三方框架的流行度来说， 个人比较建议优先考虑Redission+Redis、RabbitMQ插件、Redis的zset、RocketMQ延迟消息等方案。","s":"总结","u":"/obsidian/docs/Iflytek/技术方案/再有人问你如何实现订单到期关闭，就把这篇文章发给他！","h":"#总结","p":109},{"i":138,"t":"Iflytek 技术方案 多线程下 上下文信息丢失问题","s":"多线程下 上下文信息丢失问题","u":"/obsidian/docs/Iflytek/技术方案/多线程下 上下文信息丢失问题","h":"","p":137},{"i":140,"t":"Iflytek 技术方案 动态sql拼接null 导致的错误","s":"动态sql拼接null 导致的错误","u":"/obsidian/docs/Iflytek/技术方案/动态sql拼接null 导致的错误","h":"","p":139},{"i":142,"t":"Iflytek 技术方案 移动云+dataz+服务CPU占用率高导致服务器压力大线上问题排查：","s":"移动云+dataz+服务CPU占用率高导致服务器压力大线上问题排查：","u":"/obsidian/docs/Iflytek/技术方案/如何排查CPU占用飙升的问题 ---> 排查到频繁的垃圾回收","h":"","p":141},{"i":144,"t":"Iflytek 技术方案 异步资源导入架构设计说明","s":"异步资源导入架构设计说明","u":"/obsidian/docs/Iflytek/技术方案/异步资源导入架构设计说明","h":"","p":143},{"i":146,"t":"当我们创建标注任务之后，我们不可能让用户在一个线程下等待数据的加载。原因如下： 数据量巨大：单个标注任务可能涉及几万到几十万条资源数据 网络调用耗时：需要通过Feign调用外部数据集服务获取资源信息 用户体验极差：用户可能需要等待几分钟甚至更长时间 系统风险高：长时间占用HTTP连接，容易导致超时、连接池耗尽等问题","s":"问题背景","u":"/obsidian/docs/Iflytek/技术方案/异步资源导入架构设计说明","h":"#问题背景","p":143},{"i":148,"t":"所以我们引入了Disruptor在这里做异步信息的导入，Redis Stream 来做消息队列。","s":"技术方案","u":"/obsidian/docs/Iflytek/技术方案/异步资源导入架构设计说明","h":"#技术方案","p":143},{"i":150,"t":"Disruptor 作为高性能内存级事件处理框架，在我们的架构中承担以下职责： 任务拆分：将大批次资源导入任务（如10万条数据）快速拆分成多个小任务（如100个1000条的小批次） 内存队列：提供无锁、高吞吐的内存队列，避免传统队列的线程竞争 多线程消费：支持8个消费者线程并发处理，充分利用CPU资源 异步解耦：将HTTP请求线程与资源导入处理线程完全解耦","s":"Disruptor 的作用","u":"/obsidian/docs/Iflytek/技术方案/异步资源导入架构设计说明","h":"#disruptor-的作用","p":143},{"i":152,"t":"Redis Stream 作为持久化消息队列，在我们的架构中承担以下职责： 持久化队列：确保消息不丢失，即使系统重启也能继续处理 消费确认机制：支持ACK机制，确保每条消息都被正确处理 流控保护：控制对外部数据集服务的并发调用，避免过载 可观测性：可以通过Redis监控消息处理进度和堆积情况","s":"Redis Stream 的作用","u":"/obsidian/docs/Iflytek/技术方案/异步资源导入架构设计说明","h":"#redis-stream-的作用","p":143},{"i":154,"t":"用户创建任务 ↓立即返回任务ID (500ms内) ↓定时任务扫描 → Disruptor事件发布 ↓Disruptor消费者拆分任务 → Redis Stream消息 ↓Redis Stream消费者 → Feign调用外部服务 ↓数据写入本地数据库 ↓定时任务检查完成状态","s":"架构协作流程","u":"/obsidian/docs/Iflytek/技术方案/异步资源导入架构设计说明","h":"#架构协作流程","p":143},{"i":156,"t":"性能优异： Disruptor提供内存级处理速度 Redis Stream提供高并发消息处理能力 可靠性强： Disruptor确保内存事件不丢失 Redis Stream提供持久化保证 可扩展性好： 消费者数量可配置调节 支持水平扩展 监控友好： 可以监控Disruptor的RingBuffer状态 可以监控Redis Stream的消息堆积情况","s":"技术优势","u":"/obsidian/docs/Iflytek/技术方案/异步资源导入架构设计说明","h":"#技术优势","p":143},{"i":158,"t":"system: load-resource: batch-buffer-size: 1048576 # Disruptor缓冲区大小(2^20) batch-consumer-size: 8 # Disruptor消费者数量 batch-page-size: 1000 # 每批处理的资源数量 consumer-core-threads: 5 # Redis Stream消费者核心线程数 consumer-max-threads: 10 # Redis Stream消费者最大线程数 通过这种双层异步架构，我们实现了用户体验与系统性能的完美平衡，既保证了用户操作的即时响应，又确保了大批量数据处理的高效可靠。","s":"配置参数","u":"/obsidian/docs/Iflytek/技术方案/异步资源导入架构设计说明","h":"#配置参数","p":143},{"i":160,"t":"Iflytek 技术方案 快速将+SpringBoot+应用接入+Prometheus+监控体系.doc：","s":"快速将+SpringBoot+应用接入+Prometheus+监控体系.doc：","u":"/obsidian/docs/Iflytek/技术方案/快速将+SpringBoot+应用接入+Prometheus+监控体系","h":"","p":159},{"i":162,"t":"Iflytek 技术方案 数据库动态sql拼接问题！todo","s":"数据库动态sql拼接问题！todo","u":"/obsidian/docs/Iflytek/技术方案/数据库动态sql拼接问题！todo","h":"","p":161},{"i":164,"t":"Iflytek 技术方案 动态 YAML → ModelParams 映射全链路揭秘与最佳实践","s":"动态 YAML → ModelParams 映射全链路揭秘与最佳实践","u":"/obsidian/docs/Iflytek/技术方案/编写yml导致的参数增删如何影响实体类呢？","h":"","p":163},{"i":166,"t":"代码/配置点 暴露出的痛点 具体表现 ModelParams 强类型字段 OCP 被破坏、字段膨胀 每接新模型就要在 ModelParams 里加 appId / apiSecret / headers … 改构造器、校验器、单测，全都得动 YAML 外部化配置 键名与 Java 成员难同步；私有字段无处安放 ai-models.xxx.params.* 出现新键时，Spring Boot 严格绑定直接抛 Unknown property，Jackson 反序列化抛 UnrecognizedPropertyException 校验 / Header 组装耦合 公私字段混淆，逻辑散落 同一方法里既校验公共字段，又 if…else 拼命分流厂商私有键；Header 逻辑越写越长 可读性与演进 配置冗长，代码碎片 YAML 段落多、默认值混杂；代码里解析与兜底逻辑重复，新同事看得一脸问号","s":"1 · 先看我们到底痛在哪","u":"/obsidian/docs/Iflytek/技术方案/编写yml导致的参数增删如何影响实体类呢？","h":"#1--先看我们到底痛在哪","p":163},{"i":168,"t":"不可为空的公共字段：apiKey、endpoint、modelName … 可为空的公共字段：maxTokens、temperature、stream … 每个模型私有字段：appId / apiSecret / 任意厂商自定义键 目标：前两类字段继续享受强类型校验；第三类字段 零修改 注入 Map<String,Object> 里，想加就加，想删就删。","s":"2 · 字段“三分法”——先把需求说清楚","u":"/obsidian/docs/Iflytek/技术方案/编写yml导致的参数增删如何影响实体类呢？","h":"#2--字段三分法先把需求说清楚","p":163},{"i":170,"t":"@JsonAnySetter / @JsonAnyGetter 只对 Jackson 反序列化 JSON 生效。 而 Spring Boot 处理 YAML 走的是另一条链路： YAML ─► SnakeYAML ─► Map<String,Object> │ ▼ Spring Binder (@ConfigurationProperties) 所以你直接在 ModelParams 写 @JsonAnySetter，Binder 压根不会用它。 结论：得想办法把 Binder 吐出来的 Map 再交给 Jackson，让 Jackson 去触发 @JsonAnySetter。","s":"3 · 为什么单靠 @JsonAnySetter 不行","u":"/obsidian/docs/Iflytek/技术方案/编写yml导致的参数增删如何影响实体类呢？","h":"#3--为什么单靠-jsonanysetter-不行","p":163},{"i":172,"t":"说明：为什么要自定义哥convertor呢？ 这是因为yml 转为pojo的流程是这样的: YAML 文件解析 Spring Boot 启动时，使用 SnakeYAML 解析所有 YAML 文件（包括 application.yml 和自定义配置）。 这些 YAML 被转换成一个嵌套的 Map 结构。 属性扁平化 Spring Boot 把嵌套 Map 结构“扁平化”为键值对，比如： ai-models.deepseek-r1-v1.params.api-key=xxxai-models.deepseek-r1-v1.params.endpoint=yyyai-models.deepseek-r1-v1.params.appid=zzz Spring Binder 登场 Binder 负责把这些键值对，按照你在 @ConfigurationProperties 注解里定义的 POJO 结构注入到 Java Bean 中。 对于普通字段（如 String、Integer 等），Binder 直接注入。 类型转换 当 Binder 遇到“目标类型”和“源数据类型”不匹配（比如需要将 Map 转成你的 ModelParams 类），就会查找有没有可用的 Converter。 没有合适的 Converter 时，只能绑定声明过的字段，多余字段丢弃或报错。 有自定义 Converter 时，Binder 会把 Map 交给你的 Converter 处理，这时我们把映射不了的字段通过自定义的converter转为JackSon并通过 @JsonAnySetter 把未声明字段收集到 extraParams。 Bean 初始化完成 绑定完成后，Spring Boot 会将完全注入的 Bean（如 ModelConfig）放进 IOC 容器，供全局使用。","s":"4 · 全链路拆解：五步到位","u":"/obsidian/docs/Iflytek/技术方案/编写yml导致的参数增删如何影响实体类呢？","h":"#4--全链路拆解五步到位","p":163},{"i":174,"t":"环节 代码触发点 作用 ① @ConfigurationPropertiesBinding Bean 定义阶段 把 自定义 Converter 注册进 ConversionService ② Converter <Map,String,Object> → ModelParams Binder 绑定 params 让 Binder 必须调用你的 convert() ③ ObjectMapper.convertValue convert() 内部 真正触发 @JsonAnySetter 把未知键塞进 extraParams ④ 独立 ObjectMapper 非全局 Bean 避免和 Spring Boot 自己的 Mapper 产生循环依赖","s":"4.1 关键代码位置","u":"/obsidian/docs/Iflytek/技术方案/编写yml导致的参数增删如何影响实体类呢？","h":"#41-关键代码位置","p":163},{"i":176,"t":"你可以访问：https://github.com/DHxingxing/ymlToPojo 查看源码","s":"5 · 代码落地","u":"/obsidian/docs/Iflytek/技术方案/编写yml导致的参数增删如何影响实体类呢？","h":"#5--代码落地","p":163},{"i":178,"t":"问题 答案 为什么不用一个 Map 装所有字段？ IDE 无类型提示，JSR-380 校验做不了，公共字段与私有字段混在一起，可维护性差。 能否在 Converter 里直接 new ModelParams() 手动 set？ 可以，但失去 Jackson 自动处理驼峰/中划线映射、日期格式、嵌套对象等能力，还得自己写 @JsonProperty 同款逻辑，不划算。 全局 ObjectMapper 行不行？ 不建议：ConfigurationProperties 阶段 BeanFactory 尚未完成，会踩循环依赖；用局部 Mapper 更简洁安全。 YAML 动态刷新（@RefreshScope）还能用吗？ 可以。刷新时 Binder 会重新走同一套 Converter → Jackson 流程，新字段仍然自动落入 extraParams。","s":"6 · 常见疑问（FAQ）","u":"/obsidian/docs/Iflytek/技术方案/编写yml导致的参数增删如何影响实体类呢？","h":"#6--常见疑问faq","p":163},{"i":180,"t":"不写了，嘿嘿","s":"· 写在最后","u":"/obsidian/docs/Iflytek/技术方案/编写yml导致的参数增删如何影响实体类呢？","h":"#-写在最后","p":163},{"i":182,"t":"Iflytek 技术方案 计算批次大小的证明","s":"计算批次大小的证明","u":"/obsidian/docs/Iflytek/技术方案/计算批次大小的证明","h":"","p":181},{"i":184,"t":"Iflytek 技术方案 雪花算法导致的前端精度丢失问题","s":"雪花算法导致的前端精度丢失问题","u":"/obsidian/docs/Iflytek/技术方案/雪花算法导致的前端精度丢失问题","h":"","p":183},{"i":186,"t":"JavaScript的Number类型基于IEEE 754双精度浮点数标准，只能安全表示-2^53 + 1到2^53 - 1范围内的整数（即Number.MAX_SAFE_INTEGER = 9007199254740991）。 ![[img_v3_02o8_8490a130-6d18-48e9-bc4e-4b4153d470nh.jpg]] ![[img_v3_02o8_f7adc37d-3ae9-43b3-8a70-1e56ec87d7nh.jpg]] ![[img_v3_02o8_364e6193-4c47-4837-a510-e8b6085021nh.jpg]]","s":"问题根源","u":"/obsidian/docs/Iflytek/技术方案/雪花算法导致的前端精度丢失问题","h":"#问题根源","p":183},{"i":188,"t":"雪花算法生成的64位long值范围是-2^63到2^63-1，远超JavaScript安全整数范围，会导致精度丢失 解决方案：使用String类型包装 解决方案2: 注解： @JsonSerialize(using = ToStringSerializer.class) private Long acceptBatchNo;","s":"雪花算法ID范围","u":"/obsidian/docs/Iflytek/技术方案/雪花算法导致的前端精度丢失问题","h":"#雪花算法id范围","p":183},{"i":190,"t":"Iflytek 技术方案 竞态条件与 TTL 过期","s":"竞态条件与 TTL 过期","u":"/obsidian/docs/Iflytek/技术方案/竞态条件与 TTL 过期","h":"","p":189},{"i":192,"t":"竞态条件指的是两个或多个操作的最终执行结果，依赖于它们不受控制的执行时序。当多个线程或进程在没有同步（如加锁）的情况下，并发地读写同一个共享资源时，就会发生竞态条件。 通俗地说，就像在十字路口没有红绿灯，两辆车都认为自己可以先通过，结果撞在了一起。谁先到、谁后到，这个无法预测的时序决定了最终是安全通过还是发生车祸。 一个经典的例子：银行账户取款​ 假设一个银行账户有 1000 元。现在，你和你伴侣同时在两台不同的ATM机上取款，每人取 800 元。 理想情况（串行执行）： 你的ATM机读取余额：1000元。 计算：1000 - 800 = 200元。 更新余额为 200元。交易成功。 你伴侣的ATM机读取余额：200元。 发现余额不足 800元，交易失败。 最终结果：账户余额 200元，总共只取出了 800元。这是正确的。 发生竞态条件的情况（并发执行）： 时间点 T1: 你的ATM机读取了账户余额：1000元。 时间点 T2: 在你完成取款前，系统切换，你伴侣的ATM机也读取了账户余额：1000元。（问题就出在这里！） 时间点 T3: 你的ATM机计算 1000 - 800 = 200，并将余额更新为 200元。 时间点 T4: 你伴侣的ATM机基于它在T2读取的旧数据进行计算 1000 - 800 = 200，并将余额更新为 200元。 最终结果：账户余额是 200元，但你们两人都成功取出了 800元（总共1600元）。银行损失了 600元。这就是典型的数据不一致问题。 核心特征：​ 共享资源：多个任务都在访问同一个对象、内存地址、文件或数据库记录。 并发访问：访问是同时或在不可预测的交错顺序中发生的。 修改操作：至少有一个任务在修改（写入）该资源。 解决方案：​ 互斥锁 (Mutex)：确保任何时候只有一个线程能访问该资源。 原子操作 (Atomic Operations)：将“读取-修改-写入”这个过程变成一个不可分割的原子步骤。 事务 (Transactions)：在数据库层面，将一系列操作打包，要么全部成功，要么全部失败。","s":"1. 竞态条件 (Race Condition)","u":"/obsidian/docs/Iflytek/技术方案/竞态条件与 TTL 过期","h":"#1-竞态条件-race-condition","p":189},{"i":194,"t":"Iflytek 本周代办","s":"本周代办","u":"/obsidian/docs/Iflytek/本周代办","h":"","p":193},{"i":196,"t":"Iflytek 技术方案 重写Ai模块代码到新标注工具系统","s":"重写Ai模块代码到新标注工具系统","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"","p":195},{"i":199,"t":"问题: 前端AiModelReq参数冗余，每次调用都需要传递大量重复信息 目标: 通过数据库存储前端配置信息，使用jobId查询获取模型配置，实现参数化调用 核心流程: 前端填写 → 数据库存储 → jobId查询 → 动态调用","s":"1.1 业务需求","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"#11-业务需求","p":195},{"i":201,"t":"支持多种AI模型（OpenAI、Claude、文心一言等） SPI 机制 YML配置文件管理模型参数 model_key作为配置映射键 支持参数传递和Prompt拼接","s":"1.2 技术需求","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"#12-技术需求","p":195},{"i":203,"t":"┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐│ 前端页面 │ │ 后端API │ │ AI模型服务 ││ │ │ │ │ ││ ┌─────────────┐ │ │ ┌─────────────┐ │ │ ┌─────────────┐ ││ │ 模型配置表单 │ │───▶│ │ 配置管理API │ │ │ │ OpenAI API │ ││ └─────────────┘ │ │ └─────────────┘ │ │ └─────────────┘ ││ │ │ │ │ ││ ┌─────────────┐ │ │ ┌─────────────┐ │ │ ┌─────────────┐ ││ │ 任务执行页面 │ │───▶│ │ 模型调用API │ │───▶│ │ Claude API │ ││ └─────────────┘ │ │ └─────────────┘ │ │ └─────────────┘ │└─────────────────┘ └─────────────────┘ └─────────────────┘ ▲ │ ┌─────────────────┐ │ 配置数据库 │ │ │ │ ┌─────────────┐ │ │ │ai_model_cfg │ │ │ └─────────────┘ │ │ │ │ ┌─────────────┐ │ │ │ YML配置文件 │ │ │ └─────────────┘ │ └─────────────────┘","s":"2 整体架构图","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"","p":195},{"i":205,"t":"DROP TABLE IF EXISTS ai_model;CREATE TABLE ai_model( `id` INT AUTO_INCREMENT COMMENT '主键' , `mark_job_id` BIGINT NOT NULL COMMENT '任务id;关联mark_job的 id 字段' , `model_key` VARCHAR(64) NOT NULL COMMENT '模型配置键;用于从yml文件中拿到配置信息' , `model_name` VARCHAR(255) NOT NULL COMMENT '模型名称;模型名称' , `model_enable` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '是否启用大模型;是否启用模型' , `prompt_job` TEXT NOT NULL COMMENT '任务配置;任务配置（prompt中的任务描述部份）' , `prompt_role` TEXT COMMENT '角色配置;角色配置（prompt中的角色定义部分)' , `prompt_background` TEXT COMMENT '背景配置;背景配置（prompt中的背景信息部分）' , `prompt_output` TEXT COMMENT '输出格式配置;prompt中的输出格式要求部分' , `create_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间' , `update_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间' , `operate_user_id` CHAR(36) NOT NULL COMMENT '操作人员id;操作者id' , PRIMARY KEY (id)) COMMENT = '大模型配置表'; 表中可以这么传参数 id mark_job_id model_key model_name model_enable prompt_job prompt_role prompt_background prompt_output operate_user_id 1 123456789 gpt_chat_completion_v1 GPT-4 Turbo 1 \"请总结以下文本\" \"你是摘要专家\" \"请忽略无关信息，只关注关键内容\" \"输出100字以内的摘要\" \"de93fd47-4d87-452e-b73c-04b092c30ff6\" 2 987654321 claude_content_review_v1 Claude V3 1 \"请审查以下内容\" \"你是内容审查员\" \"特别关注敏感词汇与不当内容\" \"输出违规内容列表\" \"de93fd47-4d87-452e-b73c-04b092c30ff6\"","s":"2. 1 数据库表设计","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"#2-1-数据库表设计","p":195},{"i":207,"t":"推荐的ModelKey命名规则 格式：{供应商}-{模型系列}-{版本} 命名示例： deepseek-r1-v1 (DeepSeek-R1) zhyDeepseek-r1-v1 (中海油-DeepSeek-R1) zhyHaineng-v1 (中海油-海能大模型) openai-gpt4-turbo baidu-ernie-bot-v1 然后我们可以在yml中进行这么配置 ai-model: gpt_chat_completion_v1: name： params： api-key: 'xxxx' endpoint: 'https://api.openai.com/v1/chat/completions' model-name: 'gpt-4-turbo' timeout: 120000 temperature: 0.7 max-tokens: 2000 max-requests: 5 baichuan_summarization_v2: api-key: 'xxxx' endpoint: 'https://api.baichuan-ai.com/v1/summarize' model-name: 'Baichuan-53B' timeout: 180000 temperature: 0.5 max-tokens: 1500 claude_content_review_v1: api-key: 'xxxx' endpoint: 'https://api.anthropic.com/v1/review' model-name: 'claude-v3' timeout: 90000 max-tokens: 1000 temperature: 0.2","s":"2. 2 ModelKey设计","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"#2-2-modelkey设计","p":195},{"i":209,"t":"从前端到后端传递的参数尽可能精简，前端不需要直接传递modelKey，因为它应当由后台通过jobId从数据库获取。 前端仅需传递： jobId：根据此id从数据库中拿到所有 prompt 部分和对应的model配置。 cueWord：用于决定本次调用大模型操作的数据范围或条件，比如是哪个字段、哪个数据集、哪个标注任务等。","s":"前端传递参数","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"","p":195},{"i":211,"t":"策略工厂模式： 工厂类和具体策略类紧密耦合，每次扩展策略需直接修改工厂类代码。 SPI机制： 工厂和具体实现类完全解耦，扩展时只需新增插件实现，真正实现“开闭原则”。 运行时动态加载能力的区别 策略工厂模式： 静态绑定，实现类在编译期确定； 每次新增模型策略后，都需重新编译部署，无法动态加载。 SPI机制： 动态加载，实现类在运行时发现和加载； 新增插件不需要重新编译部署整个服务，甚至可支持热插拔。 // 1. 定义SPI接口public interface ModelService { String modelKey(); ModelResult callModel(String prompt, Map<String, Object> modelParams); // 流式和非流式 如何统一ModelResult}// 2. 实现插件（示例）public class GPTModelService implements ModelService { @Override public String modelKey() { return \"gpt\"; } @Override public ModelResult callModel(...) { ... }}// 3. SPI加载ServiceLoader<ModelService> loader = ServiceLoader.load(ModelService.class);loader.forEach(service -> map.put(service.modelKey(), service)); 项目 Java SPI 配置驱动 + 反射注册 实现方式 META-INF/services/ + ServiceLoader yml 配置 + Map 绑定 + 反射实例化 扩展方式 新建类 + 配置 SPI 文件 新建配置项，无需动代码 耦合性 强依赖接口与实现类绑定 解耦，运行时动态装配 动态性 静态注册，启动前确定 真正运行时动态注册、动态切换 Spring 支持 Spring Boot 不推荐使用原始 SPI 完美契合 Spring 配置体系 调试复杂度 易出错，排查麻烦（如类加载失败） 基于配置和 Spring 注入，易调试","s":"SPI   VS  策略工厂","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"","p":195},{"i":213,"t":"10个人 调用大模型 会超过大模型的并发上限 使用令牌桶限流 Redis的令牌桶 分布式令牌桶","s":"限流","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"","p":195},{"i":215,"t":"使用 Redis 的原子性 + Lua 脚本，可以实现全局分布式令牌桶限流0。 对于每个不同的模型实现不同的限速 ai-model: gpt: rate-limit: permits-per-second: 5 spark: rate-limit: permits-per-second: 10 优点： 精确控制模型的 QPS 或并发； 分布式安全； 可按 modelKey 或 userId+modelKey 维度限流； 控制调用节奏，避免模型被封禁。 关键点： Redis zset + TTL 或 key + 过期时间 存储令牌； 使用 Lua 脚本保证“获取令牌+消费令牌”原子性； 每秒补充 X 个令牌（由配置项控制）；","s":"**** Redis + Lua 实现令牌桶限流","u":"/obsidian/docs/Iflytek/技术方案/重写Ai模块代码到新标注工具系统","h":"#-redis--lua-实现令牌桶限流","p":195},{"i":217,"t":"Iflytek 检查bug提示词：","s":"检查bug提示词：","u":"/obsidian/docs/Iflytek/检查bug提示词：","h":"","p":216},{"i":219,"t":"我的知识库计划","s":"我的知识库计划","u":"/obsidian/docs/intro","h":"","p":218},{"i":221,"t":"这个知识库是我给自己定的一个长期学习计划，目标是打造一个属于自己的技术知识体系。简单来说，就是要把学到的知识都整理到这里，方便以后查阅和复习。","s":"我要做什么？","u":"/obsidian/docs/intro","h":"#我要做什么","p":218},{"i":224,"t":"目标：从Java基础到微服务架构的完整学习路径 计划：每天至少学习一个技术点，并整理成笔记 重点：并发编程、JVM调优、Spring全家桶、分布式系统 \"Java是世界上最好的语言（不接受反驳）\"","s":"Java 技术栈学习","u":"/obsidian/docs/intro","h":"#java-技术栈学习","p":218},{"i":226,"t":"目标：深入理解常用框架的实现原理 计划：每周分析一个开源项目的核心源码 重点：Spring、MyBatis、Redis等常用框架 \"知其然更要知其所以然，不然面试官问你原理你就傻眼了\"","s":"源码深度分析","u":"/obsidian/docs/intro","h":"#源码深度分析","p":218},{"i":228,"t":"目标：记录学习过程中的思考和感悟 计划：每天记录学习心得和工作感悟 重点：技术难点、解决方案、个人成长 \"这里将记录我从菜鸟到老鸟的进化史\"","s":"日常学习记录","u":"/obsidian/docs/intro","h":"#日常学习记录","p":218},{"i":230,"t":"目标：整理工作中的技术方案和最佳实践 计划：及时记录工作中的技术难点和解决方案 重点：架构设计、性能优化、问题排查 \"工作相关的文档，毕竟要吃饭的嘛\" \"知识就是力量，但整理好的知识才是真正的超能力！\" ✨","s":"工作技术积累","u":"/obsidian/docs/intro","h":"#工作技术积累","p":218},{"i":232,"t":"Java AI RAG知识库的上传","s":"RAG知识库的上传","u":"/obsidian/docs/Java/AI/Rag","h":"","p":231},{"i":234,"t":"2.1 文件上传与解析​ 文件上传 : 用户通过前端界面或 API 上传文件，文件可以是多种格式（如 MD、TXT、SQL 等）。 文件解析 : 使用 TikaDocumentReader 对上传的文件进行解析，提取出文本内容。TikaDocumentReader 能够处理多种文件格式，并提取出结构化的文本数据。 2.2 文本拆分​ 文本拆分 : 使用 TokenTextSplitter 将解析后的文本内容拆分为更小的片段。拆分策略可以根据需求进行调整，例如按句子、段落或固定长度的 token 进行拆分。 拆分后的文本片段 : 每个文本片段将作为后续处理和存储的基本单元。 2.3 文本标记​ 标记添加 : 在遍历拆分后的文本片段时，为每个片段添加标记。标记的作用是区分不同的知识库内容，例如通过标记标识文件的来源、类别或其他元数据信息。 标记格式 : 标记可以是简单的字符串标签，也可以是结构化的 JSON 数据，具体格式根据业务需求确定。 2.4 向量化与存储​ 向量化 : 使用 Spring AI 提供的向量模型将标记后的文本片段转换为向量表示。向量化过程将文本内容映射到高维向量空间，便于后续的相似性搜索和检索。 存储到PostgreSQL向量库 : 将向量化后的文本片段及其标记存储到 PostgreSQL 向量库中。PostgreSQL 提供了高效的向量索引和搜索功能，能够支持大规模的文本数据存储和检索。","s":"2. 方案流程","u":"/obsidian/docs/Java/AI/Rag","h":"#2-方案流程","p":231},{"i":236,"t":"Java Redis Redis Stream 消息不会自动过期 消费失败怎么办？","s":"Redis Stream 消息不会自动过期 消费失败怎么办？","u":"/obsidian/docs/Java/Redis/Redis Stream 消息不会自动过期 消费失败怎么办？","h":"","p":235},{"i":238,"t":"Java K8s 常用命令K8s","s":"常用命令K8s","u":"/obsidian/docs/Java/K8s/常用命令K8s","h":"","p":237},{"i":240,"t":"kubectl get namespaces 查看所有命名空间中的pod kubectl get pod --all-namespaces 在所有命名空间中进行模糊匹配： kubectl get pod --all-namespaces | grep mark 查看日志 kubectl logs \\ # 查看 Pod 的日志 --tail=200 \\ # 仅显示最近的 200 行日志 -n obu-ai-cloud-staging \\ # 指定命名空间（例如 obu-ai-cloud-staging） -f sdmarkserver-1.0.0-alpha.46-xxx # 指定 Pod 名，并持续输出后续日志（类似 tail -f）","s":"查看所有命名空间","u":"/obsidian/docs/Java/K8s/常用命令K8s","h":"#查看所有命名空间","p":237},{"i":242,"t":"Java Redis Redis下的生产者消费者模式","s":"Redis下的生产者消费者模式","u":"/obsidian/docs/Java/Redis/Redis下的生产者消费者模式","h":"","p":241},{"i":244,"t":"Java Spring @ConfigurationProperties与@Value的区别","s":"@ConfigurationProperties与@Value的区别","u":"/obsidian/docs/Java/Spring/@ConfigurationProperties与@Value的区别","h":"","p":243},{"i":246,"t":"Java Spring JsonAnySetter","s":"JsonAnySetter","u":"/obsidian/docs/Java/Spring/@JsonAnySetter-json反序列化的兜底机制","h":"","p":245},{"i":248,"t":"反序列化时：先找常规字段 → 剩余字段全部交给 AnySetter → 存到 Map。 序列化时（若有 AnyGetter）：取 Map 内容 → 展平到同级 → 与常规字段一起输出。 借助 @JsonAnySetter，你可以把“新增模型参数”对代码的冲击面控制在最小：核心 Bean 不动，新字段自动进 extra，后续按需解析即可。","s":"简单流程","u":"/obsidian/docs/Java/Spring/@JsonAnySetter-json反序列化的兜底机制","h":"#简单流程","p":245},{"i":250,"t":"Java Spring log 配置文件","s":"log 配置文件","u":"/obsidian/docs/Java/Spring/log 配置文件","h":"","p":249},{"i":252,"t":"Java Spring @PostConstruct","s":"@PostConstruct","u":"/obsidian/docs/Java/Spring/@PostConstruct","h":"","p":251},{"i":254,"t":"Java 并发编程 Semaphore 信号量在Java中的作用","s":"Semaphore 信号量在Java中的作用","u":"/obsidian/docs/Java/并发编程/Semaphore 信号量在Java中的作用","h":"","p":253},{"i":256,"t":"Java 并发编程 多线程下 上下文信息丢失问题","s":"多线程下 上下文信息丢失问题","u":"/obsidian/docs/Java/并发编程/多线程下 上下文信息丢失问题","h":"","p":255},{"i":258,"t":"Java 微服务（Feign、Sentinel、Nacos 等） feign - Stream 下重定向问题","s":"feign - Stream 下重定向问题","u":"/obsidian/docs/Java/微服务（Feign、Sentinel、Nacos 等）/feign - Stream 下重定向问题","h":"","p":257},{"i":260,"t":"Java 微服务（Feign、Sentinel、Nacos 等） 如何解决feigin在获取数据时候出现的范型擦除？","s":"如何解决feigin在获取数据时候出现的范型擦除？","u":"/obsidian/docs/Java/微服务（Feign、Sentinel、Nacos 等）/如何解决feigin在获取数据时候出现的范型擦除？","h":"","p":259},{"i":263,"t":"在本项目中我们是通过","s":"如何解决这个问题呢？","u":"/obsidian/docs/Java/微服务（Feign、Sentinel、Nacos 等）/如何解决feigin在获取数据时候出现的范型擦除？","h":"#如何解决这个问题呢","p":259},{"i":265,"t":"Java 微服务（Feign、Sentinel、Nacos 等） 限流的方法与实现","s":"限流的方法与实现","u":"/obsidian/docs/Java/微服务（Feign、Sentinel、Nacos 等）/限流的方法与实现","h":"","p":264},{"i":267,"t":"Java 数据库 ShardingSphere 分库分表注意事项","s":"ShardingSphere 分库分表注意事项","u":"/obsidian/docs/Java/数据库/ShardingShpere分表注意事项","h":"","p":266},{"i":269,"t":"分片键（如 markJobId、id）字段严禁在 UPDATE 中被修改，即使只是 SET 成原值也不允许。 否则会被 ShardingSphere 拦截，抛出异常，导致 SQL 执行失败。","s":"1. 分片键禁止被修改","u":"/obsidian/docs/Java/数据库/ShardingShpere分表注意事项","h":"#1-分片键禁止被修改","p":266},{"i":271,"t":"在执行 UPDATE、DELETE 等操作时，SQL 的 WHERE 条件必须包含分片键（如 markJobId、id）。 否则 ShardingSphere 无法将 SQL 精确路由到目标分表/分库，可能导致： 全库/全表扫描 广播 SQL，性能极差","s":"2. DML 操作必须包含分片键","u":"/obsidian/docs/Java/数据库/ShardingShpere分表注意事项","h":"#2-dml-操作必须包含分片键","p":266},{"i":273,"t":"使用如下方式构造更新语句： update(newEntity, wrapper)","s":"3. 推荐用法","u":"/obsidian/docs/Java/数据库/ShardingShpere分表注意事项","h":"#3-推荐用法","p":266},{"i":275,"t":"Java 测试 什么是自动化测试框架Mock","s":"什么是自动化测试框架Mock","u":"/obsidian/docs/Java/测试/什么是自动化测试框架Mock","h":"","p":274},{"i":277,"t":"在后端开发中，接口验证既可以通过 Mock 测试在代码级别验证功能正确性，也可以通过 Postman 进行手动接口调试。两者各有侧重，本文从不同维度对两者进行详细对比，并说明各自的适用场景。","s":"Mock 测试 与 Postman 接口调试的区别与适用场景","u":"/obsidian/docs/Java/测试/什么是自动化测试框架Mock","h":"","p":274},{"i":279,"t":"对比维度 Mock 测试工具（如 MockMVC、Mockito） Postman 接口调试 使用时机 代码级单元测试或集成测试，适用于开发早期 人工调试接口，适用于开发、联调与测试各阶段 请求执行方式 模拟请求，运行于 JVM 内部 发起真实 HTTP 请求，需要接口服务运行中 网络依赖 不依赖网络，可脱离容器、服务器独立测试 依赖服务器启动监听端口 响应来源 模拟 Controller 层行为，响应数据由代码控制 服务真实处理请求，返回完整响应 接口控制粒度 可测试私有方法、边界情况、异常分支，mock 任意依赖服务 仅可测试请求输入和返回输出，无法探测内部实现逻辑 自动化集成能力 可集成至 JUnit、CI/CD 流程、代码覆盖率工具等 不易用于自动化测试或持续集成 测试粒度 精细，适合小粒度单元验证 粗略，关注输入输出结构 常见用途 单元测试、mock 外部系统、参数校验、异常处理测试等 联调、验收测试、接口文档验证、状态码检查等","s":"一、对比维度说明","u":"/obsidian/docs/Java/测试/什么是自动化测试框架Mock","h":"#一对比维度说明","p":274},{"i":281,"t":"使用 MockMVC 进行控制器测试示例： mockMvc.perform(post(\"/user/login\") .contentType(MediaType.APPLICATION_JSON) .content(\"{\\\"username\\\":\\\"admin\\\",\\\"password\\\":\\\"123456\\\"}\")) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\").value(\"0\")); 特点： 无需启动 Web 容器，测试运行速度快 可隔离测试控制器逻辑，不依赖数据库或服务层 可使用 Mockito 模拟 Service/Repository 逻辑 易于集成到单元测试框架和 CI 自动化流程中","s":"二、Mock 测试优势及使用示例","u":"/obsidian/docs/Java/测试/什么是自动化测试框架Mock","h":"#二mock-测试优势及使用示例","p":274},{"i":283,"t":"快速验证接口是否响应正常 与前端开发联调接口数据结构 编写与校验接口文档（结合 Swagger / OpenAPI） 检查响应字段、状态码、header 信息 适合手动测试真实网络交互","s":"三、Postman 接口调试的典型用途","u":"/obsidian/docs/Java/测试/什么是自动化测试框架Mock","h":"#三postman-接口调试的典型用途","p":274},{"i":285,"t":"使用场景 推荐工具 说明 后端开发阶段单元测试 Mock 测试 精确验证业务逻辑，mock 外部依赖 前后端联调接口 Postman 检查字段结构与响应内容 测试第三方接口尚未上线时 Mock 测试 打桩模拟第三方接口，提前验证集成逻辑 人工测试接口连通性或状态码 Postman 快速构造请求，适合手动验证 自动化测试集成与回归测试 Mock 测试 集成 JUnit + CI/CD 执行回归验证，提高开发效率 测试系统真实表现（性能、安全） Postman 发起真实请求，适合做安全性、限流等中间件验证","s":"四、应用场景推荐","u":"/obsidian/docs/Java/测试/什么是自动化测试框架Mock","h":"#四应用场景推荐","p":274},{"i":287,"t":"Mock 测试更偏向于“白盒测试”，关注代码内部逻辑与异常处理； Postman 更偏向于“黑盒测试”，关注接口输入输出的可用性和数据准确性； 两者应结合使用，Mock 适合测试代码，Postman 适合测试接口。","s":"五、总结","u":"/obsidian/docs/Java/测试/什么是自动化测试框架Mock","h":"#五总结","p":274},{"i":289,"t":"Java 设计模式 ddd下如何解决循环依赖的问题","s":"ddd下如何解决循环依赖的问题","u":"/obsidian/docs/Java/设计模式/ddd下如何解决循环依赖的问题","h":"","p":288},{"i":291,"t":"聚合之间只通过 ID 关联（最重要） 不要 A 聚合中注入 BService、持有 B 对象 只存 ID，在需要时从 Repository 或 QueryService 查询 把组合逻辑抽到应用服务中协调（ApplicationService） 应用服务是天然的协调器，可以注入多个 Service，但底层 Service 不互注： 查询类依赖抽到组合 QueryService 中 如果只是组合多个聚合的数据展示，使用专门的查询服务：","s":"那么如何解决循环依赖问题呢？","u":"/obsidian/docs/Java/设计模式/ddd下如何解决循环依赖的问题","h":"#那么如何解决循环依赖问题呢","p":288},{"i":293,"t":"Java 算法 接雨水","s":"接雨水","u":"/obsidian/docs/Java/算法/接雨水","h":"","p":292},{"i":295,"t":"Java 设计模式 监听者模式","s":"监听者模式","u":"/obsidian/docs/Java/设计模式/监听者模式","h":"","p":294},{"i":297,"t":"源码 Redission 下的雪花算法","s":"Redission 下的雪花算法","u":"/obsidian/docs/源码/Redission 下的雪花算法","h":"","p":296},{"i":299,"t":"源码 hutool工具下雪花算法. todo","s":"hutool工具下雪花算法. todo","u":"/obsidian/docs/源码/hutool工具下雪花算法. todo","h":"","p":298},{"i":301,"t":"源码 Spring Feign 的源码","s":"Spring Feign 的源码","u":"/obsidian/docs/源码/Spring Feign 的源码","h":"","p":300},{"i":303,"t":"源码 Redisson的create（config）是在什么时候注入配置的？","s":"Redisson的create（config）是在什么时候注入配置的？","u":"/obsidian/docs/源码/Redisson的create（config）是在什么时候注入配置的？","h":"","p":302},{"i":305,"t":"这一切的起点，是你在项目的 pom.xml (或 build.gradle) 文件中添加了 Redisson 的 Spring Boot Starter 依赖： XML <dependency> <groupId>org.redisson</groupId> <artifactId>redisson-spring-boot-starter</artifactId> <version>...</version> </dependency> 这个 starter 就像一个信号，它告诉 Spring Boot：“嘿，这个项目想要使用 Redisson，请帮我自动处理好所有配置！”","s":"第一步：添加依赖 (The Trigger)","u":"/obsidian/docs/源码/Redisson的create（config）是在什么时候注入配置的？","h":"#第一步添加依赖-the-trigger","p":302},{"i":307,"t":"接下来，你会在项目的 application.yml 或 application.properties 文件中提供 Redis 的连接信息，而不是在 Java 代码里硬编码。 例如，在 application.yml 中： YAML spring: redis: host: 127.0.0.1 port: 6379 password: your-password database: 0 # ... 其他配置 Spring Boot 会自动读取这些以 spring.redis 开头的配置。","s":"第二步：提供配置 (The Recipe)","u":"/obsidian/docs/源码/Redisson的create（config）是在什么时候注入配置的？","h":"#第二步提供配置-the-recipe","p":302},{"i":309,"t":"这是最关键的一步。redisson-spring-boot-starter 包里包含一个或多个自动化配置类（例如 RedissonAutoConfiguration）。这个类是 Spring Boot 实现“约定优于配置”的核心。 这个类上通常有几个关键的注解： @Configuration: 声明这是一个 Spring 配置类。 @ConditionalOnClass(Redisson.class): 条件注解，表示只有在项目的 classpath（依赖库）中能找到 Redisson 这个类时，本配置才会生效。 @EnableConfigurationProperties(RedisProperties.class): 告诉 Spring Boot 将 application.yml 中 spring.redis 下的配置项，自动加载到一个名为 RedisProperties 的 Java 对象中。 @Bean 和 @ConditionalOnMissingBean(RedissonClient.class): 这是真正的实例化动作发生的地方。 在这个配置类内部，会有一个类似这样的方法： Java // 这是简化的伪代码，用来说明原理@Bean@ConditionalOnMissingBean(RedissonClient.class) // 如果用户没有自己创建 RedissonClient，我才创建public RedissonClient redissonClient(RedisProperties props) { // 1. 创建一个 Redisson 的 Config 对象 Config config = new Config(); // 2. 从 RedisProperties (也就是你application.yml里的配置) 读取信息 // 并设置到 Config 对象中 config.useSingleServer() .setAddress(\"redis://\" + props.getHost() + \":\" + props.getPort()) .setPassword(props.getPassword()) .setDatabase(props.getDatabase()); // 3. 在这里，Spring Boot 在幕后替你调用了 Redisson.create！ return Redisson.create(config); } 这个方法被 @Bean 注解标记，意味着它的返回值（一个 RedissonClient 实例）会被创建并注册到 Spring 的容器（IoC Container）中，成为一个可以被全局注入的组件（Bean）。","s":"第三步：自动化配置类 (The Magic)","u":"/obsidian/docs/源码/Redisson的create（config）是在什么时候注入配置的？","h":"#第三步自动化配置类-the-magic","p":302},{"i":311,"t":"当 Spring Boot 应用程序启动时，上面那个自动化配置类就会运行，悄无声息地创建好一个 RedissonClient 实例并放入容器中。 所以，当你的业务代码（比如 AiModelServiceImpl）需要用到它时，你只需要通过 @Resource 或 @Autowired 声明一下： Java @ResourceRedissonClient redissonClient; Spring 容器看到这个注解，就会说：“哦，你需要一个 RedissonClient，我这里正好有一个已经配置好的实例”，然后就自动把它“注入”到你的类中。","s":"第四步：依赖注入 (Using the Instance)","u":"/obsidian/docs/源码/Redisson的create（config）是在什么时候注入配置的？","h":"#第四步依赖注入-using-the-instance","p":302},{"i":313,"t":"所以，你没有看到 Redisson.create() 的调用，是因为 Spring Boot Starter 框架替你完成了这个“脏活累活”。你只需要： 引入依赖：告诉 Spring Boot 你想用 Redisson。 提供配置：在 application.yml 中告诉它 Redis 在哪里。 然后就可以直接在代码中通过依赖注入来使用 RedissonClient 实例了。这正是 Spring Boot 框架的强大之处，它极大地简化了配置和整合第三方库的工作。","s":"总结","u":"/obsidian/docs/源码/Redisson的create（config）是在什么时候注入配置的？","h":"#总结","p":302}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/5",[0,4.656,1,0.177,2,2.395,3,3.765,4,3.765,5,3.415,6,3.765,7,3.765,8,3.765,9,3.765,10,3.576,11,3.765,12,3.765,13,3.576,14,3.765,15,3.765]],["t/7",[1,0.193,2,2.872,3,4.515,4,4.515,5,4.095,6,4.515,16,6.276]],["t/9",[1,0.177,2,2.395,3,3.765,4,3.765,5,3.415,6,3.765,7,3.765,8,3.765,9,3.765,10,3.576,11,3.765,12,3.765,13,3.576,14,3.765,15,3.765,17,4.656]],["t/11",[1,0.14,5,2.838,18,4.982,19,4.982,20,3.87,21,3.87,22,3.87,23,3.87,24,4.35,25,4.387,26,3.87,27,4.35,28,6.097,29,6.097,30,4.35,31,4.35,32,6.097,33,4.35,34,4.35,35,4.35,36,4.35,37,4.35]],["t/13",[38,5.733,39,6.533,40,5.733,41,5.733,42,5.733,43,4.192,44,4.192,45,4.192,46,4.192,47,4.192,48,4.192,49,4.192,50,4.192,51,4.192,52,4.192,53,4.192,54,4.192,55,4.192]],["t/15",[1,0.028,18,0.998,19,0.998,25,0.468,38,6.215,39,6.943,40,6.215,41,6.215,42,6.215,43,4.728,44,4.728,45,4.728,46,4.728,47,4.728,48,4.728,49,4.728,50,4.728,51,4.728,52,4.728,53,4.728,54,4.728,55,4.728,56,0.65,57,0.65,58,0.531,59,0.65,60,0.578,61,0.578,62,0.531,63,0.578,64,0.65]],["t/18",[0,4.656,1,0.177,2,2.395,3,3.765,4,3.765,5,3.415,6,3.765,7,3.765,8,3.765,9,3.765,10,3.576,11,3.765,12,3.765,13,3.576,14,3.765,15,3.765]],["t/20",[1,0.184,7,4.065,8,4.065,9,4.065,10,3.862,11,4.065,12,4.065,13,3.862,14,4.065,15,4.065,65,5.651,66,3.534]],["t/22",[1,0.177,2,2.395,3,3.765,4,3.765,5,3.415,6,3.765,7,3.765,8,3.765,9,3.765,10,3.576,11,3.765,12,3.765,13,3.576,14,3.765,15,3.765,17,4.656]],["t/24",[5,2.984,13,2.014,18,6.683,19,4.577,20,2.623,21,2.623,22,2.623,23,2.623,25,3.29,26,2.623,67,2.948,68,2.948,69,2.948,70,2.948,71,2.948,72,2.948,73,2.948,74,2.948,75,4.573,76,4.573,77,2.948,78,2.948,79,2.948,80,2.948,81,2.948,82,2.948,83,2.948,84,4.573,85,4.573,86,3.736,87,2.948,88,2.948,89,2.948,90,2.948,91,2.948,92,2.948,93,2.948,94,2.948,95,2.948,96,2.948,97,2.249,98,2.623]],["t/26",[86,5.766,99,6.279,100,6.279,101,7.057]],["t/28",[99,6.279,100,6.279,102,7.057,103,7.057]],["t/30",[1,0.201,104,3.993,105,4.706]],["t/32",[1,0.166,106,6.439,107,3.804]],["t/34",[1,0.186,105,4.594,108,4.205,109,5.981,110,5.981]],["t/36",[1,0.197,107,3.452,111,3.564,112,5.843]],["t/38",[1,0.207,104,3.151,107,3.725,108,4.433,111,3.163,113,3.91,114,4.835]],["t/40",[1,0.205,107,4.185,108,4.489,111,3.553,115,4.929]],["t/42",[1,0.19,62,5.437,107,2.98,108,2.457,111,2.53,116,3.495,117,3.495,118,2.996,119,5.92,120,3.495,121,3.495,122,3.495,123,5.92,124,3.495,125,3.495,126,2.996,127,3.495,128,5.045,129,2.684,130,3.209,131,2.684]],["t/44",[1,0.17,132,2.948]],["t/46",[1,0.189,2,2.75,133,6.01,134,6.01,135,6.01,136,6.01,137,6.01,138,6.01,139,3.066]],["t/48",[1,0.195,140,4.711,141,3.594,142,4.192,143,4.711,144,3.594,145,4.711,146,7.024,147,4.192,148,4.711,149,4.711,150,4.711,151,4.711,152,4.711,153,4.711,154,4.711]],["t/50",[1,0.199,104,3.898,132,2.668,155,5.493]],["t/52",[1,0.204,104,2.187,155,3.081,156,1.531,157,3.355,158,3.771,159,2.877,160,2.877,161,3.771,162,4.959,163,3.081,164,3.771,165,2.461,166,3.081,167,5.505,168,4.498,169,3.771,170,3.771,171,3.355,172,2.713,173,3.771,174,2.713,175,3.355,176,3.771]],["t/54",[1,0.21,104,3.151,172,3.91,174,3.91,177,3.546,178,4.44,179,4.835,180,4.835,181,1.862]],["t/56",[1,0.216,2,0.887,66,1.213,104,4.012,155,1.585,156,1.323,171,1.726,172,1.395,174,3.032,175,1.726,179,2.899,180,1.726,181,0.665,182,1.939,183,4.938,184,1.939,185,3.259,186,1.939,187,4.938,188,1.939,189,1.939,190,1.939,191,1.939,192,1.585,193,1.052,194,3.749,195,1.939,196,1.395,197,3.259,198,1.939,199,1.939,200,1.939,201,1.585,202,1.939,203,1.726,204,3.259]],["t/58",[1,0.162,132,2.801,139,3.6,205,7.057]],["t/60",[1,0.166,132,2.873,206,7.238]],["t/62",[1,0.191,207,7.057,208,7.057]],["t/64",[1,0.217,2,2.782,66,0.651,111,2.301,129,2.826,131,1.292,181,0.357,193,1.025,209,1.042,210,3.169,211,1.544,212,1.042,213,1.442,214,4.321,215,1.042,216,1.042,217,1.042,218,0.927,219,1.042,220,1.042,221,1.042,222,0.749,223,3.251,224,1.042,225,4.136,226,1.442,227,1.89,228,0.927,229,1.042,230,1.042,231,2.698,232,1.042,233,0.851,234,2.594,235,1.544,236,1.042,237,1.042,238,1.042,239,1.042,240,1.623,241,1.042,242,2.594,243,1.042,244,1.042,245,2.308,246,1.042,247,1.042,248,1.36,249,1.042,250,1.042,251,2.594]],["t/66",[1,0.215,2,0.732,25,1.151,97,1.221,118,1.221,139,0.816,144,1.221,147,1.424,165,1.044,181,0.548,193,0.868,210,1.805,211,1.307,213,1.221,218,1.424,240,1.73,248,1.151,252,2.26,253,1.6,254,1.424,255,3.871,256,1.6,257,1.6,258,1.151,259,1.6,260,2.766,261,3.319,262,1.424,263,2.26,264,1.6,265,1.424,266,4.351,267,2.461,268,2.786,269,1.6,270,1.6,271,1.6,272,1.6,273,1.307,274,2.766,275,3.653,276,1.6,277,1.6,278,2.766,279,1.6,280,1.6,281,1.424,282,1.424,283,1.6,284,1.6,285,2.766,286,2.766,287,1.6,288,1.6,289,1.6,290,1.6]],["t/68",[1,0.213,2,1.471,139,2.494,144,2.453,193,1.743,252,4.832,263,2.627,268,4.511,273,2.627,281,2.861,282,2.861,291,5.914,292,3.215,293,4.888,294,3.215,295,3.215,296,3.215,297,3.215,298,3.215,299,2.861,300,3.215,301,2.861]],["t/70",[1,0.212,2,0.442,25,0.696,58,0.79,63,0.86,66,0.605,97,0.738,105,2.395,107,0.508,139,0.901,141,1.347,142,0.86,144,2.297,156,1.222,159,0.738,163,0.79,165,0.631,168,1.443,177,0.631,181,0.605,193,0.524,210,1.591,211,0.79,213,1.347,223,0.696,231,0.631,245,0.86,248,0.696,252,1.992,254,1.571,255,0.86,258,1.271,262,3.118,263,4.459,265,0.86,267,2.169,268,0.738,273,0.79,299,1.571,302,1.766,303,1.766,304,0.967,305,0.967,306,1.766,307,0.967,308,2.169,309,1.766,310,0.967,311,0.86,312,0.967,313,3.011,314,0.967,315,1.766,316,0.967,317,0.967,318,0.967,319,0.86,320,0.967,321,1.271,322,0.86,323,0.967,324,0.967,325,0.967,326,0.967,327,0.967,328,0.967,329,0.967,330,1.766,331,0.967,332,1.766,333,0.967,334,0.967,335,1.571,336,0.967,337,0.967,338,1.766,339,0.967,340,0.967,341,0.696,342,0.967,343,0.967,344,0.967,345,0.967,346,0.967,347,0.967,348,1.766,349,0.967,350,0.967,351,0.967,352,0.967,353,0.967,354,0.967,355,0.967,356,1.766,357,1.571,358,0.967,359,0.967,360,1.571,361,0.967,362,0.967,363,0.967,364,0.967,365,0.967,366,0.967]],["t/72",[1,0.191,132,2.801,322,6.279]],["t/74",[1,0.188,132,2.733,156,2.795,367,3.734]],["t/76",[1,0.205,368,6.567,369,5.366,370,5.366]],["t/78",[1,0.209,233,6.435,371,4.618]],["t/80",[1,0.203,160,3.794,162,5.476,165,4.684,233,2.688,240,4.181,372,3.29,373,4.974,374,4.974,375,3.29,376,5.997,377,4.974,378,4.974,379,4.974,380,2.688,381,3.29,382,3.29,383,3.29]],["t/82",[1,0.209,2,0.638,66,0.873,97,1.064,156,0.566,159,2.507,160,3.018,162,4.571,165,2.941,168,2.005,178,1.14,181,0.478,193,0.757,231,0.91,240,0.873,258,1.766,341,1.004,360,1.241,369,2.685,370,4.381,371,1.004,380,4.657,384,1.395,385,1.395,386,1.395,387,1.395,388,1.395,389,1.004,390,1.241,391,1.395,392,1.064,393,1.395,394,1.395,395,1.241,396,1.395,397,1.395,398,1.395,399,1.395,400,1.395,401,1.395,402,1.395,403,1.395,404,1.395,405,4.507,406,1.395,407,2.454,408,1.395,409,2.454,410,2.454,411,2.454,412,1.14,413,1.14,414,1.395,415,1.395,416,1.395,417,1.395,418,1.395,419,1.395,420,1.395,421,1.241,422,1.395,423,1.395,424,2.454,425,1.395,426,1.395,427,1.395,428,1.395,429,1.395,430,1.395,431,1.395,432,1.395]],["t/84",[1,0.15,132,2.606,156,2.666,367,3.561,433,5.843,434,6.567,435,5.009]],["t/86",[436,7.057,437,7.057,438,7.057,439,7.057]],["t/88",[1,0.166,132,2.873,440,5.521]],["t/90",[1,0.21]],["t/92",[1,0.215]],["t/94",[1,0.214,441,5.138,442,5.138,443,5.138,444,5.138,445,5.138,446,5.138,447,6.832]],["t/96",[1,0.214,111,2.894,129,1.573,226,1.756,231,1.502,240,2.349,440,5.441,448,2.302,449,2.302,450,2.302,451,5.488,452,5.379,453,3.755,454,2.302,455,5.488,456,3.755,457,2.302,458,2.302,459,2.048,460,3.755,461,2.302,462,2.302,463,2.302,464,2.302]],["t/98",[1,0.166,132,2.873,465,7.238]],["t/100",[1,0.203,132,2.801]],["t/102",[1,0.217,235,4.911,466,6.01]],["t/104",[1,0.214,141,4.067,467,5.332,468,5.332,469,5.332,470,7,471,5.332]],["t/106",[1,0.217,2,2.75,193,3.259]],["t/108",[1,0.207,156,3.172,390,4.744,472,5.332,473,5.332,474,5.332,475,5.332,476,5.332,477,5.332]],["t/110",[1,0.194,132,2.873]],["t/112",[1,0.214,478,5.843]],["t/114",[1,0.217]],["t/116",[1,0.209,2,2.585,66,3.534,193,3.064,223,4.065,479,5.651,480,5.651,481,5.651]],["t/118",[1,0.147,482,5.244,483,6.418,484,5.71,485,6.418,486,6.418,487,6.418,488,6.418]],["t/120",[1,0.204,482,4.44,484,4.835,489,5.434,490,8.672,491,5.434,492,5.434]],["t/122",[1,0.189,493,5.347,494,6.01,495,6.727,496,6.01,497,6.01,498,6.01,499,6.01]],["t/124",[86,3.915,131,3.274,500,4.791,501,4.791,502,4.791,503,4.791,504,4.791,505,4.791,506,4.791,507,4.791,508,4.791,509,4.791,510,4.791,511,4.791,512,4.791,513,4.791,514,4.791,515,4.791,516,4.791,517,4.791,518,4.791,519,4.263,520,4.791]],["t/126",[1,0.178,166,5.128,521,6.276,522,6.276,523,6.276,524,5.128,525,6.276,526,6.276]],["t/128",[2,2.81,166,6.261,527,6.14,528,5.463,529,7.663,530,6.14,531,6.14,532,6.14]],["t/130",[1,0.194,111,2.521,141,4.31,533,5.651,534,5.651,535,5.651,536,5.651,537,5.651,538,5.651,539,5.651,540,5.651]],["t/132",[1,0.207,111,2.379,452,7.384,541,5.332,542,5.332,543,5.332,544,5.332,545,5.332]],["t/134",[210,4.285,440,5.009,546,6.567,547,6.567,548,6.567,549,6.567,550,6.567]],["t/136",[1,0.217,111,2.181,478,2.861,482,3.994,493,4.349,495,4.349,519,4.349,551,4.349,552,6.607,553,4.888,554,3.215,555,3.215,556,3.215,557,3.215]],["t/138",[1,0.203,132,2.801]],["t/140",[1,0.191,132,2.801,558,7.057]],["t/142",[1,0.166,132,2.873,559,7.238]],["t/144",[1,0.194,132,2.873]],["t/146",[1,0.201,104,3.993,105,4.706]],["t/148",[1,0.166,106,6.439,107,3.804]],["t/150",[1,0.186,105,4.594,108,4.205,109,5.981,110,5.981]],["t/152",[1,0.197,107,3.452,111,3.564,112,5.843]],["t/154",[1,0.207,104,3.151,107,3.725,108,4.433,111,3.163,113,3.91,114,4.835]],["t/156",[1,0.205,107,4.185,108,4.489,111,3.553,115,4.929]],["t/158",[1,0.19,62,5.437,107,2.98,108,2.457,111,2.53,116,3.495,117,3.495,118,2.996,119,5.92,120,3.495,121,3.495,122,3.495,123,5.92,124,3.495,125,3.495,126,2.996,127,3.495,128,5.045,129,2.684,130,3.209,131,2.684]],["t/160",[1,0.166,132,2.873,560,7.238]],["t/162",[1,0.166,132,2.873,561,7.238]],["t/164",[1,0.205,132,2.606,562,4.488,563,4.285]],["t/166",[1,0.217,139,1.804,156,1.435,181,1.212,367,1.917,412,2.889,413,2.889,562,3.588,563,3.426,564,3.536,565,5.571,566,3.536,567,3.536,568,3.536,569,3.536,570,3.536]],["t/168",[1,0.214,412,4.617,413,4.617,571,5.651,572,5.651,573,5.027]],["t/170",[1,0.214,156,2.256,172,2.75,174,4.714,177,2.494,367,2.072,371,2.75,562,3.799,563,2.494,573,3.401,574,4,575,3.822,576,3.401,577,4.24,578,3.822]],["t/172",[1,0.211,139,1.203,156,2.26,177,3.633,181,0.808,196,3.48,367,2.623,371,1.697,389,1.697,562,3.306,563,1.539,574,1.697,576,2.099,577,4.671,579,2.359,580,1.612,581,3.831,582,4.837,583,4.304,584,2.359,585,2.359,586,2.359,587,2.359,588,2.359,589,4.55,590,2.359,591,1.927,592,2.359,593,2.099]],["t/174",[1,0.216,156,1.453,192,2.926,196,3.813,367,1.942,563,2.336,574,2.576,577,4.042,589,5.697,591,2.926,594,3.581,595,3.581,596,3.581,597,3.186,598,3.581,599,3.186]],["t/176",[1,0.17,600,7.427]],["t/178",[1,0.215,113,2.678,174,3.923,177,2.428,192,3.041,226,2.839,258,2.678,371,2.678,562,2.543,563,2.428,577,2.839,589,4.455,591,3.041,599,3.311,601,3.722,602,3.722,603,3.722,604,3.722,605,3.722]],["t/180",[1,0.175]],["t/182",[1,0.194,132,2.873]],["t/184",[1,0.194,132,2.873]],["t/186",[1,0.149,606,4.791,607,4.791,608,4.791,609,4.791,610,4.791,611,4.791,612,4.791,613,4.791,614,4.791,615,4.791,616,4.791,617,4.791,618,4.791,619,4.791,620,4.791,621,4.791,622,4.791,623,4.791,624,4.791,625,4.791,626,4.791]],["t/188",[1,0.171,58,4.809,162,4.489,165,3.84,193,3.191,627,5.885,628,5.885,629,5.885,630,5.885,631,5.885,632,5.885]],["t/190",[1,0.201,132,2.733,524,5.626]],["t/192",[1,0.214,126,4.736,633,4.465,634,7.138,635,2.859,636,6.865,637,2.859,638,2.859,639,2.859,640,2.859,641,2.859,642,2.859,643,2.859,644,2.859,645,2.859,646,2.859,647,2.859,648,2.859,649,2.859,650,2.859]],["t/194",[1,0.17,132,2.948]],["t/196",[1,0.166,132,2.873,139,3.692]],["t/199",[1,0.216,146,5.236,319,6.638]],["t/201",[1,0.154,321,4.837,580,4.594,651,6.723,652,5.981,653,5.981]],["t/203",[1,0.224,139,0.963,392,4.135,580,1.29,654,1.68,655,1.542,656,1.888]],["t/205",[1,0.198,2,1.746,60,6.544,113,3.255,163,1.386,193,0.919,222,1.22,223,1.22,228,1.509,231,1.106,240,1.061,301,1.509,321,3.255,380,5.12,459,2.587,580,1.159,653,2.587,655,1.386,657,1.696,658,2.908,659,1.696,660,1.696,661,1.696,662,2.908,663,1.696,664,1.696,665,1.696,666,2.908,667,1.696,668,2.908,669,1.696,670,3.817,671,2.908,672,4.524,673,2.908,674,2.908,675,2.908,676,1.696,677,2.908,678,1.696,679,2.908,680,1.696,681,1.696,682,1.696,683,1.696,684,1.509,685,1.509,686,2.908,687,2.908,688,2.908,689,2.908,690,2.908,691,1.696,692,1.509,693,1.509]],["t/207",[1,0.156,126,1.741,129,1.56,130,4.462,139,1.165,222,1.643,223,1.643,240,2.958,261,1.741,335,2.031,341,3.929,370,3.864,392,3.608,395,4.859,580,1.56,583,4.859,597,2.031,654,2.031,655,1.865,684,2.031,685,3.319,692,2.031,693,2.031,694,5.461,695,2.283,696,2.283,697,2.283,698,2.283,699,2.283,700,2.283,701,4.73,702,4.73,703,2.283,704,4.73,705,2.283,706,4.73,707,2.283,708,4.208,709,2.283,710,2.283,711,2.283,712,2.283,713,2.283,714,2.283,715,2.283,716,2.283,717,2.283,718,2.283,719,2.283,720,2.283]],["t/209",[1,0.154,321,4.837,341,4.837,721,6.723,722,6.723,723,6.723]],["t/211",[1,0.217,2,0.932,10,1.392,66,1.274,156,2.067,159,3.33,160,1.554,165,2.215,177,1.329,178,1.664,181,0.698,193,1.104,201,1.664,203,1.812,222,1.466,248,1.466,261,2.59,268,1.554,321,1.466,367,1.104,563,1.329,580,1.392,652,5.035,724,2.037,725,3.395,726,4.365,727,2.037,728,2.037,729,2.037,730,2.037,731,3.395,732,2.037,733,2.037,734,2.037,735,2.037,736,2.037,737,2.037]],["t/213",[1,0.207,111,3,131,4.594]],["t/215",[1,0.213,61,4.425,111,2.219,129,2.248,131,2.248,139,1.678,214,4.425,222,2.367,231,2.147,240,2.058,261,2.509,341,2.367,357,4.425,369,2.688,440,2.509,524,2.688,528,2.927,738,4.974,739,4.974,740,4.974,741,3.29,742,3.29]],["t/217",[132,2.948,743,7.427]],["t/219",[1,0.175]],["t/221",[1,0.175]],["t/224",[1,0.162,181,2.857,744,7.057]],["t/226",[1,0.203,745,7.057]],["t/228",[1,0.21]],["t/230",[1,0.215]],["t/232",[139,3.692,181,2.48,746,7.238]],["t/234",[1,0.22,139,1.659,156,1.32,172,2.34,392,2.481,708,2.893,747,3.252,748,3.252,749,4.931,750,3.252,751,3.252,752,3.252,753,3.252,754,5.955]],["t/236",[1,0.186,107,3.533,111,3.614,181,2.303]],["t/238",[181,2.48,755,8.463]],["t/240",[1,0.208,139,2.537,157,4.425,308,2.927,636,2.927,756,6.685,757,5.997,758,7.178,759,3.29,760,3.29,761,2.927,762,3.29,763,4.974,764,4.974,765,4.974,766,3.29,767,3.29,768,3.29,769,3.29,770,3.29]],["t/242",[111,3.776,181,2.48]],["t/244",[156,2.938,181,2.48,771,7.238]],["t/246",[156,2.938,181,2.48,574,5.207]],["t/248",[1,0.216,177,4.405,196,3.631,574,3.631,772,5.047,773,5.047,774,5.047]],["t/250",[1,0.162,156,2.865,181,2.418,761,6.279]],["t/252",[156,2.938,181,2.48,775,7.238]],["t/254",[1,0.162,181,2.857,213,5.383]],["t/256",[1,0.203,181,2.418]],["t/258",[1,0.186,104,3.898,107,3.533,181,2.303,776,5.493]],["t/260",[1,0.162,181,2.418,776,5.766,777,7.057]],["t/263",[1,0.175]],["t/265",[1,0.191,181,2.418,776,5.766]],["t/267",[1,0.191,181,2.418,778,5.766]],["t/269",[1,0.209,226,4.584,778,4.911,779,5.347,780,6.01,781,5.347]],["t/271",[1,0.212,778,4.617,779,5.027,781,7.151,782,5.651]],["t/273",[1,0.166,783,7.238,784,7.238]],["t/275",[1,0.166,181,2.48,785,5.207]],["t/277",[1,0.201,785,4.954,786,5.253]],["t/279",[1,0.221,105,2.543,785,4.642,786,2.839,787,3.722,788,3.722,789,3.722,790,3.722]],["t/281",[1,0.213,311,4.412,791,4.959,792,4.959,793,4.959,794,4.959,795,4.959,796,4.959,797,4.959,798,4.959,799,4.959]],["t/283",[1,0.211,565,5.584,800,6.276,801,6.276]],["t/285",[1,0.219,785,5.489,786,5.37,802,4.35,803,4.35]],["t/287",[1,0.197,785,5.746,786,6.092]],["t/289",[1,0.166,181,2.48,804,7.238]],["t/291",[1,0.215,113,4.689,201,5.325,235,3.915,805,4.791,806,4.791,807,6.518,808,4.791]],["t/293",[1,0.194,181,2.48]],["t/295",[1,0.194,181,2.48]],["t/297",[1,0.194,551,6.439]],["t/299",[1,0.166,433,6.439,809,7.238]],["t/301",[1,0.191,104,4.092,156,2.865]],["t/303",[1,0.17,810,7.427]],["t/305",[1,0.198,156,2.93,210,4.111,367,3.914,435,4.806,811,4.56,812,4.56,813,4.56,814,6.3,815,4.56,816,4.56,817,4.56,818,4.56]],["t/307",[1,0.209,111,2.663,156,2.423,181,1.446,231,2.754,367,2.288,389,4.294,562,2.884,819,4.22,820,4.22,821,4.22,822,4.22,823,4.22,824,5.969,825,4.22,826,3.755]],["t/309",[1,0.214,2,0.981,66,1.342,98,5.18,156,2.545,181,1.214,193,1.163,194,1.908,196,2.55,210,2.955,248,1.543,258,1.543,367,2.851,389,2.55,435,1.636,593,1.908,826,1.908,827,2.145,828,2.145,829,2.145,830,2.145,831,3.544,832,2.145,833,2.145,834,2.145,835,2.895,836,2.145,837,2.145,838,2.145,839,2.145,840,2.145,841,2.145,842,2.145,843,2.145,844,1.908,845,2.145,846,2.145]],["t/311",[1,0.206,118,3.992,156,2.807,181,1.793,367,2.838,421,4.656,835,6.328,847,5.233,848,5.233]],["t/313",[1,0.212,111,2.138,156,3.007,210,3.126,367,4.016,389,3.447,435,3.655,835,3.915,844,4.263]]],"invertedIndex":[["",{"_index":1,"t":{"5":{"position":[[11,1],[13,3],[19,2]]},"7":{"position":[[10,1],[12,3],[18,2]]},"9":{"position":[[11,1],[13,3],[19,2]]},"11":{"position":[[62,2],[196,2]]},"15":{"position":[[52,2],[68,1]]},"18":{"position":[[11,1],[13,3],[19,2]]},"20":{"position":[[11,1],[13,3],[19,2]]},"22":{"position":[[11,1],[13,3],[19,2]]},"30":{"position":[[0,39],[40,27],[100,24]]},"32":{"position":[[41,7]]},"34":{"position":[[10,29],[91,30]]},"36":{"position":[[13,24],[38,26],[93,25]]},"38":{"position":[[0,6],[26,7],[34,1],[68,1],[102,1],[116,10],[127,11]]},"40":{"position":[[0,5],[49,5],[94,6],[101,10],[112,6],[119,5]]},"42":{"position":[[50,1],[96,1],[135,1],[137,9],[172,1],[220,1],[243,62]]},"44":{"position":[[8,4]]},"46":{"position":[[37,1],[39,7],[52,11]]},"48":{"position":[[19,1],[41,1],[244,2],[476,8],[485,1],[487,27]]},"50":{"position":[[8,4],[25,9],[49,7]]},"52":{"position":[[0,3],[27,28],[79,1],[139,2],[142,3],[167,5],[179,18],[236,5],[247,7],[276,8],[285,3],[294,13]]},"54":{"position":[[0,26],[31,1],[40,44],[91,3],[114,1],[128,9],[143,11],[160,3]]},"56":{"position":[[0,20],[21,22],[50,3],[74,24],[105,10],[124,21],[146,7],[154,16],[174,8],[221,6],[243,23],[267,7],[289,1],[298,7],[329,23],[369,5],[385,4],[398,1],[420,3],[429,3],[441,5],[478,17],[496,10],[507,9],[664,9],[674,12],[698,3],[743,10],[759,13],[778,11],[804,4],[812,2],[829,1],[837,3],[841,9],[911,8],[944,9],[960,8],[972,1],[987,5],[993,12],[1012,9],[1035,3],[1053,14],[1112,1],[1144,1],[1202,1],[1204,2],[1207,4],[1212,5],[1224,2],[1241,18]]},"58":{"position":[[8,4]]},"60":{"position":[[8,4]]},"62":{"position":[[0,46],[139,49]]},"64":{"position":[[66,53],[120,2],[143,1],[158,5],[164,9],[174,2],[182,1],[195,2],[198,12],[211,13],[225,4],[230,6],[243,10],[254,20],[275,3],[279,11],[291,20],[312,3],[327,2],[334,12],[347,22],[370,5],[376,14],[391,13],[409,3],[413,4],[418,3],[431,6],[438,15],[477,7],[488,73],[562,13],[576,33],[612,10],[626,1],[630,1],[632,2],[635,109],[745,18],[796,6],[805,5],[811,1],[816,10],[827,1],[832,5],[840,10],[851,1],[856,9],[868,10],[879,5],[887,5],[896,28],[925,148],[1074,23],[1098,2],[1130,1],[1376,25],[1405,5],[1428,13],[1486,14],[1518,22],[1564,13],[1582,33],[1622,6],[1655,4],[1687,2],[1696,16],[1750,10],[1780,2],[1786,15],[1828,2],[1833,43],[1885,15],[1905,8],[1914,9],[2013,8],[2028,3],[2032,5],[2042,18],[2071,1],[2086,16],[2103,15],[2127,3],[2138,4],[2147,3],[2158,2],[2163,1],[2167,5],[2189,3],[2195,1],[2199,5],[2218,34],[2262,1],[2268,7],[2285,19],[2309,7],[2322,7],[2346,29],[2376,2],[2383,13],[2414,8],[2455,1],[2487,1],[2509,1],[2548,1],[2635,2],[2663,5],[2774,9],[2784,22],[2834,10],[2849,10],[2865,7],[2902,37]]},"66":{"position":[[0,6],[35,2],[57,23],[82,1],[84,3],[89,1],[91,35],[134,2],[138,1],[140,1],[159,1],[219,1],[267,1],[352,13],[366,5],[372,3],[393,1],[404,14],[419,7],[436,1],[465,33],[499,7],[516,1],[557,11],[574,5],[655,1],[709,39],[749,5],[755,17],[806,4],[870,26],[897,4],[920,1],[922,1],[942,1],[1027,1],[1096,1],[1161,1],[1168,1],[1215,5],[1232,29],[1262,31],[1294,4],[1315,12],[1328,4],[1357,12],[1370,3],[1400,16],[1461,43],[1538,1],[1540,1],[1542,2],[1545,3],[1559,17],[1583,4],[1633,2],[1709,1],[1791,1],[1793,3],[1797,42],[1840,16],[1857,12],[1915,2]]},"68":{"position":[[30,6],[64,18],[135,4],[164,21],[206,6],[231,8],[240,2],[294,1],[348,2],[395,35],[522,1],[524,1],[526,2],[529,12],[563,2],[582,1],[584,1],[586,2],[589,6],[617,3],[731,4],[736,31],[842,52]]},"70":{"position":[[5,8],[19,1],[37,10],[107,8],[121,17],[156,10],[172,2],[181,4],[208,1],[212,83],[296,12],[309,8],[354,7],[375,3],[379,45],[425,20],[455,9],[465,14],[511,6],[524,31],[565,4],[570,6],[593,3],[610,47],[658,4],[775,1],[782,77],[864,12],[877,34],[917,4],[964,14],[979,5],[1020,11],[1045,24],[1108,12],[1139,1],[1160,1],[1295,1],[1317,1],[1441,1],[1443,14],[1458,14],[1491,5],[1502,3],[1521,13],[1548,6],[1555,9],[1578,10],[1609,10],[1669,3],[1687,3],[1706,18],[1730,12],[1743,4],[1852,4],[1882,37],[1925,8],[1956,1],[1993,4],[2039,5],[2047,10],[2101,6],[2117,1],[2284,4],[2311,28],[2356,11],[2382,18],[2408,3],[2438,21],[2498,1],[2510,1],[2539,9],[2552,2],[2571,28],[2603,9],[2613,55],[2669,18],[2701,19],[2763,15],[2787,28],[2885,46],[2932,10],[2943,5],[3095,5],[3117,22],[3156,15],[3194,20],[3276,12],[3289,5],[3295,7],[3312,1],[3357,1],[3370,17],[3388,16],[3405,5],[3493,7],[3531,1]]},"72":{"position":[[8,4],[20,5]]},"74":{"position":[[8,4],[25,13]]},"76":{"position":[[0,73],[150,5],[176,6],[202,72]]},"78":{"position":[[0,5],[6,2],[17,58],[76,2],[105,33]]},"80":{"position":[[186,1],[188,2],[191,10],[220,11],[357,19],[419,1],[421,2],[424,4],[439,21],[528,2],[531,28],[560,2],[598,2],[698,16]]},"82":{"position":[[0,28],[134,5],[257,1],[274,5],[283,4],[332,1],[366,1],[368,9],[384,6],[469,5],[496,18],[658,2],[661,2],[722,1],[757,1],[759,3],[763,1],[765,17],[793,7],[807,2],[841,3],[845,1],[856,15],[885,7],[899,2],[981,1],[1054,1],[1101,1],[1152,2],[1158,5],[1255,1],[1300,2],[1303,4],[1320,1],[1337,3],[1399,1],[1420,1],[1458,1],[1493,1],[1495,2],[1544,2],[1552,2],[1592,2],[1601,1],[1651,2],[1697,1],[1699,2],[1754,2],[1762,2],[1805,2],[1814,1],[1873,2],[1925,1],[1927,2]]},"84":{"position":[[8,4]]},"88":{"position":[[8,4]]},"90":{"position":[[0,25],[26,35],[62,56],[119,45]]},"92":{"position":[[0,76],[77,13],[91,44],[136,45],[182,55],[238,65]]},"94":{"position":[[0,26],[27,4],[50,13],[64,50],[115,6],[139,15],[173,13],[293,5],[299,2],[372,10],[383,92]]},"96":{"position":[[0,7],[57,7],[65,9],[119,16],[219,7],[227,15],[243,1],[261,5],[273,12],[294,18],[336,1],[345,32],[378,5],[384,15],[462,3],[542,47],[592,7],[600,3],[609,1],[617,27],[715,11],[745,16],[762,6],[774,20],[800,1],[812,36],[849,50],[959,3],[974,6],[981,19],[1019,26],[1081,33],[1125,2],[1132,1],[1138,24],[1163,25],[1200,16],[1217,55]]},"98":{"position":[[8,4]]},"100":{"position":[[8,4],[13,7],[23,13]]},"102":{"position":[[54,2],[58,1],[82,5],[88,71],[160,90],[251,47],[299,49],[357,76],[434,35]]},"104":{"position":[[0,4],[11,31],[48,1],[57,5],[63,4],[74,45],[120,4],[132,45],[195,4],[211,35]]},"106":{"position":[[0,48],[49,24],[74,16],[91,17],[109,46],[156,87],[244,58],[303,25],[329,4]]},"108":{"position":[[34,23],[58,19],[78,16],[95,15],[111,10],[189,9],[222,15]]},"110":{"position":[[8,4],[13,26]]},"112":{"position":[[0,69],[70,36],[107,2],[110,12],[123,50],[229,21]]},"114":{"position":[[0,43],[44,83],[128,67],[196,3],[200,9],[210,76],[287,3],[291,45]]},"116":{"position":[[0,22],[23,52],[175,90],[278,99],[468,47],[516,3],[520,67]]},"118":{"position":[[561,3]]},"120":{"position":[[144,25],[183,10],[199,48],[253,6],[265,9],[407,3]]},"122":{"position":[[157,38],[202,9],[224,4]]},"126":{"position":[[137,33],[321,120]]},"130":{"position":[[32,1],[145,27],[424,4],[429,3]]},"132":{"position":[[133,10],[144,33],[184,1],[247,1],[338,4],[343,69],[413,40]]},"136":{"position":[[60,23],[94,1],[107,1],[122,1],[137,1],[150,1],[162,1],[173,1],[175,4],[180,1],[192,1],[211,1],[213,4],[218,7],[236,1],[249,1],[260,1],[273,1],[288,1],[303,1],[315,1],[317,4],[322,1],[334,1],[353,1],[355,4],[360,15],[376,9],[538,45]]},"138":{"position":[[8,4],[13,4],[18,9]]},"140":{"position":[[8,4],[25,5]]},"142":{"position":[[8,4]]},"144":{"position":[[8,4],[13,12]]},"146":{"position":[[0,39],[40,27],[100,24]]},"148":{"position":[[41,7]]},"150":{"position":[[10,29],[91,30]]},"152":{"position":[[13,24],[38,26],[93,25]]},"154":{"position":[[0,6],[26,7],[34,1],[68,1],[102,1],[116,10],[127,11]]},"156":{"position":[[0,5],[49,5],[94,6],[101,10],[112,6],[119,5]]},"158":{"position":[[50,1],[96,1],[135,1],[137,9],[172,1],[220,1],[243,62]]},"160":{"position":[[8,4]]},"162":{"position":[[8,4]]},"164":{"position":[[8,4],[13,2],[21,1],[35,12]]},"166":{"position":[[0,6],[7,6],[14,4],[31,5],[41,8],[50,8],[71,2],[80,1],[92,1],[102,1],[104,16],[126,5],[132,3],[141,14],[197,7],[230,5],[266,2],[269,1],[278,4],[283,11],[295,14],[335,6],[342,6],[349,9],[364,32]]},"168":{"position":[[36,1],[76,1],[93,1],[105,1],[107,8],[116,23],[140,3],[144,2],[166,12]]},"170":{"position":[[15,1],[32,2],[43,4],[53,3],[57,1],[71,2],[79,9],[94,2],[107,2],[129,1],[131,1],[174,6],[193,1],[217,7],[225,8],[241,4],[250,3],[272,3]]},"172":{"position":[[51,4],[68,6],[85,4],[95,5],[117,8],[126,2],[134,9],[148,3],[152,5],[170,3],[178,15],[337,2],[347,13],[386,6],[398,5],[414,2],[417,8],[451,5],[457,4],[462,1],[471,25],[501,4],[518,13],[543,5],[559,23],[583,4],[607,2],[614,4],[687,9],[715,5],[739,7],[773,9]]},"174":{"position":[[0,2],[3,5],[9,2],[12,1],[51,4],[56,1],[58,3],[72,3],[94,1],[126,1],[147,2],[157,1],[166,6],[183,1],[221,2],[224,4],[244,6],[263,1],[265,2],[281,3],[290,3],[306,3],[317,6]]},"176":{"position":[[46,4]]},"178":{"position":[[0,2],[3,2],[6,7],[18,6],[43,26],[70,3],[84,3],[106,2],[114,6],[129,31],[175,9],[185,2],[201,4],[234,2],[249,15],[272,6],[309,6],[323,7],[341,1],[351,12]]},"180":{"position":[[0,6]]},"182":{"position":[[8,4],[13,9]]},"184":{"position":[[8,4],[13,15]]},"186":{"position":[[50,1],[94,1]]},"188":{"position":[[83,3],[108,1]]},"190":{"position":[[8,4],[13,5],[23,2]]},"192":{"position":[[0,83],[84,74],[159,15],[175,9],[224,2],[227,11],[271,1],[279,5],[315,6],[333,9],[367,16],[384,3],[413,3],[468,3],[496,1],[516,3],[560,1],[580,10],[648,6],[655,33],[689,26],[716,23],[740,6],[747,3],[779,4],[809,2],[812,21],[834,2]]},"194":{"position":[[8,4]]},"196":{"position":[[8,4]]},"199":{"position":[[0,3],[37,3],[79,5],[85,4],[90,1],[92,5],[98,1],[108,1],[110,4]]},"201":{"position":[[34,2]]},"203":{"position":[[0,19],[20,19],[40,20],[61,4],[66,1],[68,1],[76,1],[78,1],[87,2],[90,1],[92,1],[94,1],[96,1],[98,2],[101,15],[117,1],[119,1],[121,15],[137,1],[139,1],[141,15],[157,2],[160,1],[162,6],[169,1],[171,6],[178,1],[188,1],[190,1],[192,1],[194,1],[207,1],[209,2],[212,15],[228,1],[230,1],[232,15],[248,1],[250,1],[252,15],[268,2],[271,1],[273,1],[275,1],[277,1],[279,2],[282,15],[298,1],[300,1],[302,15],[318,1],[320,1],[322,15],[338,2],[341,1],[343,6],[350,1],[352,6],[359,1],[369,1],[371,6],[378,1],[391,1],[393,2],[396,15],[412,1],[414,1],[416,15],[432,1],[434,1],[436,15],[452,20],[473,19],[493,19],[513,1],[515,1],[517,19],[537,1],[539,5],[545,1],[547,1],[549,1],[551,1],[553,15],[569,1],[571,1],[587,1],[589,1],[591,1],[593,15],[609,1],[611,1],[613,1],[615,1],[617,15],[633,1],[635,1],[637,1],[647,1],[649,1],[651,1],[653,15],[669,1],[671,19]]},"205":{"position":[[85,4],[90,1],[151,3],[155,1],[222,1],[267,11],[279,1],[334,16],[351,1],[416,1],[473,1],[536,1],[593,1],[662,6],[669,1],[738,6],[745,1],[806,1],[834,1],[836,9],[846,9],[1025,9],[1035,8],[1044,17],[1164,9],[1174,9],[1184,15],[1200,10]]},"207":{"position":[[16,8],[25,6],[32,4],[37,5],[90,4],[122,4],[127,6]]},"209":{"position":[[58,7]]},"211":{"position":[[0,7],[8,31],[47,36],[84,12],[97,7],[105,15],[121,26],[155,18],[174,27],[202,2],[245,1],[337,2],[340,6],[430,1],[467,1],[483,1],[529,1],[531,3],[535,4],[583,1],[648,1],[689,2],[701,4],[706,1],[708,4],[713,4],[737,1],[757,2],[760,1],[766,2],[769,1],[771,5],[777,4],[782,3],[786,1],[788,2],[795,2],[798,11],[810,3],[814,11],[826,10],[837,3],[841,10],[852,14],[874,2],[889,7],[901,4],[913,4],[918,5],[924,16],[941,5],[954,6]]},"213":{"position":[[5,5],[11,11],[23,7],[41,6]]},"215":{"position":[[0,2],[9,4],[14,1],[40,16],[148,3],[152,7],[164,4],[169,6],[176,2],[188,1],[206,5],[212,15],[228,4],[244,1],[250,1],[256,1],[258,4],[263,5],[269,2],[276,19],[296,4],[303,12]]},"219":{"position":[[0,7]]},"221":{"position":[[0,71]]},"224":{"position":[[24,21]]},"226":{"position":[[0,16],[17,18],[65,27]]},"228":{"position":[[0,16],[17,16],[34,17],[52,18]]},"230":{"position":[[0,18],[19,20],[40,17],[58,17],[76,25],[102,1]]},"234":{"position":[[4,8],[13,4],[18,1],[20,9],[34,16],[62,3],[66,4],[71,1],[73,2],[133,24],[162,5],[168,4],[173,1],[175,2],[196,47],[250,5],[256,8],[265,1],[267,22],[294,5],[300,4],[305,1],[307,65],[373,4],[378,1],[380,22],[408,16],[429,7],[437,3],[441,1],[443,2],[456,58],[532,1],[534,17],[579,34]]},"236":{"position":[[24,8],[33,8]]},"240":{"position":[[70,15],[119,1],[131,4],[149,1],[151,1],[153,2],[160,3],[175,1],[177,1],[179,6],[190,3],[218,1],[220,1],[222,9],[289,1],[291,2],[298,14]]},"248":{"position":[[0,12],[13,1],[15,8],[34,1],[36,2],[44,7],[69,2],[72,1],[74,5],[80,1],[82,10],[93,2],[144,9]]},"250":{"position":[[16,4]]},"254":{"position":[[5,4]]},"256":{"position":[[5,4],[10,4],[15,9]]},"258":{"position":[[30,2],[48,6]]},"260":{"position":[[30,2]]},"263":{"position":[[0,10]]},"265":{"position":[[30,2],[33,8]]},"267":{"position":[[5,3],[24,8]]},"269":{"position":[[0,5],[32,9],[46,8],[55,4],[75,10],[90,5]]},"271":{"position":[[0,3],[27,1],[35,11],[62,2],[80,3],[88,18],[107,7],[115,2]]},"273":{"position":[[0,13]]},"275":{"position":[[5,2]]},"277":{"position":[[0,16],[22,20],[51,44]]},"279":{"position":[[0,4],[10,6],[42,4],[47,4],[52,20],[73,21],[95,6],[102,8],[115,2],[118,4],[128,12],[141,4],[146,19],[166,11],[178,4],[183,2],[197,13],[211,15],[227,6],[257,6],[264,24],[289,7],[297,4],[314,11],[326,14],[341,4],[346,12],[359,11],[371,4],[386,17],[404,21]]},"281":{"position":[[0,2],[11,10],[232,3],[236,4],[245,10],[256,21],[278,3],[290,2],[312,2],[315,12],[331,6]]},"283":{"position":[[0,12],[13,13],[27,12],[48,1],[77,2],[80,12]]},"285":{"position":[[0,4],[5,4],[10,2],[13,10],[29,2],[46,4],[51,7],[67,11],[79,12],[97,2],[100,18],[119,13],[141,13],[155,12],[173,2],[176,2],[185,1],[193,13],[207,15],[231,22]]},"287":{"position":[[5,27],[41,30],[100,7]]},"289":{"position":[[5,4]]},"291":{"position":[[0,7],[11,7],[19,2],[24,5],[44,2],[47,2],[70,1],[85,2],[123,18],[162,4],[167,9],[190,1],[192,26]]},"293":{"position":[[5,2],[8,3]]},"295":{"position":[[5,4],[10,5]]},"297":{"position":[[0,2],[13,6]]},"299":{"position":[[0,2]]},"301":{"position":[[0,2],[16,3]]},"303":{"position":[[0,2]]},"305":{"position":[[0,13],[22,2],[39,6],[55,1],[77,3],[221,2],[232,10]]},"307":{"position":[[0,10],[27,1],[52,5],[64,10],[80,7],[88,4],[109,2],[195,1],[197,3],[201,4],[218,8],[240,6]]},"309":{"position":[[38,18],[101,14],[116,15],[148,6],[162,4],[204,13],[246,13],[315,2],[330,1],[348,1],[363,15],[395,1],[402,4],[413,1],[464,16],[481,21],[508,2],[579,2],[582,10],[672,1],[674,2],[680,4],[694,1],[703,2],[720,1],[736,2],[742,1],[786,4],[791,2],[794,4],[806,3],[858,1],[876,1],[878,3],[882,1],[970,2],[992,8],[1050,1],[1052,5],[1064,16],[1096,11]]},"311":{"position":[[0,1],[14,33],[63,9],[73,13],[130,1],[143,5],[201,21]]},"313":{"position":[[0,8],[27,7],[55,21],[77,7],[97,3],[111,6],[134,4],[145,4],[150,20],[186,7],[206,28]]}}}],["0",{"_index":231,"t":{"64":{"position":[[1831,1],[2073,7],[2165,1],[2182,2],[2197,1],[2740,13]]},"70":{"position":[[206,1]]},"82":{"position":[[255,1]]},"96":{"position":[[693,1]]},"205":{"position":[[324,1]]},"215":{"position":[[20,19]]},"307":{"position":[[193,1]]}}}],["0.2",{"_index":720,"t":{"207":{"position":[[732,3]]}}}],["0.5",{"_index":716,"t":{"207":{"position":[[552,3]]}}}],["0.7",{"_index":707,"t":{"207":{"position":[[363,3]]}}}],["01",{"_index":103,"t":{"28":{"position":[[14,2]]}}}],["04b092c30ff6",{"_index":690,"t":{"205":{"position":[[1101,13],[1236,13]]}}}],["05",{"_index":85,"t":{"24":{"position":[[282,2],[304,2]]}}}],["06",{"_index":101,"t":{"26":{"position":[[11,2]]}}}],["07",{"_index":102,"t":{"28":{"position":[[11,2]]}}}],["0end",{"_index":250,"t":{"64":{"position":[[2761,4]]}}}],["0，就给我一个，并把总数减一；如果等于0",{"_index":232,"t":{"64":{"position":[[1941,71]]}}}],["1",{"_index":2,"t":{"5":{"position":[[17,1]]},"7":{"position":[[16,1]]},"9":{"position":[[17,1]]},"18":{"position":[[17,1]]},"22":{"position":[[17,1]]},"46":{"position":[[10,2]]},"56":{"position":[[171,2]]},"64":{"position":[[454,22],[610,1],[623,2],[628,1],[764,31],[1402,2],[1783,2],[2131,2],[2151,2],[2161,1],[2193,1],[2215,2],[2716,7]]},"66":{"position":[[127,6]]},"68":{"position":[[213,7]]},"70":{"position":[[139,16]]},"82":{"position":[[280,2]]},"106":{"position":[[334,113]]},"116":{"position":[[166,8]]},"128":{"position":[[423,1]]},"205":{"position":[[976,1],[1023,1],[1162,1]]},"211":{"position":[[205,2]]},"309":{"position":[[677,2]]}}}],["1)local",{"_index":239,"t":{"64":{"position":[[2431,19]]}}}],["1.0.0",{"_index":767,"t":{"240":{"position":[[270,5]]}}}],["10",{"_index":131,"t":{"42":{"position":[[217,2]]},"64":{"position":[[485,2],[893,2]]},"124":{"position":[[239,3]]},"158":{"position":[[217,2]]},"213":{"position":[[0,4]]},"215":{"position":[[145,2]]}}}],["100",{"_index":301,"t":{"68":{"position":[[909,49]]},"205":{"position":[[1062,13]]}}}],["1000",{"_index":126,"t":{"42":{"position":[[130,4]]},"158":{"position":[[130,4]]},"192":{"position":[[185,4],[257,7],[485,4],[549,4]]},"207":{"position":[[714,4]]}}}],["1048576",{"_index":121,"t":{"42":{"position":[[42,7]]},"158":{"position":[[42,7]]}}}],["10m",{"_index":514,"t":{"124":{"position":[[274,3]]}}}],["10万条数据）快速拆分成多个小任务（如100个1000",{"_index":109,"t":{"34":{"position":[[40,50]]},"150":{"position":[[40,50]]}}}],["11",{"_index":478,"t":{"112":{"position":[[174,54]]},"136":{"position":[[0,59]]}}}],["120000",{"_index":705,"t":{"207":{"position":[[343,6]]}}}],["123456789",{"_index":683,"t":{"205":{"position":[[978,9]]}}}],["127.0.0.1",{"_index":821,"t":{"307":{"position":[[138,9]]}}}],["1500",{"_index":717,"t":{"207":{"position":[[568,4]]}}}],["180000",{"_index":715,"t":{"207":{"position":[[532,6]]}}}],["1e56ec87d7nh.jpg",{"_index":621,"t":{"186":{"position":[[212,18]]}}}],["1els",{"_index":249,"t":{"64":{"position":[[2731,5]]}}}],["1h",{"_index":517,"t":{"124":{"position":[[286,2]]}}}],["1m",{"_index":505,"t":{"124":{"position":[[247,2]]}}}],["1到2^53",{"_index":609,"t":{"186":{"position":[[52,6]]}}}],["1范围内的整数（即number.max_safe_integ",{"_index":610,"t":{"186":{"position":[[61,32]]}}}],["1）时，它允许多达n个线程并发访问。这通常不用于保护共享变量，而是用于管理有限的资源池，如数据库连接、或限制对某个api",{"_index":366,"t":{"70":{"position":[[3533,68]]}}}],["1，远超javascript",{"_index":629,"t":{"188":{"position":[[29,28]]}}}],["2",{"_index":193,"t":{"56":{"position":[[809,2]]},"64":{"position":[[885,1],[1877,7]]},"66":{"position":[[630,6]]},"68":{"position":[[431,13]]},"70":{"position":[[2045,1]]},"82":{"position":[[466,2]]},"106":{"position":[[448,71]]},"116":{"position":[[266,11]]},"188":{"position":[[76,6]]},"205":{"position":[[1115,1]]},"211":{"position":[[366,2]]},"309":{"position":[[739,2]]}}}],["2.1",{"_index":747,"t":{"234":{"position":[[0,3]]}}}],["2.2",{"_index":750,"t":{"234":{"position":[[158,3]]}}}],["2.3",{"_index":752,"t":{"234":{"position":[[290,3]]}}}],["2.4",{"_index":753,"t":{"234":{"position":[[425,3]]}}}],["200",{"_index":636,"t":{"192":{"position":[[273,5],[285,10],[343,11],[498,11],[510,5],[562,11],[574,5],[591,16]]},"240":{"position":[[186,3]]}}}],["2000",{"_index":709,"t":{"207":{"position":[[379,4]]}}}],["2019",{"_index":84,"t":{"24":{"position":[[277,4],[299,4]]}}}],["2019年5月28",{"_index":17,"t":{"9":{"position":[[0,10]]},"22":{"position":[[0,10]]}}}],["2019年5月29",{"_index":65,"t":{"20":{"position":[[0,10]]}}}],["2021年8月1",{"_index":16,"t":{"7":{"position":[[0,9]]}}}],["2021年8月26",{"_index":0,"t":{"5":{"position":[[0,10]]},"18":{"position":[[0,10]]}}}],["2025",{"_index":100,"t":{"26":{"position":[[6,4]]},"28":{"position":[[6,4]]}}}],["20m",{"_index":515,"t":{"124":{"position":[[278,3]]}}}],["20分钟取消订单，那就发一个延迟20分钟的延迟消息，然后在20",{"_index":502,"t":{"124":{"position":[[99,98]]}}}],["2^53",{"_index":608,"t":{"186":{"position":[[45,4]]}}}],["2^63到2^63",{"_index":628,"t":{"188":{"position":[[19,9]]}}}],["2h",{"_index":518,"t":{"124":{"position":[[289,19]]}}}],["2m",{"_index":506,"t":{"124":{"position":[[250,2]]}}}],["3",{"_index":66,"t":{"20":{"position":[[17,1]]},"56":{"position":[[969,2]]},"64":{"position":[[2766,7]]},"70":{"position":[[2281,2]]},"82":{"position":[[1155,2]]},"116":{"position":[[378,11]]},"211":{"position":[[540,2]]},"309":{"position":[[973,2]]}}}],["3.1.1",{"_index":386,"t":{"82":{"position":[[127,6]]}}}],["3.1.2",{"_index":388,"t":{"82":{"position":[[267,6]]}}}],["30",{"_index":86,"t":{"24":{"position":[[285,2],[307,2]]},"26":{"position":[[14,2]]},"124":{"position":[[243,3]]}}}],["30m",{"_index":516,"t":{"124":{"position":[[282,3]]}}}],["380",{"_index":602,"t":{"178":{"position":[[39,3]]}}}],["3ae9",{"_index":618,"t":{"186":{"position":[[197,4]]}}}],["3m",{"_index":507,"t":{"124":{"position":[[253,2]]}}}],["4",{"_index":223,"t":{"64":{"position":[[1446,11],[1516,1],[1682,2],[1728,1],[1939,1],[2822,2],[2894,2]]},"70":{"position":[[2549,2]]},"116":{"position":[[458,9]]},"205":{"position":[[1015,1]]},"207":{"position":[[325,1]]}}}],["429",{"_index":333,"t":{"70":{"position":[[1934,3]]}}}],["43b3",{"_index":619,"t":{"186":{"position":[[202,4]]}}}],["452e",{"_index":688,"t":{"205":{"position":[[1091,4],[1226,4]]}}}],["4837",{"_index":624,"t":{"186":{"position":[[260,4]]}}}],["48e9",{"_index":614,"t":{"186":{"position":[[144,4]]}}}],["49天，超过这个时间就会被立即消费。但是他基于rabbitmq",{"_index":532,"t":{"128":{"position":[[425,54]]}}}],["4b4153d470nh.jpg",{"_index":616,"t":{"186":{"position":[[154,18]]}}}],["4c47",{"_index":623,"t":{"186":{"position":[[255,4]]}}}],["4d87",{"_index":687,"t":{"205":{"position":[[1086,4],[1221,4]]}}}],["4m",{"_index":508,"t":{"124":{"position":[[256,2]]}}}],["5",{"_index":129,"t":{"42":{"position":[[170,1]]},"64":{"position":[[803,1],[838,1],[866,1],[1541,13],[1685,1],[1730,19]]},"96":{"position":[[590,1]]},"158":{"position":[[170,1]]},"207":{"position":[[398,1]]},"215":{"position":[[104,1]]}}}],["5.0之前，这个消息是通过pub/sub模式发出的，他不会做持久化，至于你有没有接到，有没有消费成功，他不管。也就是说，如果发消息的时候，你的客户端挂了，之后再恢复的话，这个消息你就彻底丢失了。（在redi",{"_index":539,"t":{"130":{"position":[[292,104]]}}}],["5.0之后，因为引入了stream",{"_index":540,"t":{"130":{"position":[[397,26]]}}}],["500",{"_index":336,"t":{"70":{"position":[[1958,3]]}}}],["500m",{"_index":114,"t":{"38":{"position":[[17,8]]},"154":{"position":[[17,8]]}}}],["53b",{"_index":714,"t":{"207":{"position":[[518,4]]}}}],["59",{"_index":215,"t":{"64":{"position":[[813,2]]}}}],["5m",{"_index":509,"t":{"124":{"position":[[259,2]]}}}],["5s",{"_index":504,"t":{"124":{"position":[[236,2]]}}}],["6.30",{"_index":133,"t":{"46":{"position":[[0,4]]}}}],["60",{"_index":216,"t":{"64":{"position":[[829,2]]}}}],["600",{"_index":646,"t":{"192":{"position":[[628,19]]}}}],["61",{"_index":217,"t":{"64":{"position":[[853,2]]}}}],["6379",{"_index":823,"t":{"307":{"position":[[154,4]]}}}],["64位long",{"_index":627,"t":{"188":{"position":[[0,18]]}}}],["6d18",{"_index":613,"t":{"186":{"position":[[139,4]]}}}],["6m",{"_index":510,"t":{"124":{"position":[[262,2]]}}}],["7",{"_index":134,"t":{"46":{"position":[[7,2]]}}}],["7.2",{"_index":136,"t":{"46":{"position":[[47,4]]}}}],["7.3",{"_index":137,"t":{"46":{"position":[[64,3]]}}}],["7.4",{"_index":138,"t":{"46":{"position":[[70,4]]}}}],["754",{"_index":607,"t":{"186":{"position":[[26,18]]}}}],["7m",{"_index":511,"t":{"124":{"position":[[265,2]]}}}],["8",{"_index":124,"t":{"42":{"position":[[94,1]]},"158":{"position":[[94,1]]}}}],["800",{"_index":634,"t":{"192":{"position":[[220,3],[267,3],[322,10],[355,11],[492,3],[556,3]]}}}],["800元（总共1600",{"_index":645,"t":{"192":{"position":[[608,19]]}}}],["8a70",{"_index":620,"t":{"186":{"position":[[207,4]]}}}],["8m",{"_index":512,"t":{"124":{"position":[[268,2]]}}}],["8个消费者线程并发处理，充分利用cpu",{"_index":110,"t":{"34":{"position":[[122,29]]},"150":{"position":[[122,29]]}}}],["90000",{"_index":719,"t":{"207":{"position":[[696,5]]}}}],["9007199254740991",{"_index":611,"t":{"186":{"position":[[96,18]]}}}],["987654321",{"_index":691,"t":{"205":{"position":[[1117,9]]}}}],["9m",{"_index":513,"t":{"124":{"position":[[271,2]]}}}],["a510",{"_index":625,"t":{"186":{"position":[[265,4]]}}}],["acceptbatchno",{"_index":632,"t":{"188":{"position":[[149,14]]}}}],["ack",{"_index":112,"t":{"36":{"position":[[65,27]]},"152":{"position":[[65,27]]}}}],["acquir",{"_index":255,"t":{"66":{"position":[[150,8],[207,11],[427,8],[507,8]]},"70":{"position":[[3106,10]]}}}],["acquiredresourc",{"_index":269,"t":{"66":{"position":[[637,16]]}}}],["acquiredresource（在这里就是modelkey",{"_index":272,"t":{"66":{"position":[[773,32]]}}}],["acquire）、“使用资源创建流”（callmodel）、“释放资源”**（releas",{"_index":300,"t":{"68":{"position":[[768,73]]}}}],["action",{"_index":470,"t":{"104":{"position":[[125,6],[178,16]]}}}],["ad",{"_index":79,"t":{"24":{"position":[[194,5]]}}}],["add",{"_index":73,"t":{"24":{"position":[[111,3]]}}}],["adipisc",{"_index":44,"t":{"13":{"position":[[45,10]]},"15":{"position":[[160,10],[339,10],[518,10],[697,10],[876,10],[1055,10],[1234,10],[1413,10],[1592,10],[1771,10],[1950,10],[2129,10],[2308,10],[2487,10],[2666,10],[2845,10]]}}}],["ai",{"_index":139,"t":{"46":{"position":[[75,9]]},"58":{"position":[[29,7]]},"66":{"position":[[867,2]]},"68":{"position":[[0,14],[93,41]]},"70":{"position":[[1768,28],[2011,22]]},"166":{"position":[[156,2]]},"172":{"position":[[194,2]]},"196":{"position":[[13,16]]},"203":{"position":[[80,6]]},"207":{"position":[[189,2]]},"215":{"position":[[57,2]]},"232":{"position":[[5,2]]},"234":{"position":[[453,2]]},"240":{"position":[[201,2],[236,2]]}}}],["ai.com/v1/summar",{"_index":712,"t":{"207":{"position":[[475,20]]}}}],["ai/stream",{"_index":327,"t":{"70":{"position":[[1473,10]]}}}],["ai:limiter:gpt",{"_index":225,"t":{"64":{"position":[[1501,14],[1666,15],[1713,14],[1924,14],[2807,14],[2878,15]]}}}],["ai_model",{"_index":660,"t":{"205":{"position":[[43,9]]}}}],["ai_model;cr",{"_index":659,"t":{"205":{"position":[[21,15]]}}}],["ai_model_cfg",{"_index":656,"t":{"203":{"position":[[573,13]]}}}],["aimodelreq",{"_index":146,"t":{"48":{"position":[[117,10],[128,11],[247,10],[258,29]]},"199":{"position":[[4,32]]}}}],["aimodelservice.invokeaimodel(jobid",{"_index":323,"t":{"70":{"position":[[1319,35]]}}}],["aimodelserviceimpl",{"_index":847,"t":{"311":{"position":[[87,32]]}}}],["aimodelstrageti",{"_index":257,"t":{"66":{"position":[[186,17]]}}}],["aimodelstragety.callmodel",{"_index":273,"t":{"66":{"position":[[811,37]]},"68":{"position":[[472,30]]},"70":{"position":[[480,30]]}}}],["aimodelstragety.callmodel(...);semaphore.releas",{"_index":294,"t":{"68":{"position":[[296,51]]}}}],["aimodelstragety.callmodel(aimessagedto",{"_index":270,"t":{"66":{"position":[[657,39]]}}}],["ai大模型调用时候rediss",{"_index":206,"t":{"60":{"position":[[13,26]]}}}],["ai模型实现被封装在各自的策略类（aimodelstragety）中，servic",{"_index":208,"t":{"62":{"position":[[189,93]]}}}],["ai模型（openai、claud",{"_index":651,"t":{"201":{"position":[[0,29]]}}}],["alert('button",{"_index":34,"t":{"11":{"position":[[199,13]]}}}],["aliquam",{"_index":54,"t":{"13":{"position":[[138,7]]},"15":{"position":[[253,7],[432,7],[611,7],[790,7],[969,7],[1148,7],[1327,7],[1506,7],[1685,7],[1864,7],[2043,7],[2222,7],[2401,7],[2580,7],[2759,7],[2938,7]]}}}],["alpha.46",{"_index":768,"t":{"240":{"position":[[276,8]]}}}],["amet",{"_index":42,"t":{"13":{"position":[[22,7],[179,4]]},"15":{"position":[[142,5],[294,4],[321,5],[473,4],[500,5],[652,4],[679,5],[831,4],[858,5],[1010,4],[1037,5],[1189,4],[1216,5],[1368,4],[1395,5],[1547,4],[1574,5],[1726,4],[1753,5],[1905,4],[1932,5],[2084,4],[2111,5],[2263,4],[2290,5],[2442,4],[2469,5],[2621,4],[2648,5],[2800,4],[2827,5],[2979,4]]}}}],["andexpect(jsonpath(\"$.code\").value(\"0",{"_index":796,"t":{"281":{"position":[[189,42]]}}}],["andexpect(status().isok",{"_index":795,"t":{"281":{"position":[[161,27]]}}}],["anygett",{"_index":773,"t":{"248":{"position":[[52,12]]}}}],["anysett",{"_index":772,"t":{"248":{"position":[[24,9]]}}}],["aof",{"_index":464,"t":{"96":{"position":[[1134,3]]}}}],["api",{"_index":392,"t":{"82":{"position":[[401,3]]},"203":{"position":[[70,5],[180,7],[203,3],[361,7],[387,3]]},"207":{"position":[[237,3],[427,3],[599,3]]},"234":{"position":[[30,3]]}}}],["apikey",{"_index":411,"t":{"82":{"position":[[998,7],[1118,7]]}}}],["apikey、endpoint、modelnam",{"_index":571,"t":{"168":{"position":[[0,35]]}}}],["apisecret",{"_index":412,"t":{"82":{"position":[[1021,10]]},"166":{"position":[[82,9]]},"168":{"position":[[95,9]]}}}],["apis这个sdk，能自动配置好openfeign客户端。这样一来，主项目就可以像调用本地方法一样，轻松地调用公司内部其他微服务提供的api",{"_index":439,"t":{"86":{"position":[[161,85]]}}}],["api：它还集成了common",{"_index":438,"t":{"86":{"position":[[138,22]]}}}],["appid",{"_index":413,"t":{"82":{"position":[[1047,6]]},"166":{"position":[[74,5]]},"168":{"position":[[78,14]]}}}],["applic",{"_index":390,"t":{"82":{"position":[[334,11]]},"108":{"position":[[138,31]]}}}],["application.properti",{"_index":819,"t":{"307":{"position":[[29,22]]}}}],["application.yml",{"_index":389,"t":{"82":{"position":[[288,17]]},"172":{"position":[[101,15]]},"307":{"position":[[11,15],[93,15]]},"309":{"position":[[332,15],[760,25]]},"313":{"position":[[118,15]]}}}],["applicationservic",{"_index":808,"t":{"291":{"position":[[88,34]]}}}],["argv[1",{"_index":238,"t":{"64":{"position":[[2423,7]]}}}],["artifactid>redisson",{"_index":816,"t":{"305":{"position":[[130,20]]}}}],["asynchron",{"_index":340,"t":{"70":{"position":[[2070,12]]}}}],["atm",{"_index":633,"t":{"192":{"position":[[190,29],[476,8]]}}}],["atm机也读取了账户余额：1000",{"_index":641,"t":{"192":{"position":[[421,46]]}}}],["atm机基于它在t2",{"_index":644,"t":{"192":{"position":[[524,24]]}}}],["atm机读取了账户余额：1000",{"_index":639,"t":{"192":{"position":[[392,20]]}}}],["atm机读取余额：1000",{"_index":635,"t":{"192":{"position":[[239,17]]}}}],["atm机读取余额：200",{"_index":637,"t":{"192":{"position":[[296,18]]}}}],["atom",{"_index":648,"t":{"192":{"position":[[784,7]]}}}],["author",{"_index":78,"t":{"24":{"position":[[179,7]]}}}],["authors.yml",{"_index":80,"t":{"24":{"position":[[203,12]]}}}],["auto_incr",{"_index":661,"t":{"205":{"position":[[62,14]]}}}],["autowir",{"_index":421,"t":{"82":{"position":[[1341,10]]},"311":{"position":[[132,10]]}}}],["availablepermit",{"_index":245,"t":{"64":{"position":[[2531,16],[2597,16],[2618,16]]},"70":{"position":[[3256,19]]}}}],["await",{"_index":465,"t":{"98":{"position":[[13,33]]}}}],["b",{"_index":235,"t":{"64":{"position":[[2134,3],[2185,3]]},"102":{"position":[[60,1]]},"291":{"position":[[42,1]]}}}],["b73c",{"_index":689,"t":{"205":{"position":[[1096,4],[1231,4]]}}}],["backpressur",{"_index":350,"t":{"70":{"position":[[2555,15]]}}}],["baichuan",{"_index":713,"t":{"207":{"position":[[508,9]]}}}],["baichuan_summarization_v2",{"_index":710,"t":{"207":{"position":[[400,26]]}}}],["baidu",{"_index":698,"t":{"207":{"position":[[152,5]]}}}],["base",{"_index":339,"t":{"70":{"position":[[2064,5]]}}}],["batch",{"_index":119,"t":{"42":{"position":[[23,5],[73,5],[113,5]]},"158":{"position":[[23,5],[73,5],[113,5]]}}}],["bc4e",{"_index":615,"t":{"186":{"position":[[149,4]]}}}],["bean",{"_index":196,"t":{"56":{"position":[[920,16]]},"172":{"position":[[409,4],[710,4],[747,6]]},"174":{"position":[[46,4],[285,4]]},"248":{"position":[[139,4]]},"309":{"position":[[407,5],[1058,5]]}}}],["bean@conditionalonmissingbean(redissonclient.class",{"_index":833,"t":{"309":{"position":[[511,67]]}}}],["beanfactori",{"_index":604,"t":{"178":{"position":[[237,11]]}}}],["bigint",{"_index":663,"t":{"205":{"position":[[106,6]]}}}],["binder",{"_index":577,"t":{"170":{"position":[[140,6],[234,6]]},"172":{"position":[[330,6],[340,6],[441,9],[464,6],[598,8]]},"174":{"position":[[140,6],[159,6]]},"178":{"position":[[316,6]]}}}],["blog",{"_index":18,"t":{"11":{"position":[[0,4],[110,4]]},"15":{"position":[[35,4],[87,4]]},"24":{"position":[[11,8],[48,4],[150,4],[174,4],[220,4],[329,4],[377,4],[399,4],[451,5],[493,5]]}}}],["body(result",{"_index":326,"t":{"70":{"position":[[1426,14]]}}}],["boolean",{"_index":254,"t":{"66":{"position":[[142,7]]},"70":{"position":[[3013,7],[3172,7]]}}}],["boot",{"_index":367,"t":{"74":{"position":[[20,4]]},"84":{"position":[[35,4]]},"166":{"position":[[192,4]]},"170":{"position":[[66,4]]},"172":{"position":[[63,4],[165,4],[734,4]]},"174":{"position":[[301,4]]},"211":{"position":[[884,4]]},"305":{"position":[[64,4],[158,4],[250,16]]},"307":{"position":[[213,4]]},"309":{"position":[[25,4],[96,4],[325,4],[987,4]]},"311":{"position":[[9,4]]},"313":{"position":[[42,4],[92,4],[201,4]]}}}],["boot尝试将prefix指定的配置块绑定到java对象时，如果配置文件中缺少某个属性或一整个内嵌的配置块，它不会抛出异常。相应地，pojo对象中对应的字段会保持其java",{"_index":387,"t":{"82":{"position":[[148,95]]}}}],["bot",{"_index":700,"t":{"207":{"position":[[164,3]]}}}],["broker",{"_index":501,"t":{"124":{"position":[[40,58]]}}}],["bservic",{"_index":805,"t":{"291":{"position":[[30,11]]}}}],["buffer",{"_index":120,"t":{"42":{"position":[[29,6]]},"158":{"position":[[29,6]]}}}],["bug",{"_index":743,"t":{"217":{"position":[[8,9]]}}}],["bug！此时ai调用刚开始，许可就被释放了！return",{"_index":295,"t":{"68":{"position":[[351,29]]}}}],["build.gradl",{"_index":812,"t":{"305":{"position":[[25,13]]}}}],["businessexcept",{"_index":266,"t":{"66":{"position":[[539,17],[1615,17],[1636,20],[1897,17]]}}}],["businessexception(request_timeout",{"_index":259,"t":{"66":{"position":[[231,35]]}}}],["button",{"_index":32,"t":{"11":{"position":[[168,7],[176,7]]}}}],["ca",{"_index":434,"t":{"84":{"position":[[18,3]]}}}],["callmodel",{"_index":268,"t":{"66":{"position":[[586,43],[1347,9],[1549,9]]},"68":{"position":[[15,14],[83,9],[221,9]]},"70":{"position":[[2500,9]]},"211":{"position":[[514,14]]}}}],["callmodel(str",{"_index":727,"t":{"211":{"position":[[278,16]]}}}],["cas统一认证体系：它封装了与cas（中央认证服务）服务器对接的复杂逻辑。任何其他项目只要引入这个starter，就能快速地接入公司的统一登录系统，而不需要自己手动配置大量的ca",{"_index":437,"t":{"86":{"position":[[39,98]]}}}],["char(36",{"_index":680,"t":{"205":{"position":[[765,8]]}}}],["checkratelimit",{"_index":264,"t":{"66":{"position":[[376,16]]}}}],["checkratelimit(modelkey",{"_index":256,"t":{"66":{"position":[[161,24]]}}}],["ci",{"_index":799,"t":{"281":{"position":[[328,2]]}}}],["ci/cd",{"_index":803,"t":{"285":{"position":[[187,5]]}}}],["class",{"_index":160,"t":{"52":{"position":[[63,5]]},"80":{"position":[[165,5],[398,5]]},"82":{"position":[[737,5],[959,5],[1076,5],[1238,5]]},"211":{"position":[[384,5]]}}}],["classcastexcept",{"_index":176,"t":{"52":{"position":[[375,26]]}}}],["classpath",{"_index":829,"t":{"309":{"position":[[218,18]]}}}],["claud",{"_index":655,"t":{"203":{"position":[[380,6]]},"205":{"position":[[1152,6]]},"207":{"position":[[675,7]]}}}],["claude_content_review_v1",{"_index":692,"t":{"205":{"position":[[1127,24]]},"207":{"position":[[573,25]]}}}],["click",{"_index":37,"t":{"11":{"position":[[244,5]]}}}],["clicked!')}>click",{"_index":35,"t":{"11":{"position":[[213,17]]}}}],["close",{"_index":469,"t":{"104":{"position":[[50,6]]}}}],["cloud",{"_index":157,"t":{"52":{"position":[[11,5]]},"240":{"position":[[204,5],[239,5]]}}}],["co",{"_index":13,"t":{"5":{"position":[[98,2]]},"9":{"position":[[98,2]]},"18":{"position":[[98,2]]},"20":{"position":[[59,2]]},"22":{"position":[[98,2]]},"24":{"position":[[367,2]]}}}],["code",{"_index":164,"t":{"52":{"position":[[93,5]]}}}],["coder",{"_index":396,"t":{"82":{"position":[[459,6]]}}}],["comment",{"_index":60,"t":{"15":{"position":[[70,7]]},"205":{"position":[[77,7],[122,7],[190,7],[259,7],[326,7],[380,7],[437,7],[500,7],[559,7],[654,7],[730,7],[783,7],[826,7]]}}}],["conditionalonclass(redisson.class",{"_index":828,"t":{"309":{"position":[[167,36]]}}}],["conditionalonmissingbean(redissonclient.class",{"_index":832,"t":{"309":{"position":[[415,48]]}}}],["config",{"_index":98,"t":{"24":{"position":[[524,7]]},"309":{"position":[[696,6],[706,6],[713,6],[726,9],[799,6]]}}}],["config.usesingleserv",{"_index":838,"t":{"309":{"position":[[810,24]]}}}],["configur",{"_index":194,"t":{"56":{"position":[[858,14],[1039,13],[1130,13]]},"309":{"position":[[132,15]]}}}],["configurationproperti",{"_index":371,"t":{"78":{"position":[[79,25]]},"82":{"position":[[29,24]]},"170":{"position":[[147,26]]},"172":{"position":[[361,24]]},"178":{"position":[[206,27]]}}}],["configurationpropertiesbind",{"_index":594,"t":{"174":{"position":[[14,31]]}}}],["configurationproperties与@valu",{"_index":771,"t":{"244":{"position":[[12,34]]}}}],["configurationpubl",{"_index":373,"t":{"80":{"position":[[144,20],[377,20]]}}}],["consectetur",{"_index":43,"t":{"13":{"position":[[30,14]]},"15":{"position":[[148,11],[327,11],[506,11],[685,11],[864,11],[1043,11],[1222,11],[1401,11],[1580,11],[1759,11],[1938,11],[2117,11],[2296,11],[2475,11],[2654,11],[2833,11]]}}}],["consequat",{"_index":55,"t":{"13":{"position":[[146,10]]},"15":{"position":[[261,10],[440,10],[619,10],[798,10],[977,10],[1156,10],[1335,10],[1514,10],[1693,10],[1872,10],[2051,10],[2230,10],[2409,10],[2588,10],[2767,10],[2946,10]]}}}],["consum",{"_index":123,"t":{"42":{"position":[[79,8],[147,8],[195,8]]},"158":{"position":[[79,8],[147,8],[195,8]]}}}],["container）中，成为一个可以被全局注入的组件（bean",{"_index":846,"t":{"309":{"position":[[1123,33]]}}}],["content(\"{\\\"username\\\":\\\"admin\\\",\\\"password\\\":\\\"123456",{"_index":794,"t":{"281":{"position":[[99,61]]}}}],["contenttype(mediatype.application_json",{"_index":793,"t":{"281":{"position":[[58,40]]}}}],["contenttype(mediatype.text_plain",{"_index":325,"t":{"70":{"position":[[1391,34]]}}}],["control",{"_index":789,"t":{"279":{"position":[[186,10]]}}}],["conveni",{"_index":89,"t":{"24":{"position":[[353,10]]}}}],["conversionservic",{"_index":595,"t":{"174":{"position":[[76,17]]}}}],["convert",{"_index":589,"t":{"172":{"position":[[532,10],[549,9],[588,9],[619,9]]},"174":{"position":[[62,9],[96,9],[173,9],[211,9]]},"178":{"position":[[74,9],[331,9]]}}}],["converter转为jackson",{"_index":590,"t":{"172":{"position":[[629,42]]}}}],["convertor",{"_index":579,"t":{"172":{"position":[[0,22]]}}}],["core",{"_index":127,"t":{"42":{"position":[[156,4]]},"158":{"position":[[156,4]]}}}],["creat",{"_index":28,"t":{"11":{"position":[[91,6],[146,6]]}}}],["create_tim",{"_index":676,"t":{"205":{"position":[[595,13]]}}}],["crowd_resource_id",{"_index":455,"t":{"96":{"position":[[400,19],[522,19],[727,17],[939,19]]}}}],["crowd_resource_id。zset",{"_index":454,"t":{"96":{"position":[[313,22]]}}}],["cueword",{"_index":723,"t":{"209":{"position":[[109,52]]}}}],["current_timestamp",{"_index":459,"t":{"96":{"position":[[695,19]]},"205":{"position":[[636,17],[712,17]]}}}],["daili",{"_index":99,"t":{"26":{"position":[[0,5]]},"28":{"position":[[0,5]]}}}],["data",{"_index":168,"t":{"52":{"position":[[133,5],[289,4]]},"70":{"position":[[1762,5],[2349,6]]},"82":{"position":[[939,5],[1056,5]]}}}],["data@component@configurationproperties(prefix",{"_index":403,"t":{"82":{"position":[[671,50]]}}}],["databas",{"_index":825,"t":{"307":{"position":[[183,9]]}}}],["dataz+服务cpu",{"_index":559,"t":{"142":{"position":[[13,34]]}}}],["date",{"_index":81,"t":{"24":{"position":[[230,4]]}}}],["ddd",{"_index":804,"t":{"289":{"position":[[10,15]]}}}],["de93fd47",{"_index":686,"t":{"205":{"position":[[1076,9],[1211,9]]}}}],["decod",{"_index":179,"t":{"54":{"position":[[95,10]]},"56":{"position":[[291,6],[1260,18]]}}}],["decr",{"_index":234,"t":{"64":{"position":[[2081,4],[2173,8],[2205,8]]}}}],["deepseek",{"_index":370,"t":{"76":{"position":[[183,18]]},"82":{"position":[[306,25],[391,9],[414,8],[449,9],[847,8],[929,9],[1702,19]]},"207":{"position":[[43,8],[58,9],[95,8]]}}}],["deepseekapikey",{"_index":379,"t":{"80":{"position":[[340,16],[681,16]]}}}],["deepseekcli",{"_index":420,"t":{"82":{"position":[[1322,14]]}}}],["deepseekclient(llmproperties.getdeepseek",{"_index":432,"t":{"82":{"position":[[1880,44]]}}}],["deepseekproperti",{"_index":409,"t":{"82":{"position":[[910,18],[1082,18]]}}}],["default",{"_index":670,"t":{"205":{"position":[[316,7],[628,7],[704,7]]}}}],["delay",{"_index":529,"t":{"128":{"position":[[177,7],[333,7]]}}}],["delay_queue:annotation_releas",{"_index":451,"t":{"96":{"position":[[180,31],[471,30],[662,30],[908,30]]}}}],["delay_queue:{task_id",{"_index":450,"t":{"96":{"position":[[144,31]]}}}],["delayqueu",{"_index":484,"t":{"118":{"position":[[133,108]]},"120":{"position":[[359,47]]}}}],["delayqueue实现超时关单的方案，实现起来简单，不须要依赖第三方的框架和类库，jdk",{"_index":486,"t":{"118":{"position":[[326,54]]}}}],["delayqueue插入和删除操作的平均时间复杂度——o(nlog(n))，虽然已经挺好的了，但是时间轮的方案可以将插入和删除操作的时间复杂度都降为o(1",{"_index":489,"t":{"120":{"position":[[49,94]]}}}],["delayqueue是一个无界的blockingqueue，用于放置实现了delay",{"_index":483,"t":{"118":{"position":[[61,71]]}}}],["delayqueue的话，需要把订单放进去，那如果订单量太大的话，可能会导致oom的问题；另外，delayqueue是基于jvm内存的，一旦机器重启了，里面的数据就都没有了。虽然我们可以配合数据库的持久化一起使用。而且现在很多应用都是集群部署的，那么集群中多个实例上的多个delayqueu",{"_index":487,"t":{"118":{"position":[[381,179]]}}}],["delet",{"_index":96,"t":{"24":{"position":[[462,6]]}}}],["depend",{"_index":814,"t":{"305":{"position":[[85,12],[207,13]]}}}],["dignissim",{"_index":48,"t":{"13":{"position":[[85,9]]},"15":{"position":[[200,9],[379,9],[558,9],[737,9],[916,9],[1095,9],[1274,9],[1453,9],[1632,9],[1811,9],[1990,9],[2169,9],[2348,9],[2527,9],[2706,9],[2885,9]]}}}],["directori",{"_index":76,"t":{"24":{"position":[[155,10],[474,10]]}}}],["disruptor",{"_index":108,"t":{"34":{"position":[[0,9]]},"38":{"position":[[36,13],[50,17]]},"40":{"position":[[6,18],[55,18]]},"42":{"position":[[98,14]]},"150":{"position":[[0,9]]},"154":{"position":[[36,13],[50,17]]},"156":{"position":[[6,18],[55,18]]},"158":{"position":[[98,14]]}}}],["disruptor在这里做异步信息的导入，redi",{"_index":106,"t":{"32":{"position":[[0,33]]},"148":{"position":[[0,33]]}}}],["disruptor的ringbuff",{"_index":115,"t":{"40":{"position":[[125,26]]},"156":{"position":[[125,26]]}}}],["disruptor缓冲区大小(2^20",{"_index":122,"t":{"42":{"position":[[52,20]]},"158":{"position":[[52,20]]}}}],["dlx",{"_index":444,"t":{"94":{"position":[[155,17]]}}}],["docusauru",{"_index":5,"t":{"5":{"position":[[39,10]]},"7":{"position":[[38,10]]},"9":{"position":[[39,10]]},"11":{"position":[[19,10]]},"18":{"position":[[39,10]]},"22":{"position":[[39,10]]},"24":{"position":[[0,10],[513,10]]}}}],["dolor",{"_index":40,"t":{"13":{"position":[[12,5],[169,5]]},"15":{"position":[[132,5],[284,5],[311,5],[463,5],[490,5],[642,5],[669,5],[821,5],[848,5],[1000,5],[1027,5],[1179,5],[1206,5],[1358,5],[1385,5],[1537,5],[1564,5],[1716,5],[1743,5],[1895,5],[1922,5],[2074,5],[2101,5],[2253,5],[2280,5],[2432,5],[2459,5],[2611,5],[2638,5],[2790,5],[2817,5],[2969,5]]}}}],["don't",{"_index":94,"t":{"24":{"position":[[438,5]]}}}],["dooncancel",{"_index":298,"t":{"68":{"position":[[566,14]]}}}],["doonerror",{"_index":283,"t":{"66":{"position":[[1505,11]]}}}],["doonerror(throw",{"_index":284,"t":{"66":{"position":[[1517,19]]}}}],["doontermin",{"_index":297,"t":{"68":{"position":[[503,17]]}}}],["drop",{"_index":657,"t":{"205":{"position":[[0,4]]}}}],["e8b6085021nh.jpg",{"_index":626,"t":{"186":{"position":[[270,18]]}}}],["eclips",{"_index":475,"t":{"108":{"position":[[203,7]]}}}],["elementum",{"_index":47,"t":{"13":{"position":[[75,9]]},"15":{"position":[[190,9],[369,9],[548,9],[727,9],[906,9],[1085,9],[1264,9],[1443,9],[1622,9],[1801,9],[1980,9],[2159,9],[2338,9],[2517,9],[2696,9],[2875,9]]}}}],["elit",{"_index":45,"t":{"13":{"position":[[56,5]]},"15":{"position":[[171,5],[350,5],[529,5],[708,5],[887,5],[1066,5],[1245,5],[1424,5],[1603,5],[1782,5],[1961,5],[2140,5],[2319,5],[2498,5],[2677,5],[2856,5]]}}}],["enableconfigurationproperties(redisproperties.class",{"_index":830,"t":{"309":{"position":[[260,54]]}}}],["endpoint",{"_index":702,"t":{"207":{"position":[[253,9],[443,9],[615,9]]}}}],["engin",{"_index":12,"t":{"5":{"position":[[88,9]]},"9":{"position":[[88,9]]},"18":{"position":[[88,9]]},"20":{"position":[[49,9]]},"22":{"position":[[88,9]]}}}],["equals(aimodelreq.getprojectaimodelconfigrequest().getmodelname()),“大哥，你就拿名字和if",{"_index":207,"t":{"62":{"position":[[47,86]]}}}],["erni",{"_index":699,"t":{"207":{"position":[[158,5]]}}}],["ero",{"_index":53,"t":{"13":{"position":[[133,4]]},"15":{"position":[[248,4],[427,4],[606,4],[785,4],[964,4],[1143,4],[1322,4],[1501,4],[1680,4],[1859,4],[2038,4],[2217,4],[2396,4],[2575,4],[2754,4],[2933,4]]}}}],["error",{"_index":267,"t":{"66":{"position":[[580,5],[1745,10]]},"70":{"position":[[1875,6],[1978,14],[2430,7]]}}}],["eval",{"_index":236,"t":{"64":{"position":[[2317,4]]}}}],["event",{"_index":141,"t":{"48":{"position":[[21,10]]},"70":{"position":[[1838,13],[2289,6]]},"104":{"position":[[68,5]]},"130":{"position":[[69,6]]}}}],["events(@requestbodi",{"_index":145,"t":{"48":{"position":[[97,19]]}}}],["ex",{"_index":9,"t":{"5":{"position":[[74,2]]},"9":{"position":[[74,2]]},"18":{"position":[[74,2]]},"20":{"position":[[35,2]]},"22":{"position":[[74,2]]}}}],["exampl",{"_index":30,"t":{"11":{"position":[[126,8]]}}}],["exchang",{"_index":523,"t":{"126":{"position":[[171,10]]}}}],["exist",{"_index":228,"t":{"64":{"position":[[1647,7]]},"205":{"position":[[14,6]]}}}],["extra",{"_index":774,"t":{"248":{"position":[[154,15]]}}}],["extract",{"_index":82,"t":{"24":{"position":[[242,9]]}}}],["extraparam",{"_index":591,"t":{"172":{"position":[[697,12]]},"174":{"position":[[251,11]]},"178":{"position":[[364,12]]}}}],["ex开启过期监听，然后再代码中实现一个keyexpirationeventmessagelistener，就可以监听key",{"_index":537,"t":{"130":{"position":[[76,68]]}}}],["f",{"_index":765,"t":{"240":{"position":[[255,1],[319,2]]}}}],["fair",{"_index":358,"t":{"70":{"position":[[3021,34]]}}}],["fals",{"_index":97,"t":{"24":{"position":[[499,5]]},"66":{"position":[[518,20]]},"70":{"position":[[3238,13]]},"82":{"position":[[259,7]]}}}],["featur",{"_index":22,"t":{"11":{"position":[[39,9]]},"24":{"position":[[20,8]]}}}],["feigin",{"_index":777,"t":{"260":{"position":[[33,25]]}}}],["feign",{"_index":104,"t":{"30":{"position":[[68,31]]},"38":{"position":[[104,11]]},"50":{"position":[[13,11]]},"52":{"position":[[173,5]]},"54":{"position":[[85,5]]},"56":{"position":[[44,5],[99,5],[228,5],[283,5],[414,5],[831,5],[954,5],[1006,5],[1218,5]]},"146":{"position":[[68,31]]},"154":{"position":[[104,11]]},"258":{"position":[[33,5]]},"301":{"position":[[10,5]]}}}],["feign.codec.decod",{"_index":182,"t":{"56":{"position":[[54,19]]}}}],["feignclient",{"_index":197,"t":{"56":{"position":[[974,12],[1022,12]]}}}],["feignclient(nam",{"_index":199,"t":{"56":{"position":[[1094,17]]}}}],["feignconfigur",{"_index":195,"t":{"56":{"position":[[873,23]]}}}],["feignconfiguration.class",{"_index":198,"t":{"56":{"position":[[1068,25]]}}}],["feignconfiguration.class)publ",{"_index":202,"t":{"56":{"position":[[1146,31]]}}}],["feign、sentinel、naco",{"_index":776,"t":{"258":{"position":[[5,24]]},"260":{"position":[[5,24]]},"265":{"position":[[5,24]]}}}],["few",{"_index":69,"t":{"24":{"position":[[72,3]]}}}],["fifo",{"_index":359,"t":{"70":{"position":[[3056,38]]}}}],["file",{"_index":74,"t":{"24":{"position":[[124,5]]}}}],["filenam",{"_index":83,"t":{"24":{"position":[[257,10]]}}}],["filter",{"_index":312,"t":{"70":{"position":[[927,7]]}}}],["final",{"_index":418,"t":{"82":{"position":[[1265,5]]}}}],["find",{"_index":71,"t":{"24":{"position":[[91,4]]}}}],["flux",{"_index":263,"t":{"66":{"position":[[347,4],[569,4]]},"68":{"position":[[59,4]]},"70":{"position":[[0,4],[14,4],[116,4],[167,4],[518,5],[747,27],[912,4],[1620,43],[1664,4],[2306,4],[2512,4]]}}}],["flux.us",{"_index":252,"t":{"66":{"position":[[7,22],[1221,10]]},"68":{"position":[[140,23],[720,10],[895,13]]},"70":{"position":[[318,21],[577,15],[2460,10]]}}}],["flux<str",{"_index":144,"t":{"48":{"position":[[84,12]]},"66":{"position":[[849,17]]},"68":{"position":[[37,21]]},"70":{"position":[[362,12],[597,12],[1297,12],[1565,12]]}}}],["folder",{"_index":75,"t":{"24":{"position":[[134,8],[339,6]]}}}],["founder",{"_index":14,"t":{"5":{"position":[[101,7]]},"9":{"position":[[101,7]]},"18":{"position":[[101,7]]},"20":{"position":[[62,7]]},"22":{"position":[[101,7]]}}}],["fullprompt",{"_index":271,"t":{"66":{"position":[[697,11]]}}}],["fusc",{"_index":50,"t":{"13":{"position":[[106,5]]},"15":{"position":[[221,5],[400,5],[579,5],[758,5],[937,5],[1116,5],[1295,5],[1474,5],[1653,5],[1832,5],[2011,5],[2190,5],[2369,5],[2548,5],[2727,5],[2906,5]]}}}],["generictype）与我们的外层响应类（result.class",{"_index":189,"t":{"56":{"position":[[555,73]]}}}],["getmapping(valu",{"_index":314,"t":{"70":{"position":[[1121,17]]}}}],["getter",{"_index":169,"t":{"52":{"position":[[146,7]]}}}],["gpt",{"_index":222,"t":{"64":{"position":[[1442,3]]},"205":{"position":[[1011,3]]},"207":{"position":[[320,4]]},"211":{"position":[[476,6]]},"215":{"position":[[67,4]]}}}],["gpt4",{"_index":697,"t":{"207":{"position":[[141,4]]}}}],["gpt_chat_completion_v1",{"_index":684,"t":{"205":{"position":[[988,22]]},"207":{"position":[[199,23]]}}}],["gptmodelservic",{"_index":729,"t":{"211":{"position":[[390,15]]}}}],["greatfrontend",{"_index":15,"t":{"5":{"position":[[109,13]]},"9":{"position":[[109,13]]},"18":{"position":[[109,13]]},"20":{"position":[[70,13]]},"22":{"position":[[109,13]]}}}],["grep",{"_index":759,"t":{"240":{"position":[[121,4]]}}}],["groupid>org.redisson</groupid",{"_index":815,"t":{"305":{"position":[[98,31]]}}}],["gson",{"_index":173,"t":{"52":{"position":[[242,4]]}}}],["header",{"_index":565,"t":{"166":{"position":[[94,7],[271,6],[318,16]]},"283":{"position":[[59,17]]}}}],["here",{"_index":68,"t":{"24":{"position":[[61,4]]}}}],["host",{"_index":820,"t":{"307":{"position":[[132,5]]}}}],["http",{"_index":105,"t":{"30":{"position":[[125,33]]},"34":{"position":[[152,27]]},"70":{"position":[[1497,4],[1725,4],[1797,4],[1920,4],[2034,4]]},"146":{"position":[[125,33]]},"150":{"position":[[152,27]]},"279":{"position":[[123,4]]}}}],["https://api.anthropic.com/v1/review",{"_index":718,"t":{"207":{"position":[[625,37]]}}}],["https://api.baichuan",{"_index":711,"t":{"207":{"position":[[453,21]]}}}],["https://api.openai.com/v1/chat/complet",{"_index":703,"t":{"207":{"position":[[263,44]]}}}],["https://github.com/dhxingxing/ymltopojo",{"_index":600,"t":{"176":{"position":[[0,45]]}}}],["hutool",{"_index":809,"t":{"299":{"position":[[3,14]]}}}],["id",{"_index":113,"t":{"38":{"position":[[7,9]]},"154":{"position":[[7,9]]},"178":{"position":[[25,3]]},"205":{"position":[[53,4],[148,2],[820,5],[856,2]]},"291":{"position":[[8,2],[50,8]]}}}],["id;关联mark_job",{"_index":664,"t":{"205":{"position":[[130,17]]}}}],["id;操作者id",{"_index":681,"t":{"205":{"position":[[791,14]]}}}],["iflytek",{"_index":132,"t":{"44":{"position":[[0,7]]},"50":{"position":[[0,7]]},"58":{"position":[[0,7]]},"60":{"position":[[0,7]]},"72":{"position":[[0,7]]},"74":{"position":[[0,7]]},"84":{"position":[[0,7]]},"88":{"position":[[0,7]]},"98":{"position":[[0,7]]},"100":{"position":[[0,7]]},"110":{"position":[[0,7]]},"138":{"position":[[0,7]]},"140":{"position":[[0,7]]},"142":{"position":[[0,7]]},"144":{"position":[[0,7]]},"160":{"position":[[0,7]]},"162":{"position":[[0,7]]},"164":{"position":[[0,7]]},"182":{"position":[[0,7]]},"184":{"position":[[0,7]]},"190":{"position":[[0,7]]},"194":{"position":[[0,7]]},"196":{"position":[[0,7]]},"217":{"position":[[0,7]]}}}],["iflytek的大模型部署：我们的应用集成了多种ai",{"_index":368,"t":{"76":{"position":[[74,75]]}}}],["if…els",{"_index":570,"t":{"166":{"position":[[310,7]]}}}],["imag",{"_index":91,"t":{"24":{"position":[[387,7]]}}}],["img_v3_02o8_364e6193",{"_index":622,"t":{"186":{"position":[[231,23]]}}}],["img_v3_02o8_8490a130",{"_index":612,"t":{"186":{"position":[[115,23]]}}}],["img_v3_02o8_f7adc37d",{"_index":617,"t":{"186":{"position":[[173,23]]}}}],["implement",{"_index":730,"t":{"211":{"position":[[406,10]]}}}],["import",{"_index":398,"t":{"82":{"position":[[515,6]]}}}],["incr",{"_index":251,"t":{"64":{"position":[[2860,4],[2873,4],[2897,4]]}}}],["inf/servic",{"_index":736,"t":{"211":{"position":[[723,13]]}}}],["initializecli",{"_index":424,"t":{"82":{"position":[[1437,20],[1473,19]]}}}],["instanceof",{"_index":286,"t":{"66":{"position":[[1604,10],[1886,10]]}}}],["int",{"_index":163,"t":{"52":{"position":[[89,3]]},"70":{"position":[[3252,3]]},"205":{"position":[[58,3]]}}}],["interact",{"_index":29,"t":{"11":{"position":[[98,11],[156,11]]}}}],["interfac",{"_index":203,"t":{"56":{"position":[[1178,9]]},"211":{"position":[[222,9]]}}}],["intern",{"_index":337,"t":{"70":{"position":[[1962,8]]}}}],["interruptedexcept",{"_index":151,"t":{"48":{"position":[[223,20]]}}}],["invok",{"_index":315,"t":{"70":{"position":[[1141,9],[1484,6]]}}}],["invokeaimodel",{"_index":309,"t":{"70":{"position":[[340,13],[999,20]]}}}],["invokeaimodel(@requestparam",{"_index":318,"t":{"70":{"position":[[1226,27]]}}}],["io",{"_index":481,"t":{"116":{"position":[[390,67]]}}}],["ioc",{"_index":593,"t":{"172":{"position":[[769,3]]},"309":{"position":[[1115,7]]}}}],["ioc集成将bean",{"_index":477,"t":{"108":{"position":[[245,19]]}}}],["ipsum",{"_index":39,"t":{"13":{"position":[[6,5],[120,5],[163,5]]},"15":{"position":[[126,5],[235,5],[278,5],[305,5],[414,5],[457,5],[484,5],[593,5],[636,5],[663,5],[772,5],[815,5],[842,5],[951,5],[994,5],[1021,5],[1130,5],[1173,5],[1200,5],[1309,5],[1352,5],[1379,5],[1488,5],[1531,5],[1558,5],[1667,5],[1710,5],[1737,5],[1846,5],[1889,5],[1916,5],[2025,5],[2068,5],[2095,5],[2204,5],[2247,5],[2274,5],[2383,5],[2426,5],[2453,5],[2562,5],[2605,5],[2632,5],[2741,5],[2784,5],[2811,5],[2920,5],[2963,5]]}}}],["iter",{"_index":343,"t":{"70":{"position":[[2108,8]]}}}],["iterator.next",{"_index":344,"t":{"70":{"position":[[2136,37]]}}}],["jackson",{"_index":174,"t":{"52":{"position":[[255,18]]},"54":{"position":[[106,7]]},"56":{"position":[[116,7],[390,7],[433,7]]},"170":{"position":[[35,7],[254,9],[264,7]]},"178":{"position":[[121,7],[343,7]]}}}],["java",{"_index":181,"t":{"54":{"position":[[155,4]]},"56":{"position":[[773,4]]},"64":{"position":[[177,4]]},"66":{"position":[[30,4]]},"70":{"position":[[2826,14],[3324,23]]},"82":{"position":[[93,4]]},"166":{"position":[[136,4]]},"172":{"position":[[404,4]]},"211":{"position":[[692,4]]},"224":{"position":[[0,23],[76,22]]},"232":{"position":[[0,4]]},"236":{"position":[[0,4]]},"238":{"position":[[0,4]]},"242":{"position":[[0,4]]},"244":{"position":[[0,4]]},"246":{"position":[[0,4]]},"250":{"position":[[0,4]]},"252":{"position":[[0,4]]},"254":{"position":[[0,4],[20,12]]},"256":{"position":[[0,4]]},"258":{"position":[[0,4]]},"260":{"position":[[0,4]]},"265":{"position":[[0,4]]},"267":{"position":[[0,4]]},"275":{"position":[[0,4]]},"289":{"position":[[0,4]]},"293":{"position":[[0,4]]},"295":{"position":[[0,4]]},"307":{"position":[[75,4]]},"309":{"position":[[397,4],[503,4]]},"311":{"position":[[149,4]]}}}],["java.lang.reflect.typ",{"_index":186,"t":{"56":{"position":[[306,22]]}}}],["java.util.concurr",{"_index":355,"t":{"70":{"position":[[2864,20]]}}}],["javascript的number类型基于iee",{"_index":606,"t":{"186":{"position":[[0,25]]}}}],["javatyp",{"_index":187,"t":{"56":{"position":[[375,9],[447,21],[469,8],[629,11]]}}}],["java中，semaphor",{"_index":354,"t":{"70":{"position":[[2841,22]]}}}],["java代码中就是通过这种a",{"_index":466,"t":{"102":{"position":[[0,51]]}}}],["java通过websocket",{"_index":205,"t":{"58":{"position":[[13,15]]}}}],["jdk的delayqueu",{"_index":488,"t":{"118":{"position":[[565,61]]}}}],["jdk自带的delayqueu",{"_index":482,"t":{"118":{"position":[[0,60]]},"120":{"position":[[0,48]]},"136":{"position":[[194,16],[336,16]]}}}],["job",{"_index":480,"t":{"116":{"position":[[141,24]]}}}],["jobid",{"_index":319,"t":{"70":{"position":[[1259,6]]},"199":{"position":[[41,37],[100,7]]}}}],["jobid（暂定）来查询表，拿到表中的相关数据，如model",{"_index":153,"t":{"48":{"position":[[372,36]]}}}],["jobid：根据此id",{"_index":722,"t":{"209":{"position":[[66,20]]}}}],["json",{"_index":172,"t":{"52":{"position":[[231,4]]},"54":{"position":[[138,4]]},"56":{"position":[[754,4]]},"170":{"position":[[48,4]]},"234":{"position":[[403,4]]}}}],["jsonanygett",{"_index":575,"t":{"170":{"position":[[17,14]]}}}],["jsonanysett",{"_index":574,"t":{"170":{"position":[[0,14],[276,15]]},"172":{"position":[[672,14]]},"174":{"position":[[229,14]]},"246":{"position":[[12,13]]},"248":{"position":[[96,42]]}}}],["jsonanysetter，bind",{"_index":578,"t":{"170":{"position":[[195,21]]}}}],["jsonproperti",{"_index":603,"t":{"178":{"position":[[161,13]]}}}],["jsonserialize(us",{"_index":630,"t":{"188":{"position":[[87,20]]}}}],["jsr",{"_index":601,"t":{"178":{"position":[[29,9]]}}}],["jsx",{"_index":31,"t":{"11":{"position":[[139,3]]}}}],["junit",{"_index":802,"t":{"285":{"position":[[179,5]]}}}],["junit、ci/cd",{"_index":790,"t":{"279":{"position":[[302,11]]}}}],["jvm",{"_index":788,"t":{"279":{"position":[[111,3]]}}}],["jvm。java",{"_index":363,"t":{"70":{"position":[[3303,8]]}}}],["jvm的令牌桶来做。目前项目中能满足的就是redis了，所以我们用redi",{"_index":209,"t":{"64":{"position":[[0,65]]}}}],["jvm调优、spring",{"_index":744,"t":{"224":{"position":[[46,29]]}}}],["k8",{"_index":755,"t":{"238":{"position":[[5,3],[9,7]]}}}],["kafka",{"_index":495,"t":{"122":{"position":[[130,26],[196,5]]},"136":{"position":[[164,8],[251,8]]}}}],["kafka.utils.tim",{"_index":497,"t":{"122":{"position":[[229,17]]}}}],["kafka来说，rocketmq",{"_index":500,"t":{"124":{"position":[[0,39]]}}}],["kafka的时间轮同样可以得到o(1",{"_index":498,"t":{"122":{"position":[[247,39]]}}}],["kafka的时间轮的实现方式，在实现方式上有点复杂，需要依赖kafka",{"_index":499,"t":{"122":{"position":[[287,68]]}}}],["kafka的时间轮，kafka",{"_index":494,"t":{"122":{"position":[[37,92]]}}}],["key",{"_index":240,"t":{"64":{"position":[[2451,3],[2577,5],[2690,4]]},"66":{"position":[[1139,8],[1193,8]]},"80":{"position":[[216,3],[256,6],[318,6],[659,6]]},"82":{"position":[[405,4]]},"96":{"position":[[114,4],[176,3]]},"205":{"position":[[816,3]]},"207":{"position":[[241,4],[431,4],[603,4]]},"215":{"position":[[252,3]]}}}],["key:#{nul",{"_index":381,"t":{"80":{"position":[[485,14]]}}}],["key=xxxai",{"_index":585,"t":{"172":{"position":[[230,9]]}}}],["keys[1",{"_index":237,"t":{"64":{"position":[[2400,13]]}}}],["keys[1]loc",{"_index":241,"t":{"64":{"position":[[2457,12]]}}}],["keyspac",{"_index":536,"t":{"130":{"position":[[60,8]]}}}],["key（这个key是yml中用来映射模型相关信息的key",{"_index":154,"t":{"48":{"position":[[409,66]]}}}],["kubectl",{"_index":756,"t":{"240":{"position":[[0,7],[37,7],[86,7],[136,7]]}}}],["limit",{"_index":61,"t":{"15":{"position":[[81,5]]},"215":{"position":[[77,6],[118,6]]}}}],["limiterkey",{"_index":275,"t":{"66":{"position":[[931,10],[1148,12],[1202,12]]}}}],["linkedtreemap",{"_index":155,"t":{"50":{"position":[[35,13]]},"52":{"position":[[308,22]]},"56":{"position":[[790,13]]}}}],["list",{"_index":63,"t":{"15":{"position":[[109,4]]},"70":{"position":[[2119,16]]}}}],["list<userdto",{"_index":175,"t":{"52":{"position":[[331,43]]},"56":{"position":[[353,15]]}}}],["live",{"_index":446,"t":{"94":{"position":[[227,65]]}}}],["llm\")public",{"_index":404,"t":{"82":{"position":[[724,12]]}}}],["llm.deepseek",{"_index":408,"t":{"82":{"position":[[872,12]]}}}],["llm.spark",{"_index":406,"t":{"82":{"position":[[783,9]]}}}],["llm.spark.api",{"_index":375,"t":{"80":{"position":[[202,13]]}}}],["llmproperti",{"_index":405,"t":{"82":{"position":[[743,13],[1271,13],[1285,14],[1384,14],[1422,14]]}}}],["llmproperties.getdeepseek",{"_index":429,"t":{"82":{"position":[[1725,28]]}}}],["llmproperties.getdeepseek().getapikey",{"_index":430,"t":{"82":{"position":[[1765,39]]}}}],["llmproperties.getspark",{"_index":425,"t":{"82":{"position":[[1518,25]]}}}],["llmproperties.getspark().getapikey",{"_index":426,"t":{"82":{"position":[[1555,36]]}}}],["llmproperties.java",{"_index":397,"t":{"82":{"position":[[475,20]]}}}],["llmservic",{"_index":417,"t":{"82":{"position":[[1244,10]]}}}],["llmservice(llmproperti",{"_index":422,"t":{"82":{"position":[[1359,24]]}}}],["llmservice.java",{"_index":415,"t":{"82":{"position":[[1164,17]]}}}],["llmvalueconfig",{"_index":374,"t":{"80":{"position":[[171,14],[404,14]]}}}],["load",{"_index":117,"t":{"42":{"position":[[8,4]]},"158":{"position":[[8,4]]}}}],["loader",{"_index":733,"t":{"211":{"position":[[576,6]]}}}],["local",{"_index":244,"t":{"64":{"position":[[2517,13]]}}}],["locat",{"_index":90,"t":{"24":{"position":[[370,6]]}}}],["log",{"_index":761,"t":{"240":{"position":[[144,4]]},"250":{"position":[[12,3]]}}}],["log.debug",{"_index":260,"t":{"66":{"position":[[269,24],[1120,18]]}}}],["log.error(\"ai",{"_index":288,"t":{"66":{"position":[[1711,20]]}}}],["log.warn",{"_index":279,"t":{"66":{"position":[[1170,22]]}}}],["lombok",{"_index":402,"t":{"82":{"position":[[664,6]]}}}],["lombok.data",{"_index":401,"t":{"82":{"position":[[645,12]]}}}],["long",{"_index":58,"t":{"15":{"position":[[30,4]]},"70":{"position":[[1254,4]]},"188":{"position":[[144,4]]}}}],["lorber",{"_index":4,"t":{"5":{"position":[[32,6]]},"7":{"position":[[31,6]]},"9":{"position":[[32,6]]},"18":{"position":[[32,6]]},"22":{"position":[[32,6]]}}}],["lorem",{"_index":38,"t":{"13":{"position":[[0,5],[157,5]]},"15":{"position":[[120,5],[272,5],[299,5],[451,5],[478,5],[630,5],[657,5],[809,5],[836,5],[988,5],[1015,5],[1167,5],[1194,5],[1346,5],[1373,5],[1525,5],[1552,5],[1704,5],[1731,5],[1883,5],[1910,5],[2062,5],[2089,5],[2241,5],[2268,5],[2420,5],[2447,5],[2599,5],[2626,5],[2778,5],[2805,5],[2957,5]]}}}],["lua",{"_index":214,"t":{"64":{"position":[[330,3],[405,3],[1278,40],[1901,3],[2264,3],[2305,3],[2379,3],[2845,3]]},"215":{"position":[[16,3],[272,3]]}}}],["maintain",{"_index":6,"t":{"5":{"position":[[50,10]]},"7":{"position":[[49,10]]},"9":{"position":[[50,10]]},"18":{"position":[[50,10]]},"22":{"position":[[50,10]]}}}],["mani",{"_index":334,"t":{"70":{"position":[[1942,4]]}}}],["map",{"_index":177,"t":{"54":{"position":[[27,3]]},"70":{"position":[[922,4]]},"170":{"position":[[246,3]]},"172":{"position":[[144,3],[174,3],[497,3],[610,3]]},"178":{"position":[[14,3]]},"211":{"position":[[762,3]]},"248":{"position":[[39,4],[65,3]]}}}],["map,string,object",{"_index":596,"t":{"174":{"position":[[106,19]]}}}],["map.put(service.modelkey",{"_index":735,"t":{"211":{"position":[[650,27]]}}}],["map<str",{"_index":728,"t":{"211":{"position":[[303,11]]}}}],["map<string,object",{"_index":573,"t":{"168":{"position":[[147,18]]},"170":{"position":[[110,18]]}}}],["mapper",{"_index":599,"t":{"174":{"position":[[310,6]]},"178":{"position":[[265,6]]}}}],["mark",{"_index":760,"t":{"240":{"position":[[126,4]]}}}],["mark_job_id",{"_index":662,"t":{"205":{"position":[[92,13],[859,11]]}}}],["markdown",{"_index":21,"t":{"11":{"position":[[30,8]]},"24":{"position":[[115,8]]}}}],["markjobid、id",{"_index":779,"t":{"269":{"position":[[6,18]]},"271":{"position":[[47,14]]}}}],["max",{"_index":130,"t":{"42":{"position":[[204,3]]},"158":{"position":[[204,3]]},"207":{"position":[[367,3],[384,3],[556,3],[702,3]]}}}],["maxtokens、temperature、stream",{"_index":572,"t":{"168":{"position":[[38,37]]}}}],["mdx",{"_index":24,"t":{"11":{"position":[[57,4]]}}}],["md、txt、sql",{"_index":748,"t":{"234":{"position":[[51,10]]}}}],["me!</button",{"_index":36,"t":{"11":{"position":[[231,12]]}}}],["mediatype.text_event_stream_value)publ",{"_index":143,"t":{"48":{"position":[[43,40]]}}}],["mediatype.text_plain_valu",{"_index":316,"t":{"70":{"position":[[1162,27]]}}}],["member",{"_index":453,"t":{"96":{"position":[[286,7],[338,6]]}}}],["member。这样redis会对zset按照score延时时间进行排序。然后我们再开启redi",{"_index":544,"t":{"132":{"position":[[186,60]]}}}],["member）都有一个分数（scor",{"_index":449,"t":{"96":{"position":[[80,33]]}}}],["memori",{"_index":441,"t":{"94":{"position":[[36,6]]}}}],["messag",{"_index":166,"t":{"52":{"position":[[114,8]]},"126":{"position":[[124,12]]},"128":{"position":[[185,14],[341,11]]}}}],["meta",{"_index":10,"t":{"5":{"position":[[77,4]]},"9":{"position":[[77,4]]},"18":{"position":[[77,4]]},"20":{"position":[[38,4]]},"22":{"position":[[77,4]]},"211":{"position":[[718,4]]}}}],["mobilecloud.ymlllm",{"_index":391,"t":{"82":{"position":[[346,19]]}}}],["mock",{"_index":785,"t":{"275":{"position":[[8,14]]},"277":{"position":[[17,4]]},"279":{"position":[[5,4],[234,22],[376,9]]},"285":{"position":[[24,4],[32,13],[92,4],[168,4]]},"287":{"position":[[0,4],[72,12]]}}}],["mockito",{"_index":797,"t":{"281":{"position":[[282,7]]}}}],["mockmvc",{"_index":791,"t":{"281":{"position":[[3,7]]}}}],["mockmvc.perform(post(\"/user/login",{"_index":792,"t":{"281":{"position":[[22,35]]}}}],["mockmvc、mockito",{"_index":787,"t":{"279":{"position":[[17,16]]}}}],["model",{"_index":341,"t":{"70":{"position":[[2083,7]]},"82":{"position":[[437,5]]},"207":{"position":[[192,6],[308,5],[496,5],[663,5]]},"209":{"position":[[94,14]]},"215":{"position":[[60,6]]}}}],["model_en",{"_index":668,"t":{"205":{"position":[[281,14],[892,12]]}}}],["model_key",{"_index":653,"t":{"201":{"position":[[51,16]]},"205":{"position":[[157,11],[871,9]]}}}],["model_nam",{"_index":666,"t":{"205":{"position":[[224,12],[881,10]]}}}],["modelconfig",{"_index":592,"t":{"172":{"position":[[754,14]]}}}],["modelkey",{"_index":261,"t":{"66":{"position":[[301,10],[456,8],[1732,12],[1756,9]]},"207":{"position":[[0,15]]},"211":{"position":[[254,11],[456,10]]},"215":{"position":[[179,8]]}}}],["modelkey，因为它应当由后台通过jobid",{"_index":721,"t":{"209":{"position":[[0,57]]}}}],["modelnam",{"_index":414,"t":{"82":{"position":[[1141,10]]}}}],["modelparam",{"_index":563,"t":{"164":{"position":[[23,11]]},"166":{"position":[[19,11],[59,11]]},"170":{"position":[[181,11]]},"172":{"position":[[506,11]]},"174":{"position":[[128,11]]},"178":{"position":[[92,13]]},"211":{"position":[[323,13]]}}}],["modelresult",{"_index":726,"t":{"211":{"position":[[266,11],[347,18],[502,11]]}}}],["models.deepseek",{"_index":582,"t":{"172":{"position":[[197,15],[240,15],[284,15]]}}}],["models.xxx.param",{"_index":566,"t":{"166":{"position":[[159,19]]}}}],["modelservic",{"_index":725,"t":{"211":{"position":[[232,12],[417,12]]}}}],["mono",{"_index":306,"t":{"70":{"position":[[175,5],[777,4]]}}}],["mutex",{"_index":647,"t":{"192":{"position":[[751,27]]}}}],["n",{"_index":308,"t":{"70":{"position":[[210,1],[2721,1],[2761,1]]},"240":{"position":[[195,1]]}}}],["name",{"_index":395,"t":{"82":{"position":[[443,5]]},"207":{"position":[[223,5],[314,5],[502,5],[669,5]]}}}],["namespac",{"_index":757,"t":{"240":{"position":[[12,10],[59,10],[108,10]]}}}],["netti",{"_index":493,"t":{"122":{"position":[[0,36]]},"136":{"position":[[182,9],[324,9]]}}}],["netty的hashedwheeltimer可以帮助我们快速的实现一个时间轮，这种方式和delayqueu",{"_index":491,"t":{"120":{"position":[[275,83]]}}}],["netty的时间轮、jdk自带的delayqueu",{"_index":554,"t":{"136":{"position":[[386,42]]}}}],["netty的时间轮方案比基于jdk的delayqueu",{"_index":492,"t":{"120":{"position":[[411,92]]}}}],["new",{"_index":258,"t":{"66":{"position":[[227,3]]},"70":{"position":[[3411,4],[3501,4]]},"82":{"position":[[1654,3],[1876,3]]},"178":{"position":[[88,3]]},"309":{"position":[[722,3]]}}}],["newmarktoolcontrol",{"_index":135,"t":{"46":{"position":[[13,23]]}}}],["nosuchalgorithmexcept",{"_index":149,"t":{"48":{"position":[[177,25]]}}}],["notifi",{"_index":535,"t":{"130":{"position":[[45,14]]}}}],["null",{"_index":380,"t":{"80":{"position":[[429,9]]},"82":{"position":[[244,10],[801,5],[893,5],[1182,40],[1547,4],[1595,5],[1757,4],[1808,5]]},"205":{"position":[[117,4],[185,4],[254,4],[311,4],[375,4],[623,4],[699,4],[778,4]]}}}],["o(logn+m",{"_index":462,"t":{"96":{"position":[[1046,24]]}}}],["object",{"_index":178,"t":{"54":{"position":[[33,6]]},"82":{"position":[[98,28]]},"211":{"position":[[315,7]]}}}],["objectmapp",{"_index":192,"t":{"56":{"position":[[727,15]]},"174":{"position":[[268,12]]},"178":{"position":[[188,12]]}}}],["objectmapper.convertvalu",{"_index":598,"t":{"174":{"position":[[185,25]]}}}],["objectmapper.readvalu",{"_index":191,"t":{"56":{"position":[[702,24]]}}}],["obu",{"_index":763,"t":{"240":{"position":[[197,3],[232,3]]}}}],["ocp",{"_index":564,"t":{"166":{"position":[[37,3]]}}}],["old",{"_index":385,"t":{"82":{"position":[[89,3]]}}}],["oncancel",{"_index":282,"t":{"66":{"position":[[1374,25]]},"68":{"position":[[674,45]]}}}],["onclick",{"_index":33,"t":{"11":{"position":[[184,11]]}}}],["oncomplet",{"_index":299,"t":{"68":{"position":[[621,43]]},"70":{"position":[[1998,12],[2368,13]]}}}],["oncomplete)：ai",{"_index":280,"t":{"66":{"position":[[1299,15]]}}}],["oncomplete/onerror",{"_index":349,"t":{"70":{"position":[[2517,21]]}}}],["onerror",{"_index":281,"t":{"66":{"position":[[1333,13]]},"68":{"position":[[665,8]]}}}],["onerror(throw",{"_index":332,"t":{"70":{"position":[[1857,17],[2412,17]]}}}],["onnext",{"_index":348,"t":{"70":{"position":[[2401,6],[2471,26]]}}}],["onnext(str",{"_index":329,"t":{"70":{"position":[[1748,13]]}}}],["onnext(t",{"_index":347,"t":{"70":{"position":[[2340,8]]}}}],["open",{"_index":468,"t":{"104":{"position":[[43,4]]}}}],["openai",{"_index":654,"t":{"203":{"position":[[196,6]]},"207":{"position":[[134,6]]}}}],["openapi",{"_index":801,"t":{"283":{"position":[[50,8]]}}}],["openfeign",{"_index":158,"t":{"52":{"position":[[17,9]]}}}],["oper",{"_index":649,"t":{"192":{"position":[[792,16]]}}}],["operate_user_id",{"_index":679,"t":{"205":{"position":[[747,17],[960,15]]}}}],["org.springframework.boot.context.properties.configurationproperties;import",{"_index":399,"t":{"82":{"position":[[522,74]]}}}],["org.springframework.stereotype.component;import",{"_index":400,"t":{"82":{"position":[[597,47]]}}}],["overrid",{"_index":731,"t":{"211":{"position":[[432,9],[485,9]]}}}],["page",{"_index":125,"t":{"42":{"position":[[119,4]]},"158":{"position":[[119,4]]}}}],["papyru",{"_index":476,"t":{"108":{"position":[[211,10]]}}}],["param",{"_index":597,"t":{"174":{"position":[[150,6]]},"207":{"position":[[229,7]]}}}],["password",{"_index":824,"t":{"307":{"position":[[159,9],[174,8]]}}}],["pellentesqu",{"_index":46,"t":{"13":{"position":[[62,12]]},"15":{"position":[[177,12],[356,12],[535,12],[714,12],[893,12],[1072,12],[1251,12],[1430,12],[1609,12],[1788,12],[1967,12],[2146,12],[2325,12],[2504,12],[2683,12],[2862,12]]}}}],["per",{"_index":739,"t":{"215":{"position":[[92,3],[133,3]]}}}],["permit",{"_index":357,"t":{"70":{"position":[[2963,26],[3004,8]]},"215":{"position":[[84,7],[125,7]]}}}],["permitstoacquir",{"_index":242,"t":{"64":{"position":[[2470,16],[2638,16],[2695,17]]}}}],["plugin",{"_index":67,"t":{"24":{"position":[[53,7]]}}}],["pod",{"_index":758,"t":{"240":{"position":[[23,13],[49,3],[98,3],[156,3],[294,3]]}}}],["pojo",{"_index":581,"t":{"172":{"position":[[31,14],[393,4]]}}}],["pojo（plain",{"_index":384,"t":{"82":{"position":[[54,34]]}}}],["pom.xml",{"_index":811,"t":{"305":{"position":[[14,7]]}}}],["port",{"_index":822,"t":{"307":{"position":[[148,5]]}}}],["post",{"_index":19,"t":{"11":{"position":[[5,5],[115,6]]},"15":{"position":[[40,5],[92,4]]},"24":{"position":[[225,4],[334,4],[382,4]]}}}],["postconstruct",{"_index":775,"t":{"252":{"position":[[12,14]]}}}],["postgresql",{"_index":754,"t":{"234":{"position":[[515,16],[552,10],[563,15]]}}}],["postman",{"_index":786,"t":{"277":{"position":[[43,7]]},"279":{"position":[[34,7]]},"285":{"position":[[59,7],[133,7],[223,7]]},"287":{"position":[[33,7],[85,14]]}}}],["postmapping(valu",{"_index":140,"t":{"48":{"position":[[0,18]]}}}],["power",{"_index":26,"t":{"11":{"position":[[73,5]]},"24":{"position":[[33,7]]}}}],["primari",{"_index":682,"t":{"205":{"position":[[808,7]]}}}],["privat",{"_index":162,"t":{"52":{"position":[[81,7],[99,7],[123,7]]},"80":{"position":[[263,7],[325,7],[500,7],[601,7],[666,7]]},"82":{"position":[[810,7],[902,7],[983,7],[1006,7],[1032,7],[1103,7],[1126,7],[1257,7],[1460,7]]},"188":{"position":[[136,7]]}}}],["produc",{"_index":142,"t":{"48":{"position":[[32,8]]},"70":{"position":[[1151,8]]}}}],["project",{"_index":302,"t":{"70":{"position":[[21,7],[48,7]]}}}],["prompt",{"_index":321,"t":{"70":{"position":[[1287,7],[1355,8]]},"201":{"position":[[68,15]]},"205":{"position":[[388,27],[445,27],[508,27],[567,25]]},"209":{"position":[[87,6]]},"211":{"position":[[295,7]]}}}],["prompt_background",{"_index":674,"t":{"205":{"position":[[475,19],[928,17]]}}}],["prompt_job",{"_index":671,"t":{"205":{"position":[[353,12],[905,10]]}}}],["prompt_output",{"_index":675,"t":{"205":{"position":[[538,15],[946,13]]}}}],["prompt_rol",{"_index":673,"t":{"205":{"position":[[418,13],[916,11]]}}}],["prompt）与cueword",{"_index":152,"t":{"48":{"position":[[288,83]]}}}],["prop",{"_index":837,"t":{"309":{"position":[[665,6]]}}}],["property，jackson",{"_index":568,"t":{"166":{"position":[[213,16]]}}}],["props.gethost",{"_index":840,"t":{"309":{"position":[[860,15]]}}}],["props.getport",{"_index":841,"t":{"309":{"position":[[884,16]]}}}],["public",{"_index":159,"t":{"52":{"position":[[56,6]]},"70":{"position":[[1190,6]]},"82":{"position":[[945,6],[1062,6],[1352,6]]},"211":{"position":[[369,14],[442,6],[495,6]]}}}],["publish",{"_index":307,"t":{"70":{"position":[[186,19]]}}}],["publisher）在数据准备好后，主动推送给消费者（subscrib",{"_index":345,"t":{"70":{"position":[[2185,95]]}}}],["pull",{"_index":342,"t":{"70":{"position":[[2091,9]]}}}],["push",{"_index":338,"t":{"70":{"position":[[2058,5],[2174,10]]}}}],["qp",{"_index":741,"t":{"215":{"position":[[160,3]]}}}],["quartz",{"_index":447,"t":{"94":{"position":[[302,7],[310,61]]}}}],["queryservic",{"_index":807,"t":{"291":{"position":[[72,12],[177,12]]}}}],["queue",{"_index":442,"t":{"94":{"position":[[43,6]]}}}],["r1",{"_index":583,"t":{"172":{"position":[[213,2],[256,2],[300,2]]},"207":{"position":[[52,2],[68,3],[84,2],[104,3]]}}}],["rabbitmq",{"_index":552,"t":{"136":{"position":[[96,10],[109,12],[238,10],[290,12]]}}}],["rabbitmq/kafka",{"_index":443,"t":{"94":{"position":[[122,16]]}}}],["rabbitmq中的一条正常的消息，因为过了存活时间（ttl过期）、队列长度超限、被消费者拒绝等原因无法被消费时，就会变成dead",{"_index":522,"t":{"126":{"position":[[57,66]]}}}],["rabbitmq中的这个ttl是可以设置任意时长的，这就解决了rocketmq",{"_index":525,"t":{"126":{"position":[[270,50]]}}}],["rabbitmq插件的方式可以实现延迟消息，并且不存在消息阻塞的问题，但是因为是基于插件的，而这个插件支持的最大延长时间是(2^32",{"_index":531,"t":{"128":{"position":[[353,69]]}}}],["rabbitmq的死信队列，可以实现延迟消息，非常灵活的实现定时关单，并且借助rabbitmq的集群扩展性，可以实现高可用，以及处理大并发量。他的缺点第一是可能存在消息阻塞的问题，还有就是方案比较复杂，不仅要依赖rabbitmq，而且还需要声明很多队列(exchang",{"_index":526,"t":{"126":{"position":[[442,149]]}}}],["rabbitmq的话，可以不用死信队列也能实现延迟消息，那就是基于rabbitmq_delayed_message_exchange插件，这种方案能够解决通过死信队列实现延迟消息出现的消息阻塞问题。但是该插件从rabbitmq的3.6.12",{"_index":527,"t":{"128":{"position":[[0,140]]}}}],["rag",{"_index":746,"t":{"232":{"position":[[8,9]]}}}],["rate",{"_index":738,"t":{"215":{"position":[[72,4],[113,4]]}}}],["rdb",{"_index":463,"t":{"96":{"position":[[1128,3]]}}}],["rdelayedqueu",{"_index":549,"t":{"134":{"position":[[336,40]]}}}],["react",{"_index":27,"t":{"11":{"position":[[82,5]]}}}],["reactiv",{"_index":304,"t":{"70":{"position":[[64,19]]}}}],["reactor",{"_index":303,"t":{"70":{"position":[[29,7],[56,7]]}}}],["redi",{"_index":111,"t":{"36":{"position":[[0,5],[119,27]]},"38":{"position":[[70,5],[85,6]]},"40":{"position":[[25,5],[74,5],[152,9]]},"42":{"position":[[174,5],[222,5]]},"64":{"position":[[237,5],[1246,31],[1319,10],[1616,5],[1690,5],[2022,5],[2330,5],[2336,9],[2511,5]]},"96":{"position":[[8,5],[456,5],[963,5],[1071,9],[1115,9],[1189,5]]},"130":{"position":[[282,9]]},"132":{"position":[[289,7]]},"136":{"position":[[152,9],[305,9]]},"152":{"position":[[0,5],[119,27]]},"154":{"position":[[70,5],[85,6]]},"156":{"position":[[25,5],[74,5],[152,9]]},"158":{"position":[[174,5],[222,5]]},"213":{"position":[[31,9]]},"215":{"position":[[3,5],[233,5]]},"236":{"position":[[5,5],[11,5]]},"242":{"position":[[5,5],[11,15]]},"307":{"position":[[58,5],[125,6]]},"313":{"position":[[139,5]]}}}],["redis.call('decrbi",{"_index":247,"t":{"64":{"position":[[2669,20]]}}}],["redis.conf",{"_index":534,"t":{"130":{"position":[[34,10]]}}}],["redisproperti",{"_index":831,"t":{"309":{"position":[[379,15],[744,15]]}}}],["rediss",{"_index":551,"t":{"136":{"position":[[84,9],[226,9]]},"297":{"position":[[3,9]]}}}],["redission+redis、rabbitmq插件、redis的zset、rocketmq",{"_index":557,"t":{"136":{"position":[[584,64]]}}}],["redission、rabbitmq插件、kafka时间轮、rocketmq",{"_index":556,"t":{"136":{"position":[[480,57]]}}}],["redission中定义了分布式延迟队列rdelayedqueue，这是一种基于我们前面介绍过的zset",{"_index":547,"t":{"134":{"position":[[135,84]]}}}],["redisson",{"_index":210,"t":{"64":{"position":[[123,8],[316,10],[422,8],[1330,45],[1555,8],[2253,8],[2276,8],[2825,8]]},"66":{"position":[[395,8],[1452,8]]},"70":{"position":[[446,8],[556,8],[3348,8]]},"134":{"position":[[54,17]]},"305":{"position":[[46,8],[267,23]]},"309":{"position":[[0,17],[237,8],[685,8]]},"313":{"position":[[101,9]]}}}],["redisson.cr",{"_index":844,"t":{"309":{"position":[[1001,16]]},"313":{"position":[[9,17]]}}}],["redisson.create(config",{"_index":845,"t":{"309":{"position":[[1025,24]]}}}],["redissonautoconfigur",{"_index":827,"t":{"309":{"position":[[57,31]]}}}],["redissoncli",{"_index":835,"t":{"309":{"position":[[619,14],[1081,14]]},"311":{"position":[[48,14],[178,15],[223,50]]},"313":{"position":[[171,14]]}}}],["redissonclient(redisproperti",{"_index":836,"t":{"309":{"position":[[634,30]]}}}],["redissonclient.getsemaphore(limiterkey",{"_index":218,"t":{"64":{"position":[[1132,40]]},"66":{"position":[[1029,40]]}}}],["redissonclient，我才创建publ",{"_index":834,"t":{"309":{"position":[[593,25]]}}}],["redisson是一个在redis的基础上实现的框架，它不仅提供了一系列的分布式的java",{"_index":546,"t":{"134":{"position":[[72,62]]}}}],["redisson的create（config",{"_index":810,"t":{"303":{"position":[[3,35]]}}}],["redisson的实现方式，是可以解决基于zset",{"_index":550,"t":{"134":{"position":[[377,64]]}}}],["redis中的有序集合——zset",{"_index":542,"t":{"132":{"position":[[52,31]]}}}],["redis官网上明确的说过，redis并不保证key",{"_index":538,"t":{"130":{"position":[[173,108]]}}}],["redis数据结构：使用redis的str",{"_index":219,"t":{"64":{"position":[[1173,36]]}}}],["redis的decr和incr",{"_index":220,"t":{"64":{"position":[[1210,35]]}}}],["redis的zset",{"_index":553,"t":{"136":{"position":[[139,10],[262,10]]}}}],["redis的人都知道，redi",{"_index":533,"t":{"130":{"position":[[0,31]]}}}],["redis过期监听、rabbitmq死信队列、redis的zset",{"_index":555,"t":{"136":{"position":[[429,50]]}}}],["redis过期监听的方案并不完美，但是并不是redi",{"_index":541,"t":{"132":{"position":[[0,51]]}}}],["refreshscop",{"_index":605,"t":{"178":{"position":[[284,24]]}}}],["regular",{"_index":77,"t":{"24":{"position":[[166,7]]}}}],["releas",{"_index":361,"t":{"70":{"position":[[3145,10]]}}}],["release_timestamp",{"_index":456,"t":{"96":{"position":[[420,35],[502,19]]}}}],["releasedresourc",{"_index":274,"t":{"66":{"position":[[902,16],[987,18]]}}}],["repositori",{"_index":806,"t":{"291":{"position":[[59,10]]}}}],["request",{"_index":335,"t":{"70":{"position":[[1947,8],[2779,7]]},"207":{"position":[[388,9]]}}}],["request_timeout",{"_index":290,"t":{"66":{"position":[[1918,111]]}}}],["requestparam",{"_index":320,"t":{"70":{"position":[[1266,13]]}}}],["resourc",{"_index":118,"t":{"42":{"position":[[13,9]]},"66":{"position":[[47,9]]},"158":{"position":[[13,9]]},"311":{"position":[[120,9]]}}}],["resourceredissoncli",{"_index":848,"t":{"311":{"position":[[154,23]]}}}],["respons",{"_index":184,"t":{"56":{"position":[[234,8]]}}}],["responseentity.ok",{"_index":324,"t":{"70":{"position":[[1371,19]]}}}],["responseentity<flux<str",{"_index":317,"t":{"70":{"position":[[1197,28]]}}}],["result",{"_index":322,"t":{"70":{"position":[[1310,6]]},"72":{"position":[[13,6]]}}}],["result<list<userdto",{"_index":171,"t":{"52":{"position":[[198,32]]},"56":{"position":[[641,22]]}}}],["result<t",{"_index":161,"t":{"52":{"position":[[69,9]]}}}],["resultdecod",{"_index":183,"t":{"56":{"position":[[183,13],[197,23],[815,13],[897,13]]}}}],["resultstream",{"_index":293,"t":{"68":{"position":[[281,12],[381,13]]}}}],["resulttyp",{"_index":190,"t":{"56":{"position":[[687,10]]}}}],["return",{"_index":248,"t":{"64":{"position":[[2724,6],[2754,6]]},"66":{"position":[[294,6]]},"70":{"position":[[1364,6]]},"211":{"position":[[469,6]]},"309":{"position":[[1018,6]]}}}],["rhoncu",{"_index":51,"t":{"13":{"position":[[112,7]]},"15":{"position":[[227,7],[406,7],[585,7],[764,7],[943,7],[1122,7],[1301,7],[1480,7],[1659,7],[1838,7],[2017,7],[2196,7],[2375,7],[2554,7],[2733,7],[2912,7]]}}}],["rocketmq",{"_index":519,"t":{"124":{"position":[[309,85]]},"136":{"position":[[124,12],[275,12]]}}}],["rocketmq中支持，其实在rabbitmq",{"_index":521,"t":{"126":{"position":[[0,56]]}}}],["rocketmq延迟消息支持的时长匹配的话，那么是可以基于rocketmq",{"_index":520,"t":{"124":{"position":[[395,76]]}}}],["rocketmq的延迟消息并不是支持任意时长的延迟的，它只支持：1",{"_index":503,"t":{"124":{"position":[[198,37]]}}}],["rratelimit",{"_index":212,"t":{"64":{"position":[[145,12]]}}}],["rsemaphor",{"_index":211,"t":{"64":{"position":[[132,10],[1101,18]]},"66":{"position":[[1006,10]]},"70":{"position":[[3359,10]]}}}],["score",{"_index":452,"t":{"96":{"position":[[212,6],[267,5],[611,5],[1001,11],[1013,5]]},"132":{"position":[[116,10],[127,5],[178,5],[249,39]]}}}],["sdmarkserv",{"_index":766,"t":{"240":{"position":[[257,12]]}}}],["second",{"_index":740,"t":{"215":{"position":[[96,7],[137,7]]}}}],["secret",{"_index":382,"t":{"80":{"position":[[587,10]]}}}],["semaphor",{"_index":213,"t":{"64":{"position":[[184,10],[1120,9]]},"66":{"position":[[1017,9]]},"70":{"position":[[2816,9],[3314,9]]},"254":{"position":[[10,9]]}}}],["semaphore(1))：当许可数设置为1",{"_index":364,"t":{"70":{"position":[[3416,76]]}}}],["semaphore(int",{"_index":356,"t":{"70":{"position":[[2949,13],[2990,13]]}}}],["semaphore(n))：当许可数设置为n（n",{"_index":365,"t":{"70":{"position":[[3506,24]]}}}],["semaphore.acquire();flux<str",{"_index":292,"t":{"68":{"position":[[243,37]]}}}],["semaphore.acquire();return",{"_index":296,"t":{"68":{"position":[[445,26]]}}}],["semaphore.isexist",{"_index":277,"t":{"66":{"position":[[1073,22]]}}}],["semaphore.releas",{"_index":291,"t":{"68":{"position":[[186,19],[542,20],[596,20]]}}}],["semaphore.release(1",{"_index":278,"t":{"66":{"position":[[1098,21],[1417,34]]}}}],["semaphore.trysetpermits(5",{"_index":224,"t":{"64":{"position":[[1458,27]]}}}],["sent",{"_index":331,"t":{"70":{"position":[[1833,4]]}}}],["server",{"_index":330,"t":{"70":{"position":[[1802,30],[1971,6]]}}}],["servic",{"_index":201,"t":{"56":{"position":[[1120,9]]},"211":{"position":[[678,10]]},"291":{"position":[[142,11],[154,7]]}}}],["service/repositori",{"_index":798,"t":{"281":{"position":[[293,18]]}}}],["serviceload",{"_index":737,"t":{"211":{"position":[[739,13]]}}}],["serviceloader.load(modelservice.class);loader.foreach(servic",{"_index":734,"t":{"211":{"position":[[585,61]]}}}],["servicepubl",{"_index":416,"t":{"82":{"position":[[1223,14]]}}}],["set",{"_index":226,"t":{"64":{"position":[[1578,3],[1635,4]]},"96":{"position":[[27,6]]},"178":{"position":[[109,4]]},"269":{"position":[[42,3]]}}}],["setaddress(\"redi",{"_index":839,"t":{"309":{"position":[[835,22]]}}}],["setdatabase(props.getdatabas",{"_index":843,"t":{"309":{"position":[[935,34]]}}}],["setnx",{"_index":227,"t":{"64":{"position":[[1629,5],[1660,5]]}}}],["setnx，发现键已经存在了，操作失败，redi",{"_index":230,"t":{"64":{"position":[[1802,25]]}}}],["setnx，成功设置了值，redi",{"_index":229,"t":{"64":{"position":[[1761,18]]}}}],["setpassword(props.getpassword",{"_index":842,"t":{"309":{"position":[[901,33]]}}}],["setter",{"_index":170,"t":{"52":{"position":[[158,8]]}}}],["shardingspher",{"_index":778,"t":{"267":{"position":[[9,14]]},"269":{"position":[[60,14]]},"271":{"position":[[65,14]]}}}],["signal",{"_index":346,"t":{"70":{"position":[[2296,9]]}}}],["simpli",{"_index":72,"t":{"24":{"position":[[104,6]]}}}],["sit",{"_index":41,"t":{"13":{"position":[[18,3],[175,3]]},"15":{"position":[[138,3],[290,3],[317,3],[469,3],[496,3],[648,3],[675,3],[827,3],[854,3],[1006,3],[1033,3],[1185,3],[1212,3],[1364,3],[1391,3],[1543,3],[1570,3],[1722,3],[1749,3],[1901,3],[1928,3],[2080,3],[2107,3],[2259,3],[2286,3],[2438,3],[2465,3],[2617,3],[2644,3],[2796,3],[2823,3],[2975,3]]}}}],["size",{"_index":62,"t":{"15":{"position":[[97,4]]},"42":{"position":[[36,5],[88,5],[124,5]]},"158":{"position":[[36,5],[88,5],[124,5]]}}}],["sk",{"_index":393,"t":{"82":{"position":[[410,3]]}}}],["slot",{"_index":490,"t":{"120":{"position":[[170,7],[178,4],[194,4],[248,4],[260,4]]}}}],["snakeyaml",{"_index":576,"t":{"170":{"position":[[97,9]]},"172":{"position":[[75,9]]}}}],["sort",{"_index":448,"t":{"96":{"position":[[14,12]]}}}],["spark",{"_index":369,"t":{"76":{"position":[[156,19]]},"82":{"position":[[378,5],[834,6],[1498,16]]},"215":{"position":[[106,6]]}}}],["sparkapikey",{"_index":377,"t":{"80":{"position":[[278,12],[515,12]]}}}],["sparkapisecret",{"_index":383,"t":{"80":{"position":[[616,15]]}}}],["sparkclient",{"_index":419,"t":{"82":{"position":[[1308,11]]}}}],["sparkclient(llmproperties.getspark",{"_index":428,"t":{"82":{"position":[[1658,38]]}}}],["sparkproperti",{"_index":407,"t":{"82":{"position":[[818,15],[965,15]]}}}],["specif",{"_index":305,"t":{"70":{"position":[[92,14]]}}}],["spi",{"_index":652,"t":{"201":{"position":[[30,3]]},"211":{"position":[[40,6],[148,6],[697,3],[791,3],[897,3]]}}}],["spi加载serviceloader<modelservic",{"_index":732,"t":{"211":{"position":[[543,32]]}}}],["spi接口publ",{"_index":724,"t":{"211":{"position":[[208,13]]}}}],["spring",{"_index":156,"t":{"52":{"position":[[4,6]]},"56":{"position":[[851,6],[937,6]]},"70":{"position":[[1070,6],[1506,6],[1589,11],[1691,6]]},"74":{"position":[[13,6]]},"82":{"position":[[140,7]]},"84":{"position":[[22,12]]},"108":{"position":[[0,6],[122,15],[238,6]]},"166":{"position":[[179,12]]},"170":{"position":[[59,6],[133,6]]},"172":{"position":[[56,6],[158,6],[323,6],[721,12]]},"174":{"position":[[294,6]]},"211":{"position":[[867,6],[877,6],[906,6],[947,6]]},"234":{"position":[[446,6]]},"244":{"position":[[5,6]]},"246":{"position":[[5,6]]},"250":{"position":[[5,6]]},"252":{"position":[[5,6]]},"301":{"position":[[3,6]]},"305":{"position":[[57,6],[151,6],[243,6]]},"307":{"position":[[117,7],[206,6]]},"309":{"position":[[18,6],[89,6],[155,6],[318,6],[976,10],[1108,6]]},"311":{"position":[[2,6],[194,6]]},"313":{"position":[[35,6],[85,6],[194,6]]}}}],["spring.redi",{"_index":826,"t":{"307":{"position":[[227,12]]},"309":{"position":[[350,12]]}}}],["springboot+应用接入+prometheus+监控体系.doc",{"_index":560,"t":{"160":{"position":[[13,40]]}}}],["spring、mybatis、redi",{"_index":745,"t":{"226":{"position":[[36,28]]}}}],["sql",{"_index":781,"t":{"269":{"position":[[86,3]]},"271":{"position":[[18,8],[84,3],[118,8]]}}}],["sql拼接null",{"_index":558,"t":{"140":{"position":[[13,11]]}}}],["sql拼接问题！todo",{"_index":561,"t":{"162":{"position":[[13,17]]}}}],["staff",{"_index":11,"t":{"5":{"position":[[82,5]]},"9":{"position":[[82,5]]},"18":{"position":[[82,5]]},"20":{"position":[[43,5]]},"22":{"position":[[82,5]]}}}],["stage",{"_index":764,"t":{"240":{"position":[[210,7],[245,8]]}}}],["starter",{"_index":435,"t":{"84":{"position":[[40,7]]},"305":{"position":[[69,7],[224,7]]},"309":{"position":[[30,7]]},"313":{"position":[[47,7]]}}}],["starter</artifactid",{"_index":817,"t":{"305":{"position":[[163,20]]}}}],["state",{"_index":467,"t":{"104":{"position":[[5,5]]}}}],["statemachin",{"_index":472,"t":{"108":{"position":[[7,26]]}}}],["static",{"_index":410,"t":{"82":{"position":[[952,6],[1069,6]]}}}],["stream",{"_index":107,"t":{"32":{"position":[[34,6]]},"36":{"position":[[6,6]]},"38":{"position":[[76,8],[92,9]]},"40":{"position":[[31,17],[80,13],[162,13]]},"42":{"position":[[180,14],[228,14]]},"70":{"position":[[84,7]]},"148":{"position":[[34,6]]},"152":{"position":[[6,6]]},"154":{"position":[[76,8],[92,9]]},"156":{"position":[[31,17],[80,13],[162,13]]},"158":{"position":[[180,14],[228,14]]},"236":{"position":[[17,6]]},"258":{"position":[[41,6]]}}}],["streaminvok",{"_index":328,"t":{"70":{"position":[[1535,12]]}}}],["string",{"_index":165,"t":{"52":{"position":[[107,6]]},"66":{"position":[[924,6]]},"70":{"position":[[1280,6]]},"80":{"position":[[271,6],[333,6],[508,6],[609,6],[674,6]]},"82":{"position":[[991,6],[1014,6],[1040,6],[1111,6],[1134,6]]},"188":{"position":[[58,17]]},"211":{"position":[[247,6],[449,6]]}}}],["string.format(ai_model_limiter_key_suffix",{"_index":276,"t":{"66":{"position":[[944,42]]}}}],["string、integ",{"_index":588,"t":{"172":{"position":[[426,14]]}}}],["subscrib",{"_index":262,"t":{"66":{"position":[[312,34]]},"70":{"position":[[663,15],[951,12],[985,13],[1032,12],[1673,13]]}}}],["subscriber）角色，负责对数据流进行消费。**在响应式编程模型中，subscrib",{"_index":310,"t":{"70":{"position":[[679,67]]}}}],["subscript",{"_index":352,"t":{"70":{"position":[[2688,12]]}}}],["subscription.request(n",{"_index":353,"t":{"70":{"position":[[2723,37]]}}}],["such",{"_index":23,"t":{"11":{"position":[[49,4]]},"24":{"position":[[268,4]]}}}],["summari",{"_index":56,"t":{"15":{"position":[[12,7]]}}}],["support",{"_index":20,"t":{"11":{"position":[[11,7]]},"24":{"position":[[404,8]]}}}],["swagger",{"_index":800,"t":{"283":{"position":[[40,7]]}}}],["system",{"_index":116,"t":{"42":{"position":[[0,7]]},"158":{"position":[[0,7]]}}}],["system.out.println(\"检测到deepseek配置，正在初始化deepseek",{"_index":431,"t":{"82":{"position":[[1816,56]]}}}],["system.out.println(\"检测到星火配置，正在初始化spark",{"_index":427,"t":{"82":{"position":[[1603,47]]}}}],["sébastien",{"_index":3,"t":{"5":{"position":[[22,9]]},"7":{"position":[[21,9]]},"9":{"position":[[22,9]]},"18":{"position":[[22,9]]},"22":{"position":[[22,9]]}}}],["t",{"_index":167,"t":{"52":{"position":[[131,1],[274,1]]}}}],["t1",{"_index":638,"t":{"192":{"position":[[388,3]]}}}],["t2",{"_index":640,"t":{"192":{"position":[[417,3]]}}}],["t3",{"_index":642,"t":{"192":{"position":[[472,3]]}}}],["t4",{"_index":643,"t":{"192":{"position":[[520,3]]}}}],["tabl",{"_index":658,"t":{"205":{"position":[[5,5],[37,5]]}}}],["tag",{"_index":92,"t":{"24":{"position":[[413,4]]}}}],["tail",{"_index":770,"t":{"240":{"position":[[313,4]]}}}],["tail=200",{"_index":762,"t":{"240":{"position":[[166,8]]}}}],["tay",{"_index":8,"t":{"5":{"position":[[70,3]]},"9":{"position":[[70,3]]},"18":{"position":[[70,3]]},"20":{"position":[[31,3]]},"22":{"position":[[70,3]]}}}],["temperatur",{"_index":706,"t":{"207":{"position":[[350,12],[539,12],[719,12]]}}}],["tempor",{"_index":52,"t":{"13":{"position":[[126,6]]},"15":{"position":[[241,6],[420,6],[599,6],[778,6],[957,6],[1136,6],[1315,6],[1494,6],[1673,6],[1852,6],[2031,6],[2210,6],[2389,6],[2568,6],[2747,6],[2926,6]]}}}],["text",{"_index":672,"t":{"205":{"position":[[366,4],[432,4],[495,4],[554,4]]}}}],["this.llmproperti",{"_index":423,"t":{"82":{"position":[[1401,18]]}}}],["thread",{"_index":128,"t":{"42":{"position":[[161,8],[208,8]]},"158":{"position":[[161,8],[208,8]]}}}],["throw",{"_index":147,"t":{"48":{"position":[[140,6]]},"66":{"position":[[221,5]]}}}],["throwabl",{"_index":285,"t":{"66":{"position":[[1591,12],[1873,12]]}}}],["throwable).geterrorcode().equals(request_timeout",{"_index":287,"t":{"66":{"position":[[1657,51]]}}}],["throwable.getmessag",{"_index":289,"t":{"66":{"position":[[1766,24]]}}}],["tikadocumentread",{"_index":749,"t":{"234":{"position":[[76,18],[95,37]]}}}],["timeout",{"_index":704,"t":{"207":{"position":[[334,8],[523,8],[687,8]]}}}],["timer、scheduledthreadpoolexecutor、或者像xxl",{"_index":479,"t":{"116":{"position":[[76,64]]}}}],["timestamp",{"_index":677,"t":{"205":{"position":[[609,9],[685,9]]}}}],["timingwheel",{"_index":496,"t":{"122":{"position":[[212,11]]}}}],["tinyint(1",{"_index":669,"t":{"205":{"position":[[296,10]]}}}],["tip",{"_index":70,"t":{"24":{"position":[[76,4]]}}}],["todo",{"_index":433,"t":{"84":{"position":[[13,4]]},"299":{"position":[[18,4]]}}}],["token",{"_index":708,"t":{"207":{"position":[[371,7],[560,7],[706,7]]},"234":{"position":[[244,5]]}}}],["tokentextsplitt",{"_index":751,"t":{"234":{"position":[[178,17]]}}}],["tonumber(argv[1",{"_index":243,"t":{"64":{"position":[[2489,17]]}}}],["tonumber(redis.call('get",{"_index":246,"t":{"64":{"position":[[2550,26]]}}}],["tostringserializer.class",{"_index":631,"t":{"188":{"position":[[110,25]]}}}],["transact",{"_index":650,"t":{"192":{"position":[[837,45]]}}}],["transit",{"_index":471,"t":{"104":{"position":[[200,10]]}}}],["tri",{"_index":253,"t":{"66":{"position":[[38,3]]}}}],["true",{"_index":265,"t":{"66":{"position":[[438,17]]},"70":{"position":[[3215,22]]}}}],["truncat",{"_index":59,"t":{"15":{"position":[[57,8]]}}}],["tryacquir",{"_index":362,"t":{"70":{"position":[[3180,13]]}}}],["trysetpermit",{"_index":221,"t":{"64":{"position":[[1411,16]]}}}],["ttl",{"_index":524,"t":{"126":{"position":[[182,87]]},"190":{"position":[[19,3]]},"215":{"position":[[246,3]]}}}],["ttl过期后进入死信队列。但是基于插件的这种方式，消息并不会立即进入队列，而是先把他们保存在一个基于erlang开发的mnesia数据库中，然后通过一个定时器去查询需要被投递的消息，再把他们投递到x",{"_index":530,"t":{"128":{"position":[[200,132]]}}}],["ttl（time",{"_index":445,"t":{"94":{"position":[[187,36]]}}}],["turbo",{"_index":685,"t":{"205":{"position":[[1017,5]]},"207":{"position":[[146,5],[327,6]]}}}],["type",{"_index":185,"t":{"56":{"position":[[275,7],[424,4]]}}}],["typefactori",{"_index":180,"t":{"54":{"position":[[116,11]]},"56":{"position":[[400,13]]}}}],["typefactory.constructparametrictyp",{"_index":188,"t":{"56":{"position":[[517,37]]}}}],["uap",{"_index":436,"t":{"86":{"position":[[0,38]]}}}],["ultrici",{"_index":49,"t":{"13":{"position":[[95,10]]},"15":{"position":[[210,10],[389,10],[568,10],[747,10],[926,10],[1105,10],[1284,10],[1463,10],[1642,10],[1821,10],[2000,10],[2179,10],[2358,10],[2537,10],[2716,10],[2895,10]]}}}],["uml",{"_index":474,"t":{"108":{"position":[[199,3]]}}}],["unknown",{"_index":567,"t":{"166":{"position":[[205,7]]}}}],["unrecognizedpropertyexcept",{"_index":569,"t":{"166":{"position":[[236,29]]}}}],["unsupportedencodingexcept",{"_index":148,"t":{"48":{"position":[[147,29]]}}}],["updat",{"_index":780,"t":{"269":{"position":[[25,6]]}}}],["update(newent",{"_index":783,"t":{"273":{"position":[[14,17]]}}}],["update_tim",{"_index":678,"t":{"205":{"position":[[671,13]]}}}],["update、delet",{"_index":782,"t":{"271":{"position":[[4,13]]}}}],["urisyntaxexcept",{"_index":150,"t":{"48":{"position":[[203,19]]}}}],["us",{"_index":25,"t":{"11":{"position":[[65,3],[135,3]]},"15":{"position":[[46,3]]},"24":{"position":[[96,7],[489,3]]},"66":{"position":[[1577,5]]},"70":{"position":[[935,15]]}}}],["user",{"_index":200,"t":{"56":{"position":[[1114,5]]}}}],["userapicli",{"_index":204,"t":{"56":{"position":[[1188,13],[1227,13]]}}}],["userid+modelkey",{"_index":742,"t":{"215":{"position":[[190,15]]}}}],["v1",{"_index":694,"t":{"207":{"position":[[55,2],[87,2],[119,2],[168,2]]}}}],["v1.params.api",{"_index":584,"t":{"172":{"position":[[216,13]]}}}],["v1.params.appid=zzz",{"_index":587,"t":{"172":{"position":[[303,19]]}}}],["v1.params.endpoint=yyyai",{"_index":586,"t":{"172":{"position":[[259,24]]}}}],["v3",{"_index":693,"t":{"205":{"position":[[1159,2]]},"207":{"position":[[683,3]]}}}],["valu",{"_index":233,"t":{"64":{"position":[[2064,6]]},"78":{"position":[[9,7],[139,115]]},"80":{"position":[[0,6]]}}}],["value(\"${llm.deepseek.api",{"_index":378,"t":{"80":{"position":[[291,26],[632,26]]}}}],["value(\"${llm.spark.api",{"_index":376,"t":{"80":{"position":[[232,23],[461,23],[563,23]]}}}],["value(\"${property.key}\")时，如果spring环境中无法解析property.key这个占位符（即找不到对应的配置），应用会立即抛出illegalargumentexcept",{"_index":372,"t":{"80":{"position":[[7,136]]}}}],["varchar(255",{"_index":667,"t":{"205":{"position":[[237,12]]}}}],["varchar(64",{"_index":665,"t":{"205":{"position":[[169,11]]}}}],["veri",{"_index":57,"t":{"15":{"position":[[25,4]]}}}],["version>...</vers",{"_index":818,"t":{"305":{"position":[[184,22]]}}}],["view",{"_index":64,"t":{"15":{"position":[[114,5]]}}}],["void",{"_index":360,"t":{"70":{"position":[[3101,4],[3140,4]]},"82":{"position":[[1468,4]]}}}],["vs",{"_index":351,"t":{"70":{"position":[[2600,2]]}}}],["want",{"_index":95,"t":{"24":{"position":[[444,4]]}}}],["web",{"_index":311,"t":{"70":{"position":[[860,3]]},"281":{"position":[[241,3]]}}}],["webflux",{"_index":313,"t":{"70":{"position":[[1077,30],[1513,7],[1601,7],[1698,7]]}}}],["welcome.md",{"_index":87,"t":{"24":{"position":[[288,10]]}}}],["welcome/index.md",{"_index":88,"t":{"24":{"position":[[310,16]]}}}],["well",{"_index":93,"t":{"24":{"position":[[421,5]]}}}],["while(tru",{"_index":485,"t":{"118":{"position":[[242,83]]}}}],["wrapper",{"_index":784,"t":{"273":{"position":[[32,8]]}}}],["x",{"_index":528,"t":{"128":{"position":[[141,35]]},"215":{"position":[[301,1]]}}}],["xml",{"_index":813,"t":{"305":{"position":[[81,3]]}}}],["xxx",{"_index":769,"t":{"240":{"position":[[285,3]]}}}],["xxxx",{"_index":701,"t":{"207":{"position":[[246,6],[436,6],[608,6]]}}}],["yaml",{"_index":562,"t":{"164":{"position":[[16,4]]},"166":{"position":[[121,4],[359,4]]},"170":{"position":[[74,4],[89,4]]},"172":{"position":[[46,4],[90,4],[129,4]]},"178":{"position":[[279,4]]},"307":{"position":[[112,4]]}}}],["yangshun",{"_index":7,"t":{"5":{"position":[[61,8]]},"9":{"position":[[61,8]]},"18":{"position":[[61,8]]},"20":{"position":[[22,8]]},"22":{"position":[[61,8]]}}}],["yml",{"_index":580,"t":{"172":{"position":[[23,7]]},"201":{"position":[[37,13]]},"203":{"position":[[639,7]]},"205":{"position":[[198,23]]},"207":{"position":[[171,17]]},"211":{"position":[[753,3]]}}}],["yyyyyyyyyyyi",{"_index":394,"t":{"82":{"position":[[423,13]]}}}],["zadd",{"_index":457,"t":{"96":{"position":[[466,4]]}}}],["zhydeepseek",{"_index":695,"t":{"207":{"position":[[72,11]]}}}],["zhyhaineng",{"_index":696,"t":{"207":{"position":[[108,10]]}}}],["zookeep",{"_index":473,"t":{"108":{"position":[[170,18]]}}}],["zpopmin",{"_index":461,"t":{"96":{"position":[[802,9]]}}}],["zrangebyscor",{"_index":458,"t":{"96":{"position":[[645,16]]}}}],["zrem",{"_index":460,"t":{"96":{"position":[[795,4],[900,7]]}}}],["zset",{"_index":440,"t":{"88":{"position":[[13,10]]},"96":{"position":[[34,22],[75,4],[136,7],[245,15],[604,4],[769,4],[969,4],[1195,4]]},"134":{"position":[[0,53]]},"215":{"position":[[239,4]]}}}],["zset是一个有序集合，每一个元素(memb",{"_index":543,"t":{"132":{"position":[[84,31]]}}}],["zset来实现订单关闭的功能的优点是可以借助redi",{"_index":545,"t":{"132":{"position":[[297,40]]}}}],["zset的基础上增加了一个基于内存的延迟队列。当我们要添加一个数据到延迟队列的时候，redission会把数据+超时时间放到zset中，并且起一个延时任务，当任务到期的时候，再去zset",{"_index":548,"t":{"134":{"position":[[220,115]]}}}]],"pipeline":["stemmer"]}}]